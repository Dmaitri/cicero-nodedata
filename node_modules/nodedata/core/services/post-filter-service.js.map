{"version":3,"sources":["core/services/post-filter-service.ts"],"names":[],"mappings":";AAAA,wBAAwB,mBAAmB,CAAC,CAAA;AAC5C,MAAY,KAAK,WAAM,UAAU,CAAC,CAAA;AAElC,6BAAyB,yBAAyB,CAAC,CAAA;AACnD,6BAAyB,0BAA0B,CAAC,CAAA;AACpD,MAAY,UAAU,WAAM,MAAM,CAAC,CAAA;AACnC,IAAI,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;AACrB,IAAI,iBAAiB,GAAG,EAAE,CAAC;AAE3B;IAII,OAAO,UAAU,CAAC,MAAM,EAAE,YAA+B;QACrD,IAAI,OAAO,CAAC;QACZ,EAAE,CAAC,CAAC,iBAAiB,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC9C,OAAO,GAAG,iBAAiB,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;QAC1D,CAAC;QACD,IAAI,CAAC,CAAC;YACF,IAAI,QAAQ,GAAG,iBAAS,CAAC,wBAAwB,CAAC,CAAC,uBAAU,CAAC,OAAO,CAAC,CAAC,CAAC;YACxE,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,IAAI,YAAY,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC;QAE7J,CAAC;QACD,EAAE,CAAA,CAAC,OAAO,CAAC,CAAC,CAAC;YACT,iBAAiB,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,OAAO,CAAC;YACtD,IAAI,KAAK,GAAG,EAAE,CAAC;YACf,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACnB,IAAI,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC;YACjF,EAAE,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACvB,4DAA4D;gBAC5D,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM;oBAClB,MAAM,CAAC,MAAM,CAAC;gBAClB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG;oBACT,uBAAU,CAAC,QAAQ,CAAC,yCAAyC,GAAG,GAAG,CAAC,CAAC;oBACrE,MAAM,GAAG,CAAC;gBACd,CAAC,CAAC,CAAC;YACP,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,4DAA4D;gBAC5D,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACvB,CAAC;QACL,CAAC;QACD,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;AACL,CAAC;AAnCY,yBAAiB,oBAmC7B,CAAA","file":"core/services/post-filter-service.js","sourcesContent":["import {MetaUtils} from \"../metadata/utils\";\nimport * as Utils from \"../utils\";\nimport {IPostfilterParams} from '../decorators/interfaces';\nimport {Decorators} from '../constants/decorators';\nimport {winstonLog} from '../../logging/winstonLog';\nimport * as Enumerable from 'linq';\nvar Q = require('q');\nvar serviceCollection = {};\n\nexport class PostFilterService {\n\n   \n\n    static postFilter(result, preAuthParam: IPostfilterParams): Q.Promise<any> {\n        var service;\n        if (serviceCollection[preAuthParam.serviceName]) {\n            service = serviceCollection[preAuthParam.serviceName];\n        }\n        else {\n            var services = MetaUtils.getMetaDataForDecorators([Decorators.SERVICE]);\n            service = Enumerable.from(services).where(x => x.metadata[0].params.serviceName == preAuthParam.serviceName).select(x => x.metadata[0]).firstOrDefault();\n\n        }\n        if(service) {\n            serviceCollection[preAuthParam.serviceName] = service;\n            var param = [];\n            param.push(result);\n            let ret = service.target[preAuthParam.methodName].call(service.target, ...param);\n            if (Utils.isPromise(ret)) {\n                //console.timeEnd(\"postFilter_\" + preAuthParam.serviceName);\n                return ret.then(result => {\n                    return result;\n                }).catch((err) => {\n                    winstonLog.logError('[PostFilterService: postFilter]: error ' + err);\n                    throw err;\n                });\n            }\n            else {\n                //console.timeEnd(\"postFilter_\" + preAuthParam.serviceName);\n                return Q.when(ret);\n            }\n        }\n        return Q.when(true);\n    }\n}\n"],"sourceRoot":"/source/"}