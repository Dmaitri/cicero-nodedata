{"version":3,"sources":["core/initialize/initialize-messengers.ts"],"names":[],"mappings":"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","file":"core/initialize/initialize-messengers.js","sourcesContent":["\nimport {MetaUtils} from \"../metadata/utils\";\nimport * as Utils from \"../utils\";\nimport * as mongooseUtils from '../../mongoose/utils';\nimport {MetaData} from '../metadata/metadata';\nimport {ExportTypes} from '../constants/decorators';\nimport {IDynamicRepository, DynamicRepository} from '../dynamic/dynamic-repository';\nimport {InstanceService} from '../services/instance-service';\nimport {ParamTypeCustom} from '../metadata/param-type-custom';\nimport {searchUtils} from \"../../search/elasticSearchUtils\";\nvar Config = Utils.config();\nimport {Decorators} from '../constants';\n\nimport {IRepositoryParams} from '../decorators/interfaces';\nimport {repositoryMap} from '../exports/repositories';\n\nimport {ISchemaGenerator} from '../interfaces/schema-generator';\nimport * as Enumerable from 'linq';\nimport {repoFromModel} from '../dynamic/model-entity';\n\nexport var mongooseNameSchemaMap: { [key: string]: any } = {};\n\nimport * as securityImpl from '../dynamic/security-impl';\nvar domain = require('domain');\nimport {inject} from '../../di/decorators/inject';\n\nimport {Messenger} from '../../mongoose/pubsub/messenger';\nimport {PrincipalContext} from '../../security/auth/principalContext';\nimport {Session} from  '../../models/session';\nimport * as configUtils from '../utils';\nimport {repoMap} from './initialize-repositories';\n\nimport * as Q from 'q';\nconst uuidv4 = require('uuid/v4');\nimport {IWorkerProcessService} from \"../services/workerProcessService\";\nimport {IWorkerProcess} from \"../../models/IWorkerProcess\";\nimport {IAutherizationParam} from \"../../security/auth/autherizationParam\";\n\nexport var allAutherizationRulesMap: any = {};\nexport var allAutherizationRules: Array<{\n    name: string;\n    acl: Array<IAutherizationParam>;\n    isRepoAuthorize: boolean;\n}> \n\nexport var workerProcessService: IWorkerProcessService;\nexport var mainMessenger: Messenger;\nexport var channleMessangerMap: any = {};\n\nimport {messageBraodcastOnMessenger,socketConnector} from \"./initialize-sockets\"\n\nexport class InitializeMessengers {\n\n\n\n    private _schemaGenerator: ISchemaGenerator;\n\n\n    private messenger = new Messenger({ retryInterval: 3000 });\n\n   \n\n    private serverId = uuidv4();\n\n    private workerProcessService: IWorkerProcessService;\n\n\n\n    private allAutherizationRulesMap: any = {};\n\n    // name.role :{ role: string, accessmask: number, acl?: boolean }\n    private allSingleEmitterSettings: any = {}; // {repo.name} : Array<strings> roles\n    constructor(server?: any) {\n        this.messenger.sendMessageToclient = this.sendMessageToclient;\n        this.messenger.getAllUsersForNotification = this.getAllUsersForNotification;\n        this.getProcessService();\n        allAutherizationRules = <Array<{\n            name: string;\n            acl: Array<IAutherizationParam>;\n            isRepoAuthorize: boolean;\n        }>>(configUtils.securityConfig().SecurityConfig.ResourceAccess);\n\n        mainMessenger = this.messenger;\n\n        if (allAutherizationRules && allAutherizationRules.length) {\n            allAutherizationRules.forEach((rule) => {\n\n                let insideRulMap: any = {};\n                if (rule && rule.acl && rule.acl.length) {\n                    rule.acl.forEach((acl) => {\n                        insideRulMap[acl.role] = acl;\n                        if (acl.emitToSingleWorker) {\n                            if (!this.allSingleEmitterSettings[rule.name]) {\n                                this.allSingleEmitterSettings[rule.name] = [];\n                            }\n                            this.allSingleEmitterSettings[rule.name].push(acl.role);\n                        }\n                    })\n                }\n                this.allAutherizationRulesMap[rule.name] = insideRulMap;\n            });\n        }\n        allAutherizationRulesMap = this.allAutherizationRulesMap;\n\n\n        this.initializeMessengersOnRepo(server);\n    }\n\n\n\n    public schemaGenerator(schemaGenerator: ISchemaGenerator) {\n        this._schemaGenerator = schemaGenerator;\n    }\n\n    private clientSendCount = 0;\n    private startDateTime = undefined;\n    private executeFindMany = (client, repo, message, multiClients?: any,collection?:any) => {\n        let self = this;\n        let data = undefined;\n        if (collection) {\n            data = collection;\n        }\n        else {\n            data = [message];\n        }\n        return repo.findMany(data).then((data: Array<any>) => {\n            if (data && data.length) {\n                if (!self.startDateTime) { self.startDateTime = new Date(); }\n                if (multiClients && multiClients.length) {\n                    multiClients.forEach((client) => {\n                        self.clientSendCount += data.length;\n                        // console.log(\"########### socket send Count ######### \", self.clientSendCount++);\n                        if ((self.clientSendCount % 1000) == 0) {\n                            let recalcDateTime = new Date();\n                            console.log(\"########### socket send Count ######### \", self.clientSendCount);\n                            console.log(\"########### socket time taken ######### \", recalcDateTime.getTime() - self.startDateTime.getTime());\n                        }\n                        //client.emit(repo.modelName(), message)\n                        data.forEach((subdata) => { client.emit(repo.modelName(), subdata) });\n                    });\n                }\n                else {\n                    self.clientSendCount += data.length;\n                    // console.log(\"########### socket send Count ######### \", self.clientSendCount++);\n                    if ((self.clientSendCount % 1000) == 0) {\n                        console.log(\"########### socket send Count ######### \", self.clientSendCount);\n                        let recalcDateTime = new Date();\n                        console.log(\"########### socket time taken ######### \", recalcDateTime.getTime() - self.startDateTime.getTime());\n                    }\n                    //client.emit(repo.modelName(), message)\n                    data.forEach((subdata) => { client.emit(repo.modelName(), subdata) });\n                }\n                return data\n            }\n            return undefined\n        }).catch((error) => {\n            //console.log(\"error in findmany socket emmitter\", error);\n            throw error;\n        });\n    }\n\n    private sendMessageToclient = (client, repo, message, multiClients?: any,collection?:any) => {\n        if (client.handshake.query && client.handshake.query.curSession) {\n            var d = domain.create();\n            d.run(() => {\n                PrincipalContext.User = securityImpl.getContextObjectFromSession(client.handshake.query.curSession);\n                //move to above \n                if (securityImpl.isAuthorize({ headers: client.handshake.query }, repo, \"findMany\")) {\n                    this.executeFindMany(client, repo, message, multiClients, collection);\n                }\n\n            });\n\n        }\n    }\n\n    private getProcessService(): any {\n\n        if (workerProcessService) {\n            return workerProcessService;\n        }\n        var services = MetaUtils.getMetaDataForDecorators([Decorators.SERVICE]);\n        var processService: any = Enumerable.from(services).where(x => x.metadata[0].params.serviceName == \"workerprocessservice\").select(x => x.metadata[0]).firstOrDefault();\n        if (processService) {\n            workerProcessService = processService.target;\n        }\n        return workerProcessService;\n    }\n\n    private getAllUsersForNotification = (entity: any) => {\n        var services = MetaUtils.getMetaDataForDecorators([Decorators.SERVICE]);\n        var service: any = Enumerable.from(services).where(x => x.metadata[0].params.serviceName == \"authorizationService\").select(x => x.metadata[0]).firstOrDefault();\n        if (service) {\n            return service.target.getAllUsersForNotification(entity);\n        }\n    }\n\n    private sendMessageOnRepo = (repo: any, message: any) => {\n        try {\n            if (repo && message) {\n                repo.onMessage(message);\n            }\n        }\n        catch (ex) { console.log(\"error in on message\", message); }\n    }\n\n\n\n    private checkIfRepoForMessenger = (meta: MetaData): boolean =>\n        meta && (meta.params.exportType == ExportTypes.ALL ||\n            ((((meta.params.exportType & ExportTypes.WS) == ExportTypes.WS) ||\n                ((meta.params.exportType & ExportTypes.WS_BROAD_CAST) == ExportTypes.WS_BROAD_CAST) ||\n                ((meta.params.exportType & ExportTypes.PUB_SUB) == ExportTypes.PUB_SUB)))\n        )\n\n\n    private initializeMessengersOnRepo(server?: any) {\n        let self = this;\n\n\n        let messenger = self.messenger;\n\n        let messengerPool: Array<Messenger> = new Array<Messenger>();\n\n        messengerPool.push(messenger);\n\n\n        for (let key in repoMap) {\n            let repo = repoMap[key].repo;\n            let meta: MetaData = repo.getMetaData();\n            if (self.checkIfRepoForMessenger(meta)) {\n                let messenger = self.messenger;\n                if (meta.params.dedicatedMessenger) {\n                    messenger = new Messenger({ retryInterval: 3000, collectionName: key + \"_message\", cappedSize: meta.params.cappedSize });\n                    messenger.sendMessageToclient = self.sendMessageToclient;\n                    messenger.getAllUsersForNotification = self.getAllUsersForNotification;\n                    if (meta.params.bufferBatchSize) {\n                        messenger.batchSize = meta.params.bufferBatchSize;\n                        messenger.run();                       \n                        \n                    }\n\n                    messengerPool.push(messenger);\n                }\n                \n                if (self.allSingleEmitterSettings[key] && self.allSingleEmitterSettings[key].length) {\n                    //console.log(\"over riding chekAndSend for \", key);\n\n                    messenger.chekAndSend = (path: string, message: any): Promise<any> => {\n                        return new Promise((resolve, reject) => {\n                            //message modification can be done here\n                            //example check connected workers as receipents and setting for single worker is set\n                            //get role which need to recive single worker\n                            let rolesForSinlgeEmitter: Array<string> = self.allSingleEmitterSettings[path];\n\n                            if (rolesForSinlgeEmitter && rolesForSinlgeEmitter.length) {\n                                //get random worker\n                                let singleWorkerOnRole: any = undefined;\n                                let singleRandomWorker: Array<{ role: string, serverId: any, workerId: any }> =\n                                    new Array<{ role: string, serverId: any, workerId: any }>();\n                                rolesForSinlgeEmitter.forEach((role1) => {\n                                    let singelWorker: IWorkerProcess = self.getProcessService().getSingleRandomWoker(path, role1);\n                                    if (singelWorker) {\n                                        singleRandomWorker.push({ role: role1, serverId: singelWorker.serverId, workerId: singelWorker.workerId });\n                                    }\n                                })\n                                if (singleRandomWorker.length) {\n                                    singleWorkerOnRole = {};\n                                    singleRandomWorker.forEach((singleWorker) => {\n                                        singleWorkerOnRole[singleWorker.role + \"_RC\"] = singleWorker; //assuming RC channel\n                                    });\n                                    if (message instanceof Array) {\n                                        message.forEach((msg) => { msg.singleWorkerOnRole = singleWorkerOnRole;});\n                                    }\n                                    else {\n                                        message.singleWorkerOnRole = singleWorkerOnRole;\n                                    }\n                                }\n                            }\n\n                            messenger.send(path, message, function (err, data) {\n                                resolve(true);\n                                //console.log('Sent message');\n                            });\n                        })\n                    }\n                }\n\n\n                channleMessangerMap[key] = messenger;\n                repo.setMessanger(messenger);\n                messenger.subscribe(key, true);\n\n                messenger.sendMessageOnRepo = this.sendMessageOnRepo;\n                \n            }\n        }\n\n\n        messengerPool.forEach((messenger) => {\n            // connect() begins \"tailing\" the collection \n            messenger.onConnect(function () {\n                // emits events for each new message on the channel \n\n                //console.log(\"messenger connected  starting registering repositories\");\n\n                for (let key in repoMap) {\n                    let repo = repoMap[key].repo;\n                    let meta: MetaData = repo.getMetaData();\n\n                    if (repo.getMessanger() != messenger) {\n                        continue;\n                    }\n\n                    if (self.checkIfRepoForMessenger(meta)) {\n                        messenger.on(key, function (data) {\n\n                            //console.log(\"message received on \", key);\n                            if (data.collection) {\n                                messageBraodcastOnMessenger(repo, data.message, data.collection);\n                            }\n                            else {\n                                messageBraodcastOnMessenger(repo, data);\n                            }\n                        })\n                    }\n                }\n\n                if (messenger == mainMessenger) {\n                    socketConnector();\n                }\n                \n\n            });\n        })\n\n        repositoryMap(repoMap);\n    }\n}\n"],"sourceRoot":"/source/"}