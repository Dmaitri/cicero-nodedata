{"version":3,"sources":["core/initialize/initialize.ts"],"names":[],"mappings":"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","file":"core/initialize/initialize.js","sourcesContent":["\nimport {InitializeRepositories} from \"./initialize-repositories\";\nimport {InitializeScokets} from \"./initialize-sockets\";\nimport {InitializeMessengers} from \"./initialize-messengers\";\nimport {InitializeControllers} from \"./initialize-controllers\";\nimport {ParamTypeCustom} from '../metadata/param-type-custom';\nimport {router} from '../exports';\nimport path = require('path');\nimport * as Enumerable from 'linq';\nimport Q = require('q');\nimport {MetaUtils} from \"../metadata/utils\";\nimport * as Utils from \"../utils\";\nimport {CrudEntity} from \"../dynamic/crud.entity\";\n\nexport class Initalize {\n    constructor(files: Array<String>, server?: any) {\n        new InitializeRepositories();\n        if (server) {\n            new InitializeMessengers();\n            new InitializeScokets(server);\n        }\n        new InitializeControllers();\n       \n        this.configureBase();\n        ['bulkPost', 'bulkPut', 'bulkPatch', 'bulkDel'].forEach(x => {\n            Object.defineProperty(Array.prototype, x, {\n                enumerable: false,\n                writable: false,\n                value: this.getExtendedArrayMethod(x)\n            });\n        });\n    }\n\n    getExtendedArrayMethod(action: string): () => Q.Promise<any> {\n        return (function () {\n            let curArr = this;\n            if (!curArr[0]) {\n                return Q.when([]);\n            }\n            let repo = (<CrudEntity>(curArr[0])).getRepo();\n            if (!repo) {\n                return Q.reject(\"repository not found\");\n            }\n            return repo[action]([].concat(curArr));\n        });\n    }\n\n    configureBase() {\n        var path = Utils.config().Config.basePath.indexOf('/') === 0 ? Utils.config().Config.basePath : '/' + Utils.config().Config.basePath;\n        router.get(path,\n            (req, res) => {\n                //fetch all resources name (not the model name) in an array\n                var allresourcesNames: Array<string> = Utils.getAllResourceNames();\n                var allresourceJson = [];\n                var fullbaseUrl: string = \"\";\n                fullbaseUrl = this.getProtocol(req) + '://' + req.get('host') + req.originalUrl;\n                allresourcesNames.forEach(resource => {\n                    var resoucejson = {};\n                    resoucejson[resource] = fullbaseUrl + (resource[0] === '/' ? resource : '/' + resource);//+ tokenUrl;\n                    allresourceJson.push(resoucejson);\n                });\n                //loop through rsources and push in json array with name as key and url as value\n                res.set(\"Content-Type\", \"application/json\");\n\n                res.send(JSON.stringify(allresourceJson, null, 4));\n            }\n        )\n    }\n\n    \n\n    private getProtocol(req) : string{\n        if(req.headers && req.headers[\"x-arr-ssl\"]){\n            return \"https\";\n        }\n        else{\n            return req.protocol;\n        }\n    }\n\n}"],"sourceRoot":"/source/"}