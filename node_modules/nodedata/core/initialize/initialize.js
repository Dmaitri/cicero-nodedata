"use strict";
const initialize_repositories_1 = require("./initialize-repositories");
const initialize_sockets_1 = require("./initialize-sockets");
const initialize_messengers_1 = require("./initialize-messengers");
const initialize_controllers_1 = require("./initialize-controllers");
const exports_1 = require('../exports');
const Q = require('q');
const Utils = require("../utils");
class Initalize {
    constructor(files, server) {
        new initialize_repositories_1.InitializeRepositories();
        if (server) {
            new initialize_messengers_1.InitializeMessengers();
            new initialize_sockets_1.InitializeScokets(server);
        }
        new initialize_controllers_1.InitializeControllers();
        this.configureBase();
        ['bulkPost', 'bulkPut', 'bulkPatch', 'bulkDel'].forEach(x => {
            Object.defineProperty(Array.prototype, x, {
                enumerable: false,
                writable: false,
                value: this.getExtendedArrayMethod(x)
            });
        });
    }
    getExtendedArrayMethod(action) {
        return (function () {
            let curArr = this;
            if (!curArr[0]) {
                return Q.when([]);
            }
            let repo = (curArr[0]).getRepo();
            if (!repo) {
                return Q.reject("repository not found");
            }
            return repo[action]([].concat(curArr));
        });
    }
    configureBase() {
        var path = Utils.config().Config.basePath.indexOf('/') === 0 ? Utils.config().Config.basePath : '/' + Utils.config().Config.basePath;
        exports_1.router.get(path, (req, res) => {
            //fetch all resources name (not the model name) in an array
            var allresourcesNames = Utils.getAllResourceNames();
            var allresourceJson = [];
            var fullbaseUrl = "";
            fullbaseUrl = this.getProtocol(req) + '://' + req.get('host') + req.originalUrl;
            allresourcesNames.forEach(resource => {
                var resoucejson = {};
                resoucejson[resource] = fullbaseUrl + (resource[0] === '/' ? resource : '/' + resource); //+ tokenUrl;
                allresourceJson.push(resoucejson);
            });
            //loop through rsources and push in json array with name as key and url as value
            res.set("Content-Type", "application/json");
            res.send(JSON.stringify(allresourceJson, null, 4));
        });
    }
    getProtocol(req) {
        if (req.headers && req.headers["x-arr-ssl"]) {
            return "https";
        }
        else {
            return req.protocol;
        }
    }
}
exports.Initalize = Initalize;

//# sourceMappingURL=initialize.js.map
