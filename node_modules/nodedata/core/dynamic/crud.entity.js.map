{"version":3,"sources":["core/dynamic/crud.entity.ts"],"names":[],"mappings":";;;;;;;;;;AACA,6BAA8B,2BAA2B,CAAC,CAAA;AAK1D,+BAA4B,gBAAgB,CAAC,CAAA;AAC7C,wBAAwB,mBAAmB,CAAC,CAAA;AAC5C,6BAA0B,yBAAyB,CAAC,CAAA;AACpD,4BAAwB,yBAAyB,CAAC,CAAA;AAElD;IASI;QACI,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI;YAC5C,MAAM,CAAC,cAAc,CAAO,IAAK,CAAC,SAAS,EAAE,IAAI,EAAE;gBAC/C,QAAQ,EAAE,KAAK;gBACf,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC;aACpC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,SAAS,CAAC,KAAU;QACxB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACpC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE;mBACnB,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,IAAI,IAAI;mBAC9B,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,IAAI,gBAAgB,CAAC,CAAC,CAAC;gBAChD,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;YAClC,CAAC;QACL,CAAC;QACD,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;IAED,OAAO;QACH,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;IAChC,CAAC;IAEO,aAAa;QAEjB,IAAI,KAAK,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;QACnC,IAAI,KAAK,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;QACxB,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACnC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;YACR,MAAM,CAAC,SAAS,CAAC;QAGrB,0BAA0B;QAE1B,IAAI,YAAY,GAAG,iBAAS,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QACzD,iBAAS,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QACtC,EAAE,CAAC,CAAC,YAAY,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;YAC5C,IAAI,CAAC,GAAG,4BAAa,CAAC;YACtB,IAAI,IAAI,GAAG,iBAAS,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,uBAAU,CAAC,QAAQ,CAAC,CAAC;YACxE,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,4BAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC9C,CAAC;QAEL,CAAC;QACD,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;IACD,GAAG;QAGC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAA;QAC3C,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACpD,CAAC;IACD,IAAI;QACA,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAA;QACvC,CAAC;QACL,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IACD,MAAM;QACF,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAA;QAC3C,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjD,CAAC;IACD,KAAK;QACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAA;QAC3C,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACtD,CAAC;AACL,CAAC;AArFG;IAAC,kBAAK,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC;;uCAAA;AAI9C;IAAC,kBAAK,EAAE;IACP,qBAAS,EAAE;;8CAAA;AANH,kBAAU,aAsFtB,CAAA;AAEa,WAAG,GAA6B;IAC1C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAA;IAC3C,CAAC;IACD,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AACpD,CAAC,CAAC;AAEF;kBAAe,UAAU,CAAC","file":"core/dynamic/crud.entity.js","sourcesContent":["\nimport {field, document} from '../../mongoose/decorators';\nimport { jsonignore } from '../decorators';\nimport {DynamicRepository} from './dynamic-repository';\nimport {Types} from 'mongoose';\nimport * as Enumerable from 'linq';\nimport {repoFromModel} from \"./model-entity\";\nimport {MetaUtils} from \"../metadata/utils\";\nimport { Decorators} from '../constants/decorators';\nimport {transient} from \"../decorators/transient\";\n \nexport class CrudEntity {\n    @field({ primary: true, autogenerated: true })\n    _id: Types.ObjectId | string | number | Date;  \n\n\n    @field()\n    @transient()\n    __dbEntity: any;\n\n    constructor() {   \n        [\"put\", \"post\", \"delete\", \"patch\"].forEach((prop) => {\n            Object.defineProperty((<any>this).__proto__, prop, {\n                writable: false,\n                value: CrudEntity.prototype[prop]\n            });\n        });\n    }\n\n    private getCaller(trace: any):string {\n        for (let i = 2; i < trace.length; i++) {\n            if (trace[i].getTypeName()\n                && trace[i].getTypeName() != null\n                && trace[i].getTypeName() != \"wrappedPromise\") {\n                return trace[i].getTypeName();\n            }\n        }\n        return undefined;\n    }\n\n    getRepo(): DynamicRepository {\n        return this.getRepository();\n    }\n\n    private getRepository(): DynamicRepository {\n\n        let stack = require('stack-trace');\n        let trace = stack.get();\n        let caller = this.getCaller(trace);\n        if (!caller)\n            return undefined;\n\n\n        // target.constructor.name\n\n        let cachedModels = MetaUtils.getMetaDataFromName(caller);\n        MetaUtils.getMetaDataFromName(caller);\n        if (cachedModels && cachedModels.length) {\n            return undefined;\n        }\n\n        if (this.constructor && this.constructor.name) {\n            let c = repoFromModel;\n            var meta = MetaUtils.getMetaData(this.constructor, Decorators.DOCUMENT);\n            if (meta && meta[0]) {\n                return repoFromModel[meta[0].params.name];\n            }\n\n        }\n        return undefined;\n    }\n    put(): Q.Promise<any> {\n\n\n        if (!this.getRepository()) {\n            return Q.reject(\"repository not found\")\n        }\n        return this.getRepository().put(this._id, this);\n    }\n    post(): Q.Promise<any>{\n        if (!this.getRepository()) {\n            return Q.reject(\"repository not found\")\n            }\n        return this.getRepository().post(this);\n    }\n    delete() {\n        if (!this.getRepository()) {\n            return Q.reject(\"repository not found\")\n        }\n        return this.getRepository().delete(this._id);\n    }\n    patch() {\n        if (!this.getRepository()) {\n            return Q.reject(\"repository not found\")\n        }\n        return this.getRepository().patch(this._id, this);\n    }\n}\n\n export const put: () => Q.Promise < any > =  () => {\n    if (!this.getRepository()) {\n        return Q.reject(\"repository not found\")\n    }\n    return this.getRepository().put(this._id, this);\n};\n\nexport default CrudEntity;\n"],"sourceRoot":"/source/"}