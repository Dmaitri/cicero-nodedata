{"version":3,"sources":["core/dynamic/dynamic-repository.ts"],"names":[],"mappings":"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","file":"core/dynamic/dynamic-repository.js","sourcesContent":["import * as Enumerable from 'linq';\nimport express = require(\"express\");\nvar router = express.Router();\n\nimport Q = require('q');\n\nimport {IEntityService} from \"../interfaces/entity-service\";\nimport {Container} from '../../di';\nimport * as Utils from '../utils';\nimport {pathRepoMap, getEntity, getModel} from './model-entity';\nimport {InstanceService} from '../services/instance-service';\nimport {MetaUtils} from \"../metadata/utils\";\nimport {Decorators} from '../constants';\nimport {QueryOptions} from '../interfaces/queryOptions';\nimport * as utils from '../../mongoose/utils';\nimport {MetaData} from '../metadata/metadata';\n\n\nvar modelNameRepoModelMap: { [key: string]: IDynamicRepository } = {};\n\nexport function GetRepositoryForName(name: string): IDynamicRepository {\n    return modelNameRepoModelMap[name]\n}\n\nexport interface IDynamicRepository {\n    getEntity();\n    getModel(dynamicName?: string);\n    modelName();\n    getEntityType(): any;\n    getRootRepo(): IDynamicRepository;\n\n    bulkPost(objArr: Array<any>);\n    bulkPut(objArr: Array<any>, batchSize?: number, donotLoadChilds?: boolean);\n    bulkPatch(objArr: Array<any>);\n    bulkPutMany(objIds: Array<any>, obj: any);\n    bulkDel(objArr: Array<any>);\n\n    findOne(id: any, donotLoadChilds?: boolean): Q.Promise<any>;\n    findMany(ids: Array<any>, toLoadEmbeddedChilds?: boolean): Q.Promise<any>;\n    findAll(): Q.Promise<any>;\n    //findWhere(query, selectedFields?: Array<any>): Q.Promise<any>;\n    findWhere(query, selectedFields?: Array<any>, queryOptions?: QueryOptions): Q.Promise<any>;\n    countWhere(query);\n    distinctWhere(query);\n    findByField(fieldName, value): Q.Promise<any>;\n    findChild(id, prop): Q.Promise<any>;\n\n    put(id: any, obj: any): Q.Promise<any>;\n    post(obj: any): Q.Promise<any>;\n    delete(id: any);\n    patch(id: any, obj);\n    setRestResponse(obj: any);\n    getShardCondition();\n    setMessanger(obj: any);\n    getMessanger(): any;\n    setMetaData(meta: MetaData);\n    getMetaData(): MetaData;\n    castToPrimaryKey(id): any;\n\n    onMessage(message: any);\n\n    isOnlyCustomActions:boolean;\n    isOnlySeachMethods:boolean;\n    isOnlyBasicRoutes:boolean;\n}\n\nexport class DynamicRepository implements IDynamicRepository {\n    private path: string;\n    private model: any;\n    private metaModel: MetaData;\n    private entity: any;\n    private entityService: IEntityService;\n    private rootLevelRep: IDynamicRepository;\n    private messenger: any;\n\n    isOnlyCustomActions:boolean;\n    isOnlySeachMethods:boolean;\n    isOnlyBasicRoutes:boolean;\n\n    //private modelRepo: any;\n\n    public initialize(repositoryPath: string, target: Function | Object, model?: any, rootRepo?: IDynamicRepository) {\n        //console.log(schema);\n        this.path = repositoryPath;\n        this.entity = target;\n        this.rootLevelRep = rootRepo;\n\n\n\n\n        if (target instanceof DynamicRepository) {\n            target.rootLevelRep = rootRepo;\n        }\n        modelNameRepoModelMap[this.path] = this;\n    }\n\n    public setMetaData(meta: MetaData) {\n        this.metaModel = meta;\n    }\n\n    public getMetaData(): MetaData {\n        return this.metaModel;\n    }\n\n    public setMessanger(msgner?: any) {\n        this.messenger = msgner;\n        if (this.rootLevelRep) {\n            this.rootLevelRep.setMessanger(msgner)\n        }\n    }\n\n    public getMessanger() {\n        return this.messenger;\n    }\n\n    public getEntity() {\n        return getEntity(pathRepoMap[this.path].schemaName);\n    }\n\n    public getModel(dynamicName?: string) {\n        return Utils.entityService(pathRepoMap[this.path].modelType).getModel(this.path, dynamicName);\n    }\n\n    public getRootRepo() {\n        return this.rootLevelRep;\n    }\n\n    public bulkPost(objArr: Array<any>, batchSize?: number) {\n        var objs = [];\n        objArr.forEach(x => {\n            objs.push(InstanceService.getInstance(this.getEntity(), null, x));\n        });\n        return Utils.entityService(pathRepoMap[this.path].modelType).bulkPost(this.path, objs, batchSize).then(result => {\n            if (result && result.length > 0) {\n                var res = [];\n               \n                result.forEach(x => {\n                    res.push(InstanceService.getObjectFromJson(this.getEntity(), x));\n                });\n                this.sendAllMessagesUsingMessenger(result);\n                return res;\n            }\n            return result;\n        });\n    }\n\n    \n\n    public bulkPut(objArr: Array<any>, batchSize?: number, donotLoadChilds?: boolean) {\n        var objs = [];\n        objArr.forEach(x => {\n            objs.push(InstanceService.getInstance(this.getEntity(), null, x));\n        });\n        return Utils.entityService(pathRepoMap[this.path].modelType).bulkPut(this.path, objs, batchSize, donotLoadChilds).then(result => {\n            if (result && result.length > 0) {\n                var res = [];\n               \n                result.forEach(x => {\n                    res.push(InstanceService.getObjectFromJson(this.getEntity(), x));\n                });\n                this.sendAllMessagesUsingMessenger(result);\n                return res;\n            }\n            return result;\n        });\n    }\n\n    private sendAllMessagesUsingMessenger(entities: Array<any>) {\n        if (!this.messenger) {\n            return;\n        }\n        let messagesToSend = [];\n\n        this.messenger.chekAndSend(this.path, entities);\n\n        //entities.forEach(x => {           \n        //    if (this.messenger) {\n        //        messagesToSend.push();\n        //    }\n        //})\n        //if (this.messenger && messagesToSend.length) {\n        //    Q.allSettled(messagesToSend).then((sucess) => { console.log(\"send sucess\") })\n        //        .catch((err) => { console.log(\"error in sending message bulkPost\", err) });\n        //}\n    }\n\n    public bulkPatch(objArr: Array<any>) {\n        var objs = [];\n        objArr.forEach(x => {\n            objs.push(InstanceService.getInstance(this.getEntity(), null, x));\n        });\n        return Utils.entityService(pathRepoMap[this.path].modelType).bulkPatch(this.path, objs).then(result => {\n            if (result && result.length > 0) {\n                var res = [];\n                result.forEach(x => {\n                    res.push(InstanceService.getObjectFromJson(this.getEntity(), x));\n                });\n                this.sendAllMessagesUsingMessenger(result);\n                return res;\n            }\n            return result;\n        });\n    }\n\n    public bulkPutMany(objIds: Array<any>, obj: any) {\n        return Utils.entityService(pathRepoMap[this.path].modelType).bulkPutMany(this.path, objIds, obj).then(result => {\n            if (result && result.length > 0) {\n                var res = [];\n                result.forEach(x => {\n                    res.push(InstanceService.getObjectFromJson(this.getEntity(), x));\n                });\n                this.sendAllMessagesUsingMessenger(result);\n                return res;\n            }\n            return result;\n        });\n    }\n\n    public bulkDel(objArr: Array<any>) {\n        return Utils.entityService(pathRepoMap[this.path].modelType).bulkDel(this.path, objArr);\n    }\n\n    public modelName() {\n        return this.path;\n    }\n\n    public getEntityType() {\n        return this.entity;\n    }\n\n    /**\n     * Returns all the items in a collection\n     */\n    public findAll(): Q.Promise<any> {\n        return Utils.entityService(pathRepoMap[this.path].modelType).findAll(this.path).then(result => {\n            if (result && result.length > 0) {\n                var res = [];\n                result.forEach(x => {\n                    res.push(InstanceService.getObjectFromJson(this.getEntity(), x));\n                });\n                return res;\n            }\n            return result;\n        });\n    }\n\n    // public findWhere(query, selectedFields?: Array<any>): Q.Promise<any> {\n    //     return Utils.entityService(pathRepoMap[this.path].modelType).findWhere(this.path, query, selectedFields).then(result => {\n    //         if (result && result.length > 0) {\n    //             var res = [];\n    //             result.forEach(x => {\n    //                 res.push(InstanceService.getObjectFromJson(this.getEntity(), x));\n    //             });\n    //             return res;\n    //         }\n    //         return result;\n    //     });\n    // }\n\n    public findWhere(query, selectedFields?: Array<any>, queryOptions?: QueryOptions, toLoadChilds?: boolean): Q.Promise<any> {\n        return Utils.entityService(pathRepoMap[this.path].modelType).findWhere(this.path, query, selectedFields, queryOptions, toLoadChilds).then(result => {\n            if (result && result.length > 0) {\n                var res = [];\n                result.forEach(x => {\n                    res.push(InstanceService.getObjectFromJson(this.getEntity(), x));\n                });\n                return res;\n            }\n            return result;\n        });\n    }\n\n    public countWhere(query) {\n        return Utils.entityService(pathRepoMap[this.path].modelType).countWhere(this.path, query).then(result => {\n            return result;\n        });\n    }\n\n    public distinctWhere(query) {\n        return Utils.entityService(pathRepoMap[this.path].modelType).distinctWhere(this.path, query).then(result => {\n            return result;\n        });\n    }\n\n\n    public findOne(id, donotLoadChilds?: boolean) {\n        if (!utils.isBasonOrStringType(id)) {\n            let result = id;\n            return Q.when(InstanceService.getObjectFromJson(this.getEntity(), result));\n        }\n        else {\n            return Utils.entityService(pathRepoMap[this.path].modelType).findOne(this.path, id, donotLoadChilds).then(result => {\n                if (result)\n                    return InstanceService.getObjectFromJson(this.getEntity(), result);\n                return result;\n            });\n        }\n    }\n\n    public findByField(fieldName, value): Q.Promise<any> {\n        return Utils.entityService(pathRepoMap[this.path].modelType).findByField(this.path, fieldName, value).then(result => {\n            return InstanceService.getObjectFromJson(this.getEntity(), result);\n        });\n    }\n\n    public findMany(ids: Array<any>, toLoadEmbeddedChilds?: boolean) {\n        if (!utils.isBasonOrStringType(ids[0])) {\n            let result = ids;\n            if (result && result.length > 0) {\n                var res = [];\n                result.forEach(x => {\n                    res.push(InstanceService.getObjectFromJson(this.getEntity(), x));\n                });\n                return Q.when(res);\n            }\n            return Q.when(result);\n        }\n        else {\n            return Utils.entityService(pathRepoMap[this.path].modelType).findMany(this.path, ids, toLoadEmbeddedChilds).then(result => {\n                if (result && result.length > 0) {\n                    var res = [];\n                    result.forEach(x => {\n                        res.push(InstanceService.getObjectFromJson(this.getEntity(), x));\n                    });\n                    return res;\n                }\n                return result;\n            });\n        }\n    }\n\n    public findChild(id, prop): Q.Promise<any> {\n        //check if child model is diffrent from parent model (parent is doc and child is entity)\n        //get child repo\n        //call parent's find one and get the array of ids\n        //return child repo.findmany (ids)\n\n        //var childMeta:string = Utils.getRepoPathForChildIfDifferent(this.getEntity(), prop);\n        //if (childMeta)\n        //    return this.findOne(id).then(parent => {\n        //        var chilldIds = parent[prop];\n        //        if (!(chilldIds instanceof Array)) {\n        //            chilldIds = [chilldIds];\n        //        }\n        //        return Utils.entityService(pathRepoMap[childMeta].modelType).findMany(childMeta,chilldIds);\n        //    });\n\n        return Utils.entityService(pathRepoMap[this.path].modelType).findChild(this.path, id, prop);\n    }\n\n    /**\n     * case 1: all new - create main item and child separately and embed if true\n     * case 2: some new, some update - create main item and update/create child accordingly and embed if true\n     * @param obj\n     */\n    public post(obj: any): Q.Promise<any> {\n        obj = InstanceService.getInstance(this.getEntity(), null, obj);\n        return Utils.entityService(pathRepoMap[this.path].modelType).post(this.path, obj).then(result => {\n            if (result) {\n                if (this.messenger) {\n                    this.messenger.chekAndSend(this.path, result);\n                }\n            }\n            return result;\n        });\n    }\n\n    public put(id: any, obj: any) {\n        obj = InstanceService.getInstance(this.getEntity(), id, obj);\n        return Utils.entityService(pathRepoMap[this.path].modelType).put(this.path, id, obj).then(result => {\n            let retVal = InstanceService.getObjectFromJson(this.getEntity(), result);\n            if (retVal) {\n                if (this.messenger) {\n                    this.messenger.chekAndSend(this.path, retVal);\n                }\n            }\n            return retVal;\n        });\n    }\n\n    public delete(id: any) {\n        return Utils.entityService(pathRepoMap[this.path].modelType).del(this.path, id);\n    }\n\n    public patch(id: any, obj) {\n        obj = InstanceService.getInstance(this.getEntity(), id, obj);\n        return Utils.entityService(pathRepoMap[this.path].modelType).patch(this.path, id, obj).then(result => {\n            let retVal = InstanceService.getObjectFromJson(this.getEntity(), result);\n            if (retVal) {\n                if (this.messenger) {\n                    this.messenger.chekAndSend(this.path, retVal);\n                }\n            }\n            return retVal;\n        });\n    }\n    /**\n * Below interceptor is used to add/remove some of the properties of model before sending it to client.\n * e.g. samplDocument = {\"id\" : \"23\",\"name\" : \"test\",\"companyName\" : \"com\"}, here if we don't want to pass companyName to client then it can be removed in this interceptor.\n */\n    public setRestResponse(obj: any) {\n\n    }\n\n    // This function should return the additional shard condition which will be added in all the query to avoid the queries for cross sharding\n    public getShardCondition() {\n        return null;\n    }\n\n    public castToPrimaryKey(id) {\n        let primaryKey = '_id';\n        let modelRepo = this.getEntityType();\n        let decoratorFields = MetaUtils.getMetaData(modelRepo.model.prototype, Decorators.FIELD, primaryKey);\n\n        if(decoratorFields==null){\n            decoratorFields = MetaUtils.getMetaData(modelRepo.model.prototype, Decorators.COLUMN, primaryKey);\n        }\n        if (decoratorFields && decoratorFields.params &&  decoratorFields.params.primaryKey && decoratorFields.getType() == Number) {\n            return Number.parseInt(id);\n        }\n        return id;\n    }\n\n    public onMessage(message: any) {\n        return;\n    }\n}"],"sourceRoot":"/source/"}