{"version":3,"sources":["core/decorators/processControl.ts"],"names":[],"mappings":"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","file":"core/decorators/processControl.js","sourcesContent":["import { MetaUtils } from \"../metadata/utils\";\nimport * as Utils from \"../utils\";\nimport { Decorators } from '../constants/decorators';\nimport { DecoratorType } from '../enums/decorator-type';\nimport { IProcessControlParams } from './interfaces/IProcessControlParams';\nimport { IProcessControlService, processControlServiceName, processControlContext } from './interfaces/IProcessControlService';\nimport * as Enumerable from 'linq';\nimport {executeWorkerHandler} from './workerAssociation';\nimport {Container} from '../../di';\nimport Q = require('q');\n\n//This function is a private function and not exposed as an attribute\n//process type=1 process_start\n//process type=2 processend\n//process type=3 processstart and end\nfunction preProcessHandler(params: IProcessControlParams, target, propertyKey, descriptor, originalMethod, type: string) {\n    return function () {\n        console.log(\"preProcessHandler\", params);\n        var meta = MetaUtils.getMetaData(target, type, propertyKey);\n        var targetObjectId: any;\n        if (params.indexofArgumentForTargetObjectId != undefined) {\n            targetObjectId = arguments[params.indexofArgumentForTargetObjectId];\n        }\n\n        if (params.indexofArgumentForTargetObject != undefined) {\n            targetObjectId = arguments[params.indexofArgumentForTargetObject] && arguments[params.indexofArgumentForTargetObject]._id;\n        }\n\n        var services = MetaUtils.getMetaDataForDecorators([Decorators.SERVICE]);\n        var procService = Enumerable.from(services).where(x => x.metadata[0].params.serviceName == processControlServiceName).select(x => x.metadata[0]).firstOrDefault();\n        if (!procService)\n            return originalMethod.apply(this, arguments);\n\n        var processControlService: IProcessControlService = <IProcessControlService>Container.resolve(procService.params.target);\n        var targetServices = MetaUtils.getMetaData(target, Decorators.SERVICE);\n        var serviceName = targetServices[0].params.serviceName;\n        if (processControlService && meta) {\n            if (type == Decorators.PROCESS_START || type == Decorators.PROCESS_START_AND_END) {\n                //preprocess\n                let argsObj = Utils.getMethodArgs(originalMethod, arguments);\n\n                if (params.executeInDistributedWorker ) {\n                    // Parent - processcontrol management executing with worker \n                    console.log('process control initializing started');\n                    let workerParams = executeWorkerHandler({}, target, propertyKey, originalMethod, Decorators.WORKER,true).apply(this, arguments);\n                    return processControlService.initialize(serviceName, propertyKey, targetObjectId, params, workerParams).then((sucess) => {\n\n                       // var taskInfo = executeWorkerHandler({}, target, propertyKey, originalMethod, Decorators.WORKER).apply(this, arguments);\n                        console.log('process control initialized successfully');\n                        return processControlService.sendResponse(sucess);\n                    });\n                }\n                else if (params.executeInWorker && !MetaUtils.childProcessId && Utils.config().Config.isMultiThreaded) {\n                    // Parent - processcontrol management executing with worker \n                    console.log('process control initializing started');\n                    \n                    return processControlService.initialize(serviceName, propertyKey, targetObjectId, params).then((sucess) => {\n\n                         var taskInfo = executeWorkerHandler({}, target, propertyKey, originalMethod, Decorators.WORKER).apply(this, arguments);\n                        console.log('process control initialized successfully');\n                        return processControlService.sendResponse(sucess);\n                    });\n                }\n                else {\n                    let initialize;\n                    if (params.executeInWorker && MetaUtils.childProcessId) {\n                        // already initialized in parent process\n                        initialize = Q.when(true);\n                        console.log('process control already initialized');\n                    }\n                    else {\n                        console.log('process control initialized started');\n                        initialize = processControlService.initialize(serviceName, propertyKey, targetObjectId, params, argsObj);\n                    }\n                    return initialize.then(res => {\n                        return processControlService.startProcess().then((sucess) => {\n                            console.log('process control In progress');\n                            if (sucess) {\n                                //actual method of caller\n                                //console.log('method execution started', originalMethod.name, argsObj);\n                                var result = originalMethod.apply(this, arguments);\n                                if (Utils.isPromise(result)) {\n                                    console.log('method executing...');\n                                    return result.then((sucess) => {\n                                        if (type == Decorators.PROCESS_START_AND_END) {\n                                            //return statement\n                                            return processControlService.completeProcess(sucess).then((result) => {\n                                                console.log('method execution completed');\n                                                return sucess;\n                                            });\n                                        } else {\n                                            return sucess;\n                                        }\n                                    }).catch(error => {\n                                        console.log(\"throw>>>>>>>>>>>>>>>>>>>\");\n                                        if (type == Decorators.PROCESS_START_AND_END) {\n                                            //return statement\n                                            return processControlService.errorOutProcess(JSON.stringify(error)).then((result) => {\n                                                console.log('method execution error', error);\n                                                throw error;\n                                            }).catch((err) => {\n                                                console.log('method execution error', error);\n                                                throw error;\n                                            })\n                                        } else {\n                                            throw error;\n                                        }\n                                    });\n                                }\n                                else {\n                                    if (type == Decorators.PROCESS_START_AND_END) {\n                                        //return statement\n                                        console.log('method execution started', originalMethod.name, argsObj);\n                                        return processControlService.completeProcess(result).then(res => {\n                                            console.log('method execution completed');\n                                            return result;\n                                        });\n                                    }\n                                }\n                            }\n                            else {\n                                return Promise.reject(\"already running process\");\n                            }\n                        }, (error) => {\n                            return Promise.reject(\"Error while starting process : \" + error);\n                        });\n                    });\n                }\n            }\n            if (type == Decorators.PROCESS_END) {\n                var result = originalMethod.apply(this, arguments);\n                if (Utils.isPromise(result)) {\n                    return result.then((sucess) => {\n                        return processControlService.completeProcess(sucess).then((result) => {\n                            return sucess;\n                        });\n                    }, (error) => {\n                        return processControlService.errorOutProcess(JSON.stringify(error)).then((result) => {\n                            throw error;\n                        }).catch((err) => {\n                            throw error;\n                        });\n                    });\n                } else {\n                    processControlService.completeProcess(result);\n                    return result;\n                }\n            }\n            return descriptor;\n        }\n        else {\n            return originalMethod.apply(this, arguments);\n        }\n    };\n}\n\nexport function processStart(params: IProcessControlParams): any {\n    params = params || <any>{};\n\n    return function (target: Function, propertyKey: string, descriptor: any) {\n        MetaUtils.addMetaData(target,\n            {\n                decorator: Decorators.PROCESS_START,\n                decoratorType: DecoratorType.METHOD,\n                params: params,\n                propertyKey: propertyKey\n            });\n        var origianlmethod = descriptor.value;\n        descriptor.value = preProcessHandler(params, target, propertyKey, descriptor, origianlmethod, Decorators.PROCESS_START);\n        //descriptor.value = preProcessHandler(params, target, propertyKey, descriptor, rsProcessDecorators.PROCESS_START);\n    }\n}\nexport function processEnd(params: IProcessControlParams): any {\n    params = params || <any>{};\n\n    return function (target: Function, propertyKey: string, descriptor: any) {\n        MetaUtils.addMetaData(target,\n            {\n                decorator: Decorators.PROCESS_END,\n                decoratorType: DecoratorType.METHOD,\n                params: params,\n                propertyKey: propertyKey\n            });\n\n        var origianlmethod = descriptor.value;\n        descriptor.value = preProcessHandler(params, target, propertyKey, descriptor, origianlmethod, Decorators.PROCESS_END);\n        //descriptor.value = preProcessHandler(params, target, propertyKey, descriptor, rsProcessDecorators.PROCESS_END);\n    }\n}\nexport function processStartEnd(params: IProcessControlParams): any {\n    params = params || <any>{};\n\n    return function (target: Function, propertyKey: string, descriptor: any) {\n        MetaUtils.addMetaData(target,\n            {\n                decorator: Decorators.PROCESS_START_AND_END,\n                decoratorType: DecoratorType.METHOD,\n                params: params,\n                propertyKey: propertyKey\n            });\n\n        var origianlmethod = descriptor.value;\n        descriptor.value = preProcessHandler(params, target, propertyKey, descriptor, origianlmethod, Decorators.PROCESS_START_AND_END);\n    }\n\n}\n\n\n"],"sourceRoot":"/source/"}