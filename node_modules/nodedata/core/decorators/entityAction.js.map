{"version":3,"sources":["core/decorators/entityAction.ts"],"names":[],"mappings":";AAAA,wBAA0B,mBAAmB,CAAC,CAAA;AAC9C,6BAA2B,yBAAyB,CAAC,CAAA;AACrD,4BAA6B,cAAc,CAAC,CAAA;AAC5C,iCAA8B,yBAAyB,CAAC,CAAA;AAExD,mCAAiC,sCAAsC,CAAC,CAAA;AAExE,mCAA+B,8BAA8B,CAAC,CAAA;AAC9D,sCAAgC,iCAAiC,CAAC,CAAA;AAElE,mCAAgC,8BAA8B,CAAC,CAAA;AAC/D,MAAY,KAAK,WAAM,UAAU,CAAC,CAAA;AAElC,oCAA4B,4BAA4B,CAAC,CAAA;AAEzD,MAAY,UAAU,WAAM,MAAM,CAAC,CAAA;AACnC,MAAO,CAAC,WAAW,GAAG,CAAC,CAAC;AACxB,2BAAsB,UAAU,CAAC,CAAA;AAGjC,wCAAuC,qCAAqC,CAAC,CAAA,CAAC,iEAAiE;AAuB/I,sBAA6B,MAA2B;IACpD,MAAM,GAAG,MAAM,IAAS,EAAE,CAAC;IAE3B,MAAM,CAAC,UAAU,MAAgB,EAAE,WAAmB,EAAE,UAAe;QACnE,iBAAS,CAAC,WAAW,CAAC,MAAM,EACxB;YACI,SAAS,EAAE,uBAAU,CAAC,YAAY;YAClC,aAAa,EAAE,8BAAa,CAAC,MAAM;YACnC,MAAM,EAAE,MAAM;YACd,WAAW,EAAE,WAAW;SAC3B,CAAC,CAAC;QAEP,IAAI,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC;QAEtC,UAAU,CAAC,KAAK,GAAG;YACf,IAAI,SAAS,GAAG,iBAAS,CAAC,WAAW,CAAC,MAAM,EAAE,uBAAU,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;YACtF,EAAE,CAAC,CAAC,SAAS,CAAC;gBAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,SAAS,CAAC,CAAC;YAC9D,IAAI,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAEjD,cAAc;YACd,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB;gBAC5E,oDAAoD;gBACpD,sFAAsF;gBACtF,GAAG;gBAEH,IAAI,kBAAkB,GAAG;oBACrB,IAAI,IAAI,GAAS,mCAAgB,CAAC,IAAI,CAAC;oBACvC,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,gDAAwB,IAAI,gDAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBAEnG,IAAI,KAAK,GAAG,IAAI,CAAC;wBACjB,IAAI,CAAC,cAAc,EAAE,CAAC,OAAO,CAAC,CAAC,OAAe;4BAC1C,IAAI,OAAO,GAAG,gDAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC;4BAC3D,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,GAAG,KAAK,KAAK,CAAC,CAAC,CAAC;gCACnC,KAAK,GAAG,KAAK,CAAC;4BAClB,CAAC;wBACL,CAAC,CAAC,CAAA;wBACF,MAAM,CAAC,KAAK,CAAC;oBACjB,CAAC;oBACD,MAAM,CAAC,IAAI,CAAA;gBACf,CAAC,CAAA;gBAED,IAAI,WAAW,GAAG,CAAC,+BAAW,CAAC,OAAO,EAAE,+BAAW,CAAC,WAAW,EAAE,+BAAW,CAAC,SAAS,EAAE,+BAAW,CAAC,QAAQ;oBACxG,+BAAW,CAAC,OAAO,EAAE,+BAAW,CAAC,SAAS,CAAC,CAAC;gBAC5C,kGAAkG;gBAClG,2JAA2J;gBAC3J,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,UAAU,IAAI,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC;gBACtE,EAAE,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAC9D,sDAAsD;oBAEtD,IAAI,sBAAsB,GAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAC9C,EAAE,CAAC,CAAC,kBAAkB,EAAE,CAAC,CAAA,CAAC;wBACtB,sBAAsB,GAAG,uCAAiB,CAAC,UAAU,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC;oBAC1F,CAAC;oBACD,MAAM,CAAC,sBAAsB,CAAC,IAAI,CAAC,MAAM;wBACrC,0DAA0D;wBAC9D,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;4BACV,sBAAsB,GAAG,IAAI,CAAC;wBAClC,CAAC;wBACD,EAAE,CAAC,CAAC,MAAM,YAAY,KAAK,CAAC,CAAC,CAAC;4BAC1B,IAAI,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;4BAC5C,yCAAyC;4BACzC,sBAAsB,GAAG,UAAU,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,KAAK,CAAC,CAAC,CAAoB,KAAK,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAmB,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;wBACxK,CAAC;wBAED,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;4BACd,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,sBAAsB,CAAC;wBAC/C,CAAC;wBACD,IAAI,CAAC,CAAC;4BACF,IAAI,CAAC,CAAC,CAAC,GAAG,sBAAsB,CAAC;wBACrC,CAAC;wBACD,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;oBAC9C,CAAC,CAAC,CAAC;gBACP,CAAC;gBACD,IAAI,CAAC,CAAC;oBACE,qDAAqD;oBAErD,sBAAsB;oBACtB,mDAAmD;oBACnD,4CAA4C;oBAG5C,IAAI,iBAAiB,GAAG;wBACpB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;4BACd,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,sBAAsB,CAAC;wBAC/C,CAAC;wBACD,IAAI,CAAC,CAAC;4BACF,IAAI,CAAC,CAAC,CAAC,GAAG,sBAAsB,CAAC;wBACrC,CAAC;wBACD,GAAG;wBACH,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;oBAC9C,CAAC,CAAA;oBACD,EAAE,CAAC,CAAC,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;wBACxB,MAAM,CAAC,iBAAiB,EAAE,CAAC;oBAC/B,CAAC;oBAEL,MAAM,CAAC,iCAAc,CAAC,kBAAkB,CAAC,CAAC,sBAAsB,CAAC,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC,IAAI,CAAC,SAAS;wBAClG,yDAAyD;wBACzD,oCAAoC;wBACpC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACZ,MAAM,CAAC,iBAAiB,EAAE,CAAC;wBAC/B,CAAC;wBACD,IAAI,CAAC,CAAC;4BACF,IAAI,KAAK,GAAG,iCAAiC,CAAC;4BAC9C,IAAI,GAAG,GAAG,mCAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;4BACtC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gCACN,GAAG,CAAC,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;gCAC5C,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;4BAClD,CAAC;4BACD,MAAM,IAAI,CAAC;wBACf,CAAC;oBACL,CAAC,CAAC,CAAC;gBACP,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAA;QACD,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC,CAAA;AACL,CAAC;AApHe,oBAAY,eAoH3B,CAAA;AAED,mBAAmB,IAAS,EAAE,MAAW;IACrC,IAAI,IAAoB,CAAC;IACzB,IAAI,QAAQ,GAAG,EAAE,CAAC;IAClB,IAAI,IAAI,GAAuB,IAAI,CAAC;IACpC,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAClC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAEhC,KAAK,+BAAW,CAAC,OAAO,CAAC,WAAW,EAAE;YAClC,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG;gBAC9C,IAAI,YAAY,GAAG,kCAAe,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;gBAC5E,MAAM,CAAC,eAAe,CAAC,GAAG,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;YACzD,CAAC,CAAC,CAAC;YACH,KAAK,CAAC;QACV,KAAK,+BAAW,CAAC,OAAO,CAAC,WAAW,EAAE;YAClC,IAAI,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC,UAAsB;gBAClD,IAAI,cAAc,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,kCAAe,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;gBACjG,MAAM,CAAC,aAAa,CAAC,UAAU,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;YAChE,CAAC,CAAC,CAAC;YACH,KAAK,CAAC;QACV,KAAK,+BAAW,CAAC,SAAS,CAAC,WAAW,EAAE;YACpC,IAAI,GAAG,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,UAAsB;gBACxE,IAAI,cAAc,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,kCAAe,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;gBACjG,MAAM,CAAC,aAAa,CAAC,UAAU,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;YAChE,CAAC,CAAC,CAAC;YACH,KAAK,CAAC;QACV,KAAK,+BAAW,CAAC,QAAQ,CAAC,iBAAiB,EAAE;YACzC,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,UAAsB;gBAC1D,IAAI,cAAc,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,kCAAe,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;gBACjG,MAAM,CAAC,aAAa,CAAC,UAAU,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;YAChE,CAAC,CAAC,CAAC;YACH,KAAK,CAAC;QACV,mEAAmE;QAEnE,KAAK,+BAAW,CAAC,IAAI,CAAC,WAAW,EAAE;YAC/B,aAAa;YACb,IAAI,aAAa,GAAG,kCAAe,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACjF,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,kCAAe,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC;YACvH,KAAK,CAAC;QACV,KAAK,+BAAW,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;QACnC,KAAK,+BAAW,CAAC,KAAK,CAAC,WAAW,EAAE;YAChC,sBAAsB;YACtB,IAAI,gBAAgB,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAC/B,IAAI,cAAc,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,cAAc,CAAC,GAAG,GAAG,gBAAgB,CAAC;YACtC,IAAI,YAAY,GAAG,kCAAe,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAChF,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG;gBACrC,MAAM,CAAC,eAAe,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC;YACH,KAAK,CAAC;QACV,KAAK,+BAAW,CAAC,MAAM,CAAC,WAAW,EAAE;YACjC,uBAAuB;YACvB,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG;gBAC9C,MAAM,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACpD,CAAC,CAAC,CAAC;YACH,KAAK,CAAC;QAEV,KAAK,+BAAW,CAAC,QAAQ,CAAC,WAAW,EAAE;YACnC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;gBACb,IAAI,aAAa,GAAG,kCAAe,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;gBAC3E,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,kCAAe,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC;YACrH,CAAC,CAAC,CAAC;YACH,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,KAAK,CAAC;QACV,KAAK,+BAAW,CAAC,OAAO,CAAC,WAAW,EAAE;YAClC,IAAI,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;YAC9E,IAAI,cAAc,GAAG,EAAE,CAAC;YACxB,4EAA4E;YAC5E,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;gBACb,cAAc,CAAC,IAAI,CAAC,kCAAe,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YAChF,CAAC,CAAC,CAAC;YACH,2DAA2D;YAC3D,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU;gBAC/C,+DAA+D;gBAC/D,IAAI,MAAM,GAAG,aAAa,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;gBAChE,6DAA6D;gBAC7D,MAAM,CAAC,MAAM,CAAC;YAClB,CAAC,CAAC,CAAC;YACH,KAAK,CAAC;QACV,KAAK,+BAAW,CAAC,OAAO,CAAC,WAAW,EAAE;YAClC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACrB,IAAI,GAAG,GAAG,EAAE,CAAC;gBACb,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;oBAC9B,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAClB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACvB,CAAC;oBACD,IAAI,CAAC,CAAC;wBACF,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAChB,CAAC;gBACL,CAAC,CAAC,CAAC;gBACH,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU;oBACzC,MAAM,CAAC,aAAa,CAAC,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;gBAC5D,CAAC,CAAC,CAAC;YACP,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,IAAI,cAAc,GAAG,kCAAe,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClF,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC;YACvE,CAAC;YACD,KAAK,CAAC;QACV;YACI,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;YACnD,KAAK,CAAC;IACd,CAAC;IACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG;QAChB,6CAA6C;QAC7C,EAAE,CAAC,CAAC,GAAG,YAAY,KAAK,CAAC,CAAC,CAAC;YACvB,GAAG,CAAC,OAAO,CAAC,CAAC;gBACT,GAAG,CAAC,wBAAY,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;YACzC,CAAC,CAAC,CAAC;QACP,CAAC;QACD,IAAI,CAAC,CAAC;YACF,GAAG,CAAC,wBAAY,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;QACzC,CAAC;QACD,MAAM,CAAC,GAAG,CAAC;IACf,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG;QACR,mBAAmB;QACnB,MAAM,GAAG,CAAC;IACd,CAAC,CAAC,CAAC;AACP,CAAC;AAED,uBAAuB,UAAU,EAAE,QAAS,EAAE,cAA2B;IACrE,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,UAAU,CAAC,CAAC,CAAC;QAC1B,UAAU,CAAC,OAAO,CAAC,CAAC;YAChB,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;IACD,IAAI,cAAc,GAAG,EAAE,CAAC;IACxB,IAAI,kBAAkB,GAAG,EAAE,CAAC;IAC5B,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;QACb,UAAU,CAAC,OAAO,CAAC,GAAG,IAAI,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;IAC7D,CAAC;IAED,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;QACjB,cAAc,CAAC,OAAO,CAAC,GAAG,IAAI,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;IACrE,CAAC;IAED,QAAQ,CAAC,OAAO,CAAC,MAAM;QAEnB,IAAI,QAAQ,EAAE,WAAW,CAAC;QAC1B,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YACb,QAAQ,GAAG,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAC7C,CAAC;QACD,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACjB,WAAW,GAAG,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QACpD,CAAC;QAED,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;IAE7D,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,GAAG,CAAC;AACf,CAAC;AAED,yBAAyB,QAAc,EAAE,MAAY,EAAE,YAAkB;IACrE,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;QAChB,YAAY,GAAQ,EAAE,CAAC;IAC3B,CAAC;IAED,IAAI,gBAAgB,GAAG,EAAE,CAAC;IAC1B,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACX,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,QAAQ,CAAC,CAAC,CAAC;YACxB,gBAAgB,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC5C,CAAC;IAEL,CAAC;IACD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACT,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,MAAM,CAAC,CAAC,CAAC;YACtB,gBAAgB,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;QAC1C,CAAC;IACL,CAAC;IAED,EAAE,CAAC,CAAC,gBAAgB,IAAI,CAAC,gBAAgB,YAAY,MAAM,IAAI,CAAC,CAAC,gBAAgB,YAAY,gBAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAE5G,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,gBAAgB,CAAC,CAAC,CAAC;YAChC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBACxC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;gBACjD,QAAQ,CAAC;YACb,CAAC;YAED,EAAE,CAAC,CAAC,OAAO,gBAAgB,CAAC,IAAI,CAAC,IAAI,QAAQ,IAAI,OAAO,YAAY,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC;gBACrF,YAAY,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;YAC1F,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,EAAE,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;oBACvC,OAAO,YAAY,CAAC,IAAI,CAAC,CAAC;gBAC9B,CAAC;gBACD,IAAI,CAAC,CAAC;oBACF,YAAY,CAAC,IAAI,CAAC,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBAChD,CAAC;YACL,CAAC;QACL,CAAC;IACL,CAAC;IAED,YAAY,CAAC,wBAAY,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;IAC9C,MAAM,CAAC,EAAE,WAAW,EAAE,MAAM,EAAE,mBAAmB,EAAE,QAAQ,EAAE,mBAAmB,EAAE,YAAY,EAAE,CAAC;AACrG,CAAC","file":"core/decorators/entityAction.js","sourcesContent":["import { MetaUtils } from \"../metadata/utils\";\nimport { Decorators } from '../constants/decorators';\nimport { ConstantKeys } from '../constants';\nimport { DecoratorType } from '../enums/decorator-type';\nimport { IPreauthorizeParams } from './interfaces/preauthorize-params';\nimport { PrincipalContext } from '../../security/auth/principalContext';\nimport { User } from '../../security/auth/user';\nimport { PreAuthService } from '../services/pre-auth-service';\nimport {PostFilterService} from '../services/post-filter-service';\nimport { pathRepoMap, getEntity, getModel } from '../dynamic/model-entity';\nimport { InstanceService } from '../services/instance-service';\nimport * as Utils from '../utils';\nimport * as configUtil from '../../security-config';\nimport { RepoActions } from '../enums/repo-actions-enum';\nimport {IDynamicRepository, DynamicRepository} from '../dynamic/dynamic-repository';\nimport * as Enumerable from 'linq';\nimport Q = require('q');\nimport { Types } from \"mongoose\";\nimport * as utils from '../../mongoose/utils';\nimport * as configUtils from '../utils';\nimport {allAutherizationRulesMap} from '../initialize/initialize-messengers'; // name.role :{ role: string, accessmask: number, acl?: boolean }\n\n/**\n * Provides you three states (new, old, merged) for an entity as parameters on which\n * one can build logic from original data in db and from new incoming JSON data\n */\nexport interface EntityActionParam {\n    /**\n * This is a readOnly data ( don not change on it), used for comapring original input data JSON from client side.\n */\n    inputEntity?: any;  // entity comes from client side (front end incoming JSON)\n\n    /**\n * This is a readOnly data (don not change on it), used for comparing the original stored data on DB.\n */\n    oldPersistentEntity?: any; // original entity stored on db\n    /**\n      * Any changes or modification can be done on newPersistentEntity which is final entity going to persist on the system.\n    */\n    newPersistentEntity?: any; // merged entity of inputEntity and oldPersistentEntity\n}\n\n\nexport function entityAction(params: IPreauthorizeParams): any {\n    params = params || <any>{};\n\n    return function (target: Function, propertyKey: string, descriptor: any) {\n        MetaUtils.addMetaData(target,\n            {\n                decorator: Decorators.PREAUTHORIZE,\n                decoratorType: DecoratorType.METHOD,\n                params: params,\n                propertyKey: propertyKey\n            });\n\n        var originalMethod = descriptor.value;\n\n        descriptor.value = function () {\n            var anonymous = MetaUtils.getMetaData(target, Decorators.ALLOWANONYMOUS, propertyKey);\n            if (anonymous) return originalMethod.call(this, ...arguments);         \n            let args = Array.prototype.slice.call(arguments);\n\n            // merge logic\n            return mergeTask.apply(this, [args, originalMethod]).then(fullyQualifiedEntities => {\n                //if (originalMethod.name === RepoActions.findOne) {\n                //    var ret = service.target[preAuthParam.methodName].apply(service.target, params);\n                //}\n\n                let checkIfAClrequired = () => {\n                    let user: User = PrincipalContext.User;\n                    if (user && user.getAuthorities() && allAutherizationRulesMap && allAutherizationRulesMap[this.path]) {\n\n                        let isACL = true;\n                        user.getAuthorities().forEach((curRole: string) => {\n                            let aclRule = allAutherizationRulesMap[this.path][curRole];\n                            if (aclRule && aclRule.acl === false) {\n                                isACL = false;\n                            }\n                        })\n                        return isACL;\n                    }\n                    return true\n                }\n\n                let findActions = [RepoActions.findAll, RepoActions.findByField, RepoActions.findChild, RepoActions.findMany,\n                    RepoActions.findOne, RepoActions.findWhere];\n                    // Converting Repo method names into uppercase as check with original method name is in uppercase.\n                    // This is require othewise it will go in else condition and some of the entities will visible user without access e.g. questionnaire not assigned ot user.\n                    findActions = findActions.map(methodName => methodName.toUpperCase());\n                    if (findActions.indexOf(originalMethod.name.toUpperCase()) >= 0) {\n                        //console.log(\"CanRead entity Security \" + this.path);\n\n                        let promiseOfAuthServerice:any = Q.when(true);\n                        if (checkIfAClrequired()){\n                            promiseOfAuthServerice = PostFilterService.postFilter(fullyQualifiedEntities, params);\n                        }\n                        return promiseOfAuthServerice.then(result => {\n                            //console.log(\"CanRead entity Security End \" + this.path);\n                        if (!result) {\n                            fullyQualifiedEntities = null;\n                        }\n                        if (result instanceof Array) {\n                            let ids = result.map(x => x._id.toString());\n                            // select only entities which have access\n                            fullyQualifiedEntities = Enumerable.from(fullyQualifiedEntities).where((x: EntityActionParam) => ids.indexOf(x.newPersistentEntity._id.toString()) != -1).toArray();\n                        }\n\n                        if (args.length) {\n                            args[args.length] = fullyQualifiedEntities;\n                        }\n                        else {\n                            args[0] = fullyQualifiedEntities;\n                        }\n                        return originalMethod.call(this, ...args);\n                    });\n                }\n                else {\n                        //console.log(\"CanSave entity Security\" + this.path);\n                        \n                        //read security config\n                        //check for this.path if acl is false then execute \n                        //return originalMethod.call(this, ...args);\n\n\n                        let executeNextMethod = () => {\n                            if (args.length) {\n                                args[args.length] = fullyQualifiedEntities;\n                            }\n                            else {\n                                args[0] = fullyQualifiedEntities;\n                            }\n                            //}\n                            return originalMethod.call(this, ...args);\n                        }\n                        if (!checkIfAClrequired()) {\n                            return executeNextMethod();\n                        }\n\n                    return PreAuthService.isPreAuthenticated([fullyQualifiedEntities], params, propertyKey).then(isAllowed => {\n                        //console.log(\"CanSave entity Security End\" + this.path);\n                        //req.body = fullyQualifiedEntities;\n                        if (isAllowed) {\n                            return executeNextMethod();\n                        }\n                        else {\n                            var error = 'unauthorize access for resource';\n                            var res = PrincipalContext.get('res');\n                            if (res) {\n                                res.set(\"Content-Type\", \"application/json\");\n                                res.send(403, JSON.stringify(error, null, 4));\n                            }\n                            throw null;\n                        }\n                    });\n                }\n            });\n        }\n        return descriptor;\n    }\n}\n\nfunction mergeTask(args: any, method: any): Q.Promise<any> {\n    let prom: Q.Promise<any>;\n    var response = [];\n    let repo: IDynamicRepository = this;\n    let rootRepo = repo.getRootRepo();\n    switch (method.name.toUpperCase()) {\n\n        case RepoActions.findOne.toUpperCase():\n            prom = rootRepo.findOne(args[0], args[1]).then(res => {\n                let mergedEntity = InstanceService.getInstance(this.getEntity(), null, res);\n                return mergeProperties(res, undefined, mergedEntity);\n            });\n            break;\n        case RepoActions.findAll.toUpperCase():\n            prom = rootRepo.findAll().then((dbEntities: Array<any>) => {\n                let mergedEntities = dbEntities.map(x => InstanceService.getInstance(this.getEntity(), null, x));\n                return mergeEntities(dbEntities, undefined, mergedEntities);\n            });\n            break;\n        case RepoActions.findWhere.toUpperCase():\n            prom = rootRepo.findWhere.apply(rootRepo, args).then((dbEntities: Array<any>) => {\n                let mergedEntities = dbEntities.map(x => InstanceService.getInstance(this.getEntity(), null, x));\n                return mergeEntities(dbEntities, undefined, mergedEntities);\n            });\n            break;\n        case RepoActions.findMany.toLocaleUpperCase():\n            prom = rootRepo.findMany(args[0]).then((dbEntities: Array<any>) => {\n                let mergedEntities = dbEntities.map(x => InstanceService.getInstance(this.getEntity(), null, x));\n                return mergeEntities(dbEntities, undefined, mergedEntities);\n            });\n            break;\n        // TODO: Need to write code for all remaining get entity(s) actions\n\n        case RepoActions.post.toUpperCase():\n            // do nothing\n            let mergedEntity1 = InstanceService.getInstance(this.getEntity(), null, args[0]);\n            prom = Q.when(mergeProperties(undefined, InstanceService.getInstance(this.getEntity(), null, args[0]), mergedEntity1));\n            break;\n        case RepoActions.put.toUpperCase():\n        case RepoActions.patch.toUpperCase():\n            // fetch single object\n            let entityIdToUpdate = args[0];\n            let entityToUpdate = args[1];\n            entityToUpdate._id = entityIdToUpdate;\n            let mergedEntity = InstanceService.getInstance(this.getEntity(), null, args[1]);\n            prom = rootRepo.findOne(args[0]).then(res => {\n                return mergeProperties(res, args[1], mergedEntity);\n            });\n            break;\n        case RepoActions.delete.toUpperCase():\n            // fetch single object \n            prom = rootRepo.findMany([args[0]], true).then(res => {\n                return mergeProperties(res[0], args[0], res[0]);\n            });\n            break;\n\n        case RepoActions.bulkPost.toUpperCase():\n            args[0].forEach(x => {\n                var mergedEntity1 = InstanceService.getInstance(this.getEntity(), null, x);\n                response.push(mergeProperties(undefined, InstanceService.getInstance(this.getEntity(), null, x), mergedEntity1));\n            });\n            prom = Q.when(response);\n            break;\n        case RepoActions.bulkPut.toUpperCase():\n            var ids = Enumerable.from(args[0]).select(x => x['_id'].toString()).toArray();\n            let mergeEntities1 = [];\n            //console.log(\"entity action findmany instance service start \" + this.path);\n            args[0].forEach(x => {\n                mergeEntities1.push(InstanceService.getInstance(this.getEntity(), null, x));\n            });\n            //console.log(\"entity action findmany start \" + this.path);\n            prom = rootRepo.findMany(ids, true).then(dbEntities => {\n                //console.log(\"entity action merge entity start \" + this.path);\n                let retval = mergeEntities(dbEntities, args[0], mergeEntities1);\n                //console.log(\"entity action merge entity end \" + this.path);\n                return retval;\n            });\n            break;\n        case RepoActions.bulkDel.toUpperCase():\n            if (args[0].length > 0) {\n                var ids = [];\n                Enumerable.from(args[0]).forEach(x => {\n                    if (Utils.isJSON(x)) {\n                        ids.push(x['_id']);\n                    }\n                    else {\n                        ids.push(x);\n                    }\n                });\n                prom = rootRepo.findMany(ids).then(dbEntities => {\n                    return mergeEntities(undefined, dbEntities, dbEntities);\n                });\n            }\n            else {\n                let mergeEntities1 = InstanceService.getInstance(this.getEntity(), null, args[0]);\n                prom = Q.when(mergeProperties(args[0], undefined, mergeEntities1));\n            }\n            break;\n        default:\n            prom = Q.when(mergeProperties(args[0], undefined));\n            break;\n    }\n    return prom.then(res => {\n        // set fully loaded attribute to root element\n        if (res instanceof Array) {\n            res.forEach(x => {\n                res[ConstantKeys.FullyLoaded] = true;\n            });\n        }\n        else {\n            res[ConstantKeys.FullyLoaded] = true;\n        }\n        return res;\n    }).catch(exc => {\n        //console.log(exc);\n        throw exc;\n    });\n}\n\nfunction mergeEntities(dbEntities, entities?, mergeEntities1?: Array<any>) {\n    var res = [];\n    if (!entities && dbEntities) {\n        dbEntities.forEach(x => {\n            res.push(mergeProperties(x, undefined, x));\n        });\n        return res;\n    }\n    let dbEntityKeyVal = {};\n    let megredEntityKeyVal = {};\n    if (dbEntities) {\n        dbEntities.forEach(dbE => dbEntityKeyVal[dbE._id] = dbE);\n    }\n\n    if (mergeEntities1) {\n        mergeEntities1.forEach(mgE => megredEntityKeyVal[mgE._id] = mgE);\n    }\n\n    entities.forEach(entity => {\n\n        var dbEntity, mergeEntity;\n        if (dbEntities) {\n            dbEntity = dbEntityKeyVal[entity['_id']];\n        }\n        if (mergeEntities1) {\n            mergeEntity = megredEntityKeyVal[entity['_id']];\n        }\n\n        res.push(mergeProperties(dbEntity, entity, mergeEntity));\n\n    });\n    return res;\n}\n\nfunction mergeProperties(dbEntity?: any, entity?: any, mergedEntity?: any): EntityActionParam {\n    if (!mergedEntity) {\n        mergedEntity = <any>{};\n    }\n\n    let tempMergedEntity = {};\n    if (dbEntity) {\n        for (var prop in dbEntity) {\n            tempMergedEntity[prop] = dbEntity[prop];\n        }\n\n    }\n    if (entity) {\n        for (var prop in entity) {\n            tempMergedEntity[prop] = entity[prop];\n        }\n    }\n\n    if (tempMergedEntity && (tempMergedEntity instanceof Object && !(tempMergedEntity instanceof Types.ObjectId))) {\n\n        for (var prop in tempMergedEntity) {\n            if (Array.isArray(tempMergedEntity[prop])) {\n                mergedEntity[prop] = [...tempMergedEntity[prop]];\n                continue;\n            }\n\n            if (typeof tempMergedEntity[prop] == \"Object\" && typeof mergedEntity[prop] == \"Object\") {\n                mergedEntity[prop] = this.mergeProperties(mergedEntity[prop], tempMergedEntity[prop]);\n            }\n            else {\n                if (tempMergedEntity[prop] === undefined) {\n                    delete mergedEntity[prop];\n                }\n                else {\n                    mergedEntity[prop] = tempMergedEntity[prop];\n                }\n            }\n        }\n    }\n\n    mergedEntity[ConstantKeys.FullyLoaded] = true;\n    return { inputEntity: entity, oldPersistentEntity: dbEntity, newPersistentEntity: mergedEntity };\n}\n\n"],"sourceRoot":"/source/"}