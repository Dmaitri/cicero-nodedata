{"version":3,"sources":["core/decorators/workerAssociation.ts"],"names":[],"mappings":"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","file":"core/decorators/workerAssociation.js","sourcesContent":["import {WorkerAssociation} from './interfaces/workerassociation-params';\nimport {MetaUtils } from \"../metadata/utils\";\nimport {Decorators} from '../constants/decorators';\nimport {DecoratorType} from '../enums/decorator-type';\nvar child_process = require('child_process');\nimport * as Enumerable from 'linq';\nimport {winstonLog} from '../../logging/winstonLog';\nimport {WorkerParams} from './interfaces/worker-params';\nimport {workerParamsDto} from \"./interfaces/workerParamsDto\";\nimport * as configUtil from '../utils';\nimport {PrincipalContext} from '../../security/auth/principalContext';\nvar fs = require('fs');\nvar defaultWorkerName = \"core/decorators/worker.js\";\nvar cls = require('continuation-local-storage');\nvar uuid = require('uuid');\n\nvar workerProcess: Array<WorkerProcess> = new Array<WorkerProcess>();\nvar tasks: Array<workerParamsDto> = new Array<workerParamsDto>();\n\n//update from configuration\nvar _appRoot = process.cwd();\nvar _defaultWorker = 'worker.js';\nvar _defaultNumnberOfWorker = 1;\n\nclass WorkerProcess {\n    name: string;\n    processId: number;\n    executing: workerParamsDto;\n    initialized: boolean;\n    fork: any;\n}\n\nexport function Worker(params?: WorkerAssociation): any {\n    params = params || <any>{};\n    var session = PrincipalContext.getSession();\n\n    return function (target: any, propertyKey: string, descriptor: any) {\n        console.log(\"target is: \" + target + \" propertyKey \" + propertyKey + \" descriptor is:  \" + descriptor);\n        MetaUtils.addMetaData(target,\n            {\n                decorator: Decorators.WORKER,\n                decoratorType: DecoratorType.METHOD,\n                params: params,\n                propertyKey: propertyKey\n            });\n        var originalMethod = descriptor.value;\n        winstonLog.logDebug(\"Input params for worker:  \" + params.workerParams);\n\n        descriptor.value = executeWorkerHandler(params, target, propertyKey, originalMethod,\n            Decorators.WORKER);\n    }\n}\n\n// Add debug options\nfunction getDebugOption(offset: number) {\n    var execArgv = (<any>process).execArgv.slice(); //create args shallow copy\n    var debugPort = (<any>process).debugPort + offset + 1;\n    console.log(\"Debugging port:\", debugPort);\n    for (var i = 0; i < execArgv.length; i++) {\n        var match = execArgv[i].match(/^(--debug|--debug-brk)(=\\d+)?$/);\n        if (match) {\n            execArgv[i] = match[1] + '=' + debugPort;\n            break;\n        }\n    }\n\n    //var options = { env: process.env,  silent:false, execArgv: execArgv, cwd: targetProcessCwd };\n    var options = { env: process.env, silent: false, execArgv: execArgv };\n    return options;\n}\n\nfunction sendNextMessage(process: WorkerProcess, received: workerParamsDto) {\n    if (received) {\n        console.log('success message from Child Process: ' + received);\n    }\n    process.initialized = true;\n    process.executing = null;\n    if (tasks.length > 0) {\n        var par = tasks.shift();\n        par.processId = process.processId;\n        process.executing = par;\n        process.fork.send(par);\n    }\n}\n\nfunction executeNextProcess(param: workerParamsDto) {\n    var proc: WorkerProcess;\n    var workerName = configUtil.config().Config.worker ? (_appRoot + '/' + configUtil.config().Config.worker) : (_appRoot + '/' + _defaultWorker);\n    var thread: number = configUtil.config().Config.process ? configUtil.config().Config.process : _defaultNumnberOfWorker;\n    if (thread > 0) {\n        tasks.push(param);\n        if (workerProcess.length < thread) {\n            // create new process entry and spawn it\n            proc = new WorkerProcess();\n            proc.name = 'worker' + workerProcess.length + 1;\n            var path = workerName;\n            if (configUtil.config().Config.worker) {\n                path = _appRoot + '/' + configUtil.config().Config.worker;\n            }\n            proc.fork = child_process.fork(path, [], getDebugOption(workerProcess.length));\n            winstonLog.logInfo(`Forking a new child_process: path- ${path}, p id-${proc.fork.pid}  `);\n            if (proc.fork.error == null) {\n                proc.processId = proc.fork.pid;\n                proc.executing = <workerParamsDto>({ initialize: true, processId: proc.processId });\n                winstonLog.logInfo('Child process created with id: ' + proc.fork.pid);\n\n                proc.fork.on('message', function (message: any) {\n                    // notify service attached with this process\n                    try {\n                        var par: workerParamsDto = <workerParamsDto>(message);\n                        console.log('received message parsed successful');\n                        var proc = Enumerable.from(workerProcess).firstOrDefault(x => x.processId == par.processId);\n                        if (proc) {\n                            sendNextMessage(proc, par);\n                        }\n                    }\n                    catch (exc) {\n                        console.log(\"failed message from Child Process: \");\n                        console.log(exc);\n                    }\n                });\n\n                proc.fork.on('error', function (err) {\n                    winstonLog.logError('Error : ' + err);\n                    // notify service attached with this process\n                });\n\n                proc.fork.on('close', function (code, signal) {\n                    winstonLog.logInfo('Child process exited with code: ' + code + ' signal: ' + signal);\n                    // notify service attached with this process\n                });\n                workerProcess.push(proc);\n                winstonLog.logInfo('sending worker:' + proc.executing);\n                proc.fork.send(proc.executing);\n            }\n            else {\n                winstonLog.logError(\"Error during creating child Process: \" + proc.fork.error);\n            }\n        }\n        else {\n            proc = Enumerable.from(workerProcess).firstOrDefault(x => !x.executing);\n            if (proc) {\n                sendNextMessage(proc, null);\n            }\n        }\n    }\n    else {\n        // always create new process and terminate on execution\n    }\n    return process;\n}\n\nexport function executeWorkerHandler(params, target, propertyKey, originalMethod, type: string,noExecution?:boolean) {\n    return function () {\n        if (MetaUtils.childProcessId || !configUtil.config().Config.isMultiThreaded) {\n            winstonLog.logInfo(\"Executing method from child Process with id: \" + process.pid);\n            return originalMethod.apply(this, arguments);\n        }\n\n        var targetObjectId: any;\n        if (params.indexofArgumentForTargetObjectId)\n            targetObjectId = arguments[params.indexofArgumentForTargetObjectId];\n\n        if (params.indexofArgumentForTargetObject)\n            targetObjectId = arguments[params.indexofArgumentForTargetObject]._id;\n\n        var serviceName, servicemethodName, paramsArguments;\n        var name = params.name;\n        var workerParams = new workerParamsDto();\n\n        if (params.workerParams == null) {\n            winstonLog.logInfo(\"No Params sent with Worker()\");\n            var decorators = MetaUtils.getMetaData(target);\n            var dec = Enumerable.from(decorators).where(x => x.decorator == Decorators.SERVICE).firstOrDefault();\n            if (dec) {\n                workerParams.serviceName = dec.params.serviceName;\n            }\n\n            servicemethodName = propertyKey;\n            workerParams.servicemethodName = servicemethodName;\n\n            paramsArguments = arguments;\n            workerParams.arguments = paramsArguments;\n        }\n        else {\n            if (params.workerParams.serviceName != null && params.workerParams.serviceName != '') {\n                serviceName = params.workerParams.serviceName;\n                workerParams.serviceName = serviceName;\n            } else {\n                var decorators = MetaUtils.getMetaData(target);\n                var dec = Enumerable.from(decorators).where(x => x.decorator == Decorators.SERVICE).firstOrDefault();\n                if (dec) {\n                    workerParams.serviceName = dec.params.serviceName;\n                }\n                workerParams.serviceName = serviceName;\n            }\n\n            if (params.workerParams.servicemethodName != null && params.workerParams.servicemethodName != '') {\n                servicemethodName = params.workerParams.servicemethodName;\n                workerParams.servicemethodName = servicemethodName;\n            }\n            else {\n                servicemethodName = propertyKey;\n                workerParams.servicemethodName = servicemethodName;\n            }\n\n            if (params.workerParams.arguments != null && params.workerParams.arguments != '') {\n                paramsArguments = params.workerParams.arguments;\n                workerParams.arguments = paramsArguments;\n            } else {\n                paramsArguments = arguments;\n                workerParams.arguments = paramsArguments;\n            }\n\n        }\n\n        workerParams.arguments = Array.prototype.slice.call(workerParams.arguments);\n        workerParams.arguments = <any>workerParams.arguments.slice(0, originalMethod.length);\n        //winstonLog.logInfo(\"Worker Params: \" + workerParams);\n\n        //PrincipalContext.save('workerParams', JSON.stringify(workerParams));\n        workerParams.principalContext = PrincipalContext.getAllKeyValues();\n        let reqHeaders = workerParams.principalContext['req'].headers;\n        if (workerParams.principalContext['req']) {\n            delete workerParams.principalContext['req'];\n            workerParams.principalContext['req'] = {};\n            workerParams.principalContext['req'].headers = reqHeaders;\n        }\n        if (workerParams.principalContext['res']) {\n            delete workerParams.principalContext['res'];\n        }\n\n        //console.log(`task will execute: Service Name ${workerParams.serviceName}, Method Name ${workerParams.servicemethodName}, Args ${workerParams.arguments}`);\n\n        if (workerParams.serviceName != null) {\n            workerParams.id = uuid.v4();\n            if (!noExecution) {\n                var proc = executeNextProcess(workerParams);\n            }\n            // console.log(\"Context at Worker: \" + workerParams.principalContext);\n            // console.log(\"PrincipalConext at Parent: \" + PrincipalContext.getSession());\n        }\n        return workerParams;\n    };\n}"],"sourceRoot":"/source/"}