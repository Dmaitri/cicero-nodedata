"use strict";
const initialize_1 = require('./initialize/initialize');
var recursiveReadDir = require('recursive-readdir-synchronous');
const path = require('path');
const Utils = require('./utils');
const utils_1 = require('./metadata/utils');
//import {PrincipalContext} from '../security/auth/principalContext';
//var ns = PrincipalContext.getSession();
var domain = require('../security/auth/domain');
//import linq = require('../typings/linq/linq');
const Enumerable = require('linq');
// Ignore .d.ts and all other non .ts files
function ignoreFile(file) {
    return !file.endsWith('.js') || file.endsWith('.spec.js');
}
// ignore node_modules or folders starting with '.', eg. '.git'
function ignoreDirectory(file, stats) {
    return path.basename(file) == "node_modules" || path.basename(file).startsWith('.') || path.basename(file) == "unit-test";
}
function readIgnore(file, stats) {
    return (stats.isFile() && ignoreFile(file))
        || (stats.isDirectory() && ignoreDirectory(file, stats));
}
let _appRoot = process.cwd();
class Dynamic {
    constructor(config, securityConfig, server) {
        Utils.config(config);
        Utils.securityConfig(securityConfig);
        config = config;
        securityConfig = securityConfig;
        let ignorePaths = config.Config && config.Config.ignorePaths || [];
        let internalIgnorePaths = config.Config && config.Config.internalIgnorePaths || [];
        ignorePaths = [...ignorePaths, ...internalIgnorePaths];
        var files = this.scanDirectories(ignorePaths);
        this.loadComponents(files);
        this.initialize(files, server);
    }
    scanDirectories(ignorePaths) {
        ignorePaths.push(readIgnore);
        return recursiveReadDir(_appRoot, ignorePaths);
        //return Q.nfapply(recursiveReadDir, [_appRoot, [readIgnore]]);
    }
    loadComponents(files) {
        Enumerable.from(files)
            .forEach(x => {
            try {
                if (x.indexOf("gulpfile") > -1) {
                    return;
                }
                var route = path.resolve(x.substring(0, x.lastIndexOf('.')));
                require(route);
            }
            catch (e) {
                console.log(e);
                throw e;
            }
        });
    }
    initialize(files, server) {
        new initialize_1.Initalize(files, server);
    }
}
module.exports = function (config, securityConfig, appRoot, entityServiceInst, sqlServerInst, server) {
    // application root (where we scan the components) set priority: 
    // 1. User provided 
    // 2. Environment Variable 
    // 3. Current working directory
    _appRoot = appRoot || process.env.APP_ROOT || process.cwd();
    //Utils.entityService(entityServiceInst);
    //Utils.sqlEntityService(sqlServerInst);
    new Dynamic(config, securityConfig, server);
    utils_1.MetaUtils.refreshDerivedObjectsMetadata();
};
let components = [];
function addComponent(comp) {
    components.push(comp);
}
exports.addComponent = addComponent;
function initialize(config, securityConfig, appRoot, entityServiceInst, sqlServerInst, server) {
    // application root (where we scan the components) set priority: 
    // 1. User provided 
    // 2. Environment Variable 
    // 3. Current working directory
    _appRoot = appRoot || process.env.APP_ROOT || process.cwd();
    //Utils.entityService(entityServiceInst);
    new Dynamic(config, securityConfig, server);
    //Utils.sqlEntityService(sqlServerInst);
    components.forEach(x => {
        x.default();
    });
}
exports.initialize = initialize;
module.exports.register = function (app) {
    app.use(domain.middleware('context'));
    //app.use(function (req, res, next) {
    //    ns.bindEmitter(req);
    //    ns.bindEmitter(res);
    //     ns.run(function () {
    //       next();
    //     });
    //});
};

//# sourceMappingURL=index.js.map
