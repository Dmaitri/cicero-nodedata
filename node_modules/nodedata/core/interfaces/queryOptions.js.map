{"version":3,"sources":["core/interfaces/queryOptions.ts"],"names":[],"mappings":";AAAA,MAAY,UAAU,WAAM,MAAM,CAAC,CAAA;AAqBxB,gCAAwB,GAAG,CAAC,KAAK;IACxC,IAAI,QAAQ,GAAG,KAAK,CAAC;IACrB,IAAI,OAAO,GAAG,EAAE,CAAC;IACjB,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAM;QACrC,EAAE,CAAC,CAAC,mBAAW,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAClC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;YACzB,OAAO,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAC3B,CAAC;QACD,IAAI,CACA,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAC1B,IAAI,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,wCAAwC;YACtE,IAAI,QAAQ,CAAC;YACb,EAAE,CAAC,CAAC,MAAM,IAAI,EAAE,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,IAAI,SAAS,IAAI,MAAM,IAAI,WAAW,CAAC,CAAC,CAAC;gBACzI,QAAQ,GAAG,EAAE,CAAC;YAClB,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,yCAAyC;YAC3E,CAAC;YACD,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC;QACxC,CAAC;QACD,IAAI,CAAC,CAAC;YACF,IAAI,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAC1B,IAAI,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC9B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACT,WAAW;gBACX,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;gBAChC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG;oBACd,MAAM,EAAE,IAAI,GAAG,GAAG,GAAG,IAAI;iBAC5B,CAAA;YACL,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;gBAC3B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACT,cAAc;oBACd,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;oBACjC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG;wBACd,MAAM,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI;qBAC3B,CAAA;gBACL,CAAC;YACL,CAAC;QACL,CAAC;IACT,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAC,CAAA;AAClD,CAAC,CAAA;AAEU,mBAAW,GAAkB,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,UAAU,EAAC,UAAU,EAAC,WAAW,EAAC,WAAW,CAAC,CAAC","file":"core/interfaces/queryOptions.js","sourcesContent":["import * as Enumerable from 'linq';\nexport interface QueryOptions {\n    rows?: number;\n    start?: number;\n    from?: Date;\n    until?: Date;\n    order?: \"asc\" | \"desc\";\n    fields?: any;\n    skip?: number;\n    limit?: number;\n    sort?: any;\n\tlt?: any;\n    gt?: any;\n    lt_value?: any;\n    gt_value?: any;\n    lte?: any;\n    gte?: any;\n    lte_value?: any;\n    gte_value?: any;\n}\n\nexport var getQueryOptionsFromQuery = (query): { queryObj: any, options: any }=>{\n    var queryObj = query;\n    var options = {};\n    Enumerable.from(queryObj).forEach((x: any) => {\n        if (filterProps.indexOf(x.key) >= 0) {\n            options[x.key] = x.value;\n            delete queryObj[x.key];\n        }\n        else\n            if (x.key == \"_id\" && x.key) {\n                let valStr = queryObj[x.key]; //Incoming Comma Separated String Values\n                let valArray;\n                if (valStr == \"\" || valStr == null || valStr == \"null\" || valStr == '\"\"' || valStr == \"''\" || valStr == undefined || valStr == \"undefined\") {\n                    valArray = [];\n                }\n                else {\n                    valArray = valStr.split(\",\"); //Convert Comma Separated Values to Array\n                }\n                queryObj[x.key] = { $in: valArray };\n            }\n            else {\n                var val = queryObj[x.key];\n                var i = val.indexOf('%LIKE%');\n                if (i == 0) {\n                    // contains\n                    val = val.replace('%LIKE%', '');\n                    queryObj[x.key] = {\n                        $regex: '.*' + val + '.*'\n                    }\n                }\n                else {\n                    i = val.indexOf('%START%');\n                    if (i == 0) {\n                        // starts with\n                        val = val.replace('%START%', '');\n                        queryObj[x.key] = {\n                            $regex: '^' + val + '.*'\n                        }\n                    }\n                }\n            }\n    });\n    return { queryObj: queryObj, options: options}\n}\n\nexport var filterProps: Array<string> = ['rows', 'start', 'from', 'until', 'order', 'fields', 'skip', 'limit', 'sort','lt','gt','lte','gte','lt_value','gt_value','lte_value','gte_value'];\n"],"sourceRoot":"/source/"}