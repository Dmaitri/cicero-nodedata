{"version":3,"sources":["core/utils/serial.ts"],"names":[],"mappings":";AACA,MAAO,CAAC,WAAW,GAAG,CAAC,CAAC;AACxB;IACI,OAAc,MAAM,CAAC,KAAiB,EAAE,UAAuB;QAC3D,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,IAAI,KAAK,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;QACrB,KAAK,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE,GAAG;YAE7B,yCAAyC;YACzC,2BAA2B;YAC3B,+BAA+B;YAE/B,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,CAC1B;gBACI,qBAAqB;gBACrB,2BAA2B;gBAC3B,4BAA4B;gBAC5B,GAAG;gBACH,qBAAqB;gBACrB,mBAAmB;gBAClB,GAAG;gBACJ,IAAI,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC;gBACnB,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACd,GAAG,CAAC,IAAI,CAAC,GAAG;wBACR,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;oBACvB,CAAC,CAAC,CAAC;gBACP,CAAC;gBACD,IAAI,CAAC,CAAC;oBACF,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;gBACvB,CAAC;gBACD,MAAM,CAAC,GAAG,CAAC;YACf,CAAC,EAAC,WAAW,CACb,UAAU,MAAM;gBACZ,OAAO,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;gBACtB,MAAM,CAAC,MAAM,CAAC;gBACd,6CAA6C;gBAC7C,+BAA+B;gBAC/B,+BAA+B;gBAC/B,qBAAqB;gBACrB,aAAa;YACjB,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACf,MAAM,CAAC,OAAO,CAAC;QACnB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,OAAc,OAAO,CAAC,KAAU,EAAE,EAAO,EAAE,IAAiB;QACxD,IAAI,IAAI,GAAG,UAAU,aAAyB;YAC1C,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACjC,CAAC,CAAA;QACD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;AACL,CAAC;AAnDY,kBAAU,aAmDtB,CAAA","file":"core/utils/serial.js","sourcesContent":["import * as Enumerable from 'linq';\nimport Q = require('q');\nexport class SerialTask {\n    public static serial(tasks: Array<any>, dataSheets?: Array<any>) {\n        var results = [];\n        var chain = Q.when();\n        tasks.forEach(function (task, key) {\n\n            //var successTask = task.success || task;\n            //var failTask = task.fail;\n            //var notifyTask = task.notify;\n\n            chain = chain.then(/*success*/\n                function () {\n                    //results.push(data);\n                    //if (data && dataSheets) {\n                    //    dataSheets.push(data);\n                    //}\n                    //if (!successTask) {\n                    //    return data; \n                     //}\n                    var ret = task([]);\n                    if (ret['then']) {\n                        ret.then(res => {\n                            results[key] = res;\n                        });\n                    }\n                    else {\n                        results[key] = ret;\n                    }\n                    return ret;\n                },/*failure*/\n                function (reason) {\n                    results[key] = reason;\n                    return reason;\n                    //if (!failTask) { return Q.reject(reason); }\n                    //// User defined fail callback\n                    //var ret = failTask([reason]);\n                    //results[key] = ret;\n                    //return ret;\n                });\n        });\n        return chain.then(r => {\n            return results;\n        });\n    }\n\n    public static getTask(scope: any, fn: any, args?: Array<any>) {\n        var func = function (closureFnArgs: Array<any>) {\n            return fn.apply(scope, args);\n        }\n        return func;\n    }\n}"],"sourceRoot":"/source/"}