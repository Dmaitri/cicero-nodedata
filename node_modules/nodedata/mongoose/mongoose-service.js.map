{"version":3,"sources":["mongoose/mongoose-service.ts"],"names":[],"mappings":"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","file":"mongoose/mongoose-service.js","sourcesContent":["import Q = require('q');\nimport {IEntityService} from '../core/interfaces/entity-service';\nimport {MetaUtils} from \"../core/metadata/utils\";\nimport * as MongooseModel from './mongoose-model';\nimport {pathRepoMap, getModel, getEntity} from '../core/dynamic/model-entity';\nimport {winstonLog} from '../logging/winstonLog';\nimport * as Utils from './utils';\nimport {QueryOptions} from '../core/interfaces/queryOptions';\nimport {BaseModel} from \"../models/baseModel\";\nimport * as utils from '../mongoose/utils';\nimport { PrincipalContext } from '../security/auth/principalContext';\nimport * as configUtil from '../core/utils';\nimport {IUser} from '../tests/models/user';\nimport {getDbSpecifcModel} from './db';\nimport {Decorators} from '../core/constants';\nvar hash = require('object-hash');\n\nexport class MongooseService implements IEntityService {\n\n    constructor() {\n    }\n    \n    updateWriteCount() {\n        if (PrincipalContext) {\n            var count = PrincipalContext.get('cacheCount');\n            if (!count) {\n                count = 0;\n            }\n            PrincipalContext.save('cacheCount', ++count);\n        }\n\n    }\n\n    bulkPost(repoPath: string, objArr: Array<any>, batchSize?: number): Q.Promise<any> {\n        return MongooseModel.bulkPost(this.getModel(repoPath), objArr, batchSize);\n    }\n\n    bulkDel(repoPath: string, objArr: Array<any>): Q.Promise<any> {\n        return MongooseModel.bulkDel(this.getModel(repoPath), objArr).then(result => {\n            objArr.forEach(x => this.deletEntityFromCache(repoPath, CacheConstants.idCache, x._id));\n            return result;\n        });\n    }\n\n    bulkPut(repoPath: string, objArr: Array<any>, batchSize?: number, donotLoadChilds?: boolean): Q.Promise<any> {\n        return MongooseModel.bulkPut(this.getModel(repoPath), objArr, batchSize, donotLoadChilds).then(results => {\n            results.forEach((x: BaseModel) => {\n                if (donotLoadChilds) {\n                    x.__partialLoaded = true;\n                }\n                this.setEntityIntoCache(repoPath, CacheConstants.idCache, x._id, x)\n            });\n            return results;\n        });\n    }\n\n    bulkPatch(repoPath: string, objArr: Array<any>): Q.Promise<any> {\n        return MongooseModel.bulkPatch(this.getModel(repoPath), objArr).then(results => {\n            results.forEach(x => this.setEntityIntoCache(repoPath, CacheConstants.idCache, x._id, x));\n            return results;\n        });\n    }\n\n    bulkPutMany(repoPath: string, objIds: Array<any>, obj: any): Q.Promise<any> {\n        return MongooseModel.bulkPutMany(this.getModel(repoPath), objIds, obj).then(results => {\n            //results && results.forEach((x: BaseModel) => {\n            //    // in bulkPutMany we do not load egarLoading properties (children objects) so its partially loaded\n            //    x.__partialLoaded = true;\n            //    this.setEntityIntoCache(repoPath, CacheConstants.idCache, x._id, x);\n            //});\n            return results;\n        });\n    }\n\n    findAll(repoPath: string): Q.Promise<any> {\n        return MongooseModel.findAll(this.getModel(repoPath));\n    }\n\n    findWhere(repoPath: string, query, selectedFields?: Array<string> | any, queryOptions?: QueryOptions, toLoadChilds?: boolean): Q.Promise<any> {\n        let hashEntity = hash(JSON.stringify(query));\n        let cacheValueIds: Array<any> = this.getEntityFromCache(repoPath, CacheConstants.hashCache, hashEntity);\n        if (cacheValueIds) {\n            // get objects from cache only if previous findwhere does not cached with selectedFields\n            let cachedValueResults = cacheValueIds.map(id => this.getEntityFromCache(repoPath, CacheConstants.idCache, id))\n                .filter((x: BaseModel) => x && !x.__selectedFindWhere && !x.__partialLoaded);\n            if (cacheValueIds.length === cachedValueResults.length) {\n                console.log(\"cache hit success findWhere \" + repoPath + \" count \" + cachedValueResults.length);\n                this.updateWriteCount();\n                return Q.when(cachedValueResults);\n            }\n        }\n\n        return MongooseModel.findWhere(this.getModel(repoPath), query, selectedFields, queryOptions, toLoadChilds).then((results: Array<BaseModel>) => {\n            results.forEach(result => {\n                if (selectedFields && selectedFields.length > 0) {\n                    result.__selectedFindWhere = true;\n                }\n                // if selected fields is empty or undefined and toLoadChilds is false, then set partialLoaded true\n                if ((!selectedFields || selectedFields.length === 0) && toLoadChilds === false) {\n                    result.__partialLoaded = true;\n                }\n                this.setEntityIntoCache(repoPath, CacheConstants.idCache, result._id, result);\n\n            });\n            this.setEntityIntoCache(repoPath, CacheConstants.hashCache, hashEntity, results.map(x => x._id));\n            return results;\n        });\n    }\n\n    countWhere(repoPath: string, query): Q.Promise<any> {\n        return MongooseModel.countWhere(this.getModel(repoPath), query);\n    }\n\n    distinctWhere(repoPath: string, query): Q.Promise<any> {\n        return MongooseModel.countWhere(this.getModel(repoPath), query);\n    }\n\n    findOne(repoPath: string, id, donotLoadChilds?: boolean): Q.Promise<any> {\n        let cacheValue: BaseModel = this.getEntityFromCache(repoPath, CacheConstants.idCache, id);\n        if (cacheValue && !cacheValue.__partialLoaded && !cacheValue.__selectedFindWhere) {\n            console.log(\"cache hit success findone \" + repoPath);\n            this.updateWriteCount();\n            return Q.when(cacheValue);\n        }\n        return MongooseModel.findOne(this.getModel(repoPath), id, donotLoadChilds).then((result: BaseModel) => {\n            if (donotLoadChilds) {\n                result.__partialLoaded = true;\n            }\n            this.setEntityIntoCache(repoPath, CacheConstants.idCache, id, result);\n            return result;\n        });\n    }\n\n    findByField(repoPath: string, fieldName, value): Q.Promise<any> {\n        return MongooseModel.findByField(this.getModel(repoPath), fieldName, value);\n    }\n\n    findMany(repoPath: string, ids: Array<any>, toLoadEmbeddedChilds?: boolean) {\n        // do not cache embedded objects\n        if (!utils.isBasonOrStringType(ids[0])) {\n            return Q.when(ids);\n        }\n\n        let chachedValues = [];\n        let unChachedIds = [];\n        ids.forEach(id => {\n            let cacheValue: BaseModel = this.getEntityFromCache(repoPath, CacheConstants.idCache, id);\n            if (cacheValue) {\n                if (cacheValue.__selectedFindWhere) {\n                    unChachedIds.push(id);\n                    return;\n                }\n                if (toLoadEmbeddedChilds && cacheValue.__partialLoaded) {\n                    unChachedIds.push(id);\n                    return;\n                }\n                return chachedValues.push(cacheValue);\n            }\n            unChachedIds.push(id);\n        });\n\n        if (unChachedIds.length === 0) {\n            return Q.when(chachedValues);\n        }\n        \n        if (chachedValues && chachedValues.length) {\n            console.log(\"cache hit success findMany \" + repoPath + \" count \" + chachedValues.length);\n            this.updateWriteCount();\n        }\n        \n        return MongooseModel.findMany(this.getModel(repoPath), unChachedIds, toLoadEmbeddedChilds).then((results: Array<BaseModel>) => {\n            results.forEach(result => {\n                if (!toLoadEmbeddedChilds) {\n                    result.__partialLoaded = true;\n                }\n                this.setEntityIntoCache(repoPath, CacheConstants.idCache, result._id, result);\n            });\n            return chachedValues.concat(results);\n        });\n    }\n\n    findChild(repoPath: string, id, prop): Q.Promise<any> {\n        return MongooseModel.findChild(this.getModel(repoPath), id, prop);\n    }\n\n    /**\n     * case 1: all new - create main item and child separately and embed if true\n     * case 2: some new, some update - create main item and update/create child accordingly and embed if true\n     * @param obj\n     */\n    post(repoPath: string, obj: any): Q.Promise<any> {\n        return MongooseModel.post(this.getModel(repoPath), obj);\n    }\n\n    put(repoPath: string, id: any, obj: any): Q.Promise<any> {\n        return MongooseModel.put(this.getModel(repoPath), id, obj).then(result => {\n            this.setEntityIntoCache(repoPath, CacheConstants.idCache, id, result);\n            return result;\n        });\n    }\n\n    del(repoPath: string, id: any): Q.Promise<any> {\n        return MongooseModel.del(this.getModel(repoPath), id).then(result => {\n            this.deletEntityFromCache(repoPath, CacheConstants.idCache, id);\n            return result;\n        });\n    }\n\n    patch(repoPath: string, id: any, obj): Q.Promise<any> {\n        return MongooseModel.patch(this.getModel(repoPath), id, obj).then(result => {\n            this.setEntityIntoCache(repoPath, CacheConstants.idCache, id, result);\n            return result;\n        });\n    }\n\n    getModel(repoPath: string, dynamicName?: string) {\n        try {\n            let model = Utils.getCurrentDBModel(pathRepoMap[repoPath].schemaName);\n            if (model && dynamicName) {\n                var meta = MetaUtils.getMetaData(getEntity(model.modelName), Decorators.DOCUMENT);\n                if (meta && meta[0] && meta[0].params.dynamicName) {\n                    model = getDbSpecifcModel(dynamicName, model.schema);\n                }\n            }\n            return model;\n        } catch (e) {\n            winstonLog.logError(`Error in getMongooseModel ${e}`);\n            throw e;\n        }\n    }\n\n    private getEntityFromCache(repoPath: string, param: string, id: any) {\n        // entityCache->modelName_path->hashEntity->{key: valueObj}\n        //                            ->idEntity->{key: valueObj}\n        if (!configUtil.config().Config.isCacheEnabled) {\n            return undefined;\n        }\n        let currentUser: IUser = PrincipalContext.User;\n        if (currentUser && currentUser.entityCache && currentUser.entityCache[repoPath] &&\n            currentUser.entityCache[repoPath][param] && currentUser.entityCache[repoPath][param][id]) {\n\n            // if current context view is changed then clear cache objects\n            if (currentUser.cacheContext != currentUser.viewContext) {\n                currentUser.cacheContext = currentUser.viewContext;\n                currentUser.entityCache = [];\n                return undefined;\n            }\n            return currentUser.entityCache[repoPath][param][id];\n        }\n        return undefined;\n    }\n\n    private setEntityIntoCache(repoPath: string, entityType: string, id: any, value: any) {\n        // entityCache->modelName_path->hashEntity->{key: valueObj}\n        //                            ->idEntity->{key: valueObj}\n        if (!configUtil.config().Config.isCacheEnabled) {\n            return undefined;\n        }\n        let currentUser: IUser = PrincipalContext.User;\n        if (!currentUser) {\n            currentUser = <any>{};\n            PrincipalContext.User = currentUser;\n        }\n\n        if (!currentUser.entityCache) {\n            currentUser.entityCache = {};\n        }\n\n        if (!currentUser.entityCache[repoPath]) {\n            currentUser.entityCache[repoPath] = {};\n        }\n\n        if (!currentUser.entityCache[repoPath][entityType]) {\n            currentUser.entityCache[repoPath][entityType] = {};\n        }\n\n        currentUser.entityCache[repoPath][entityType][id] = value;\n    }\n\n    private deletEntityFromCache(repoPath: string, param: string, id: any) {\n        if (!configUtil.config().Config.isCacheEnabled) {\n            return undefined;\n        }\n        let currentUser: any = PrincipalContext.User;\n        if (currentUser && currentUser.entityCache && currentUser.entityCache[repoPath] &&\n            currentUser.entityCache[repoPath][param][id]) {\n            delete currentUser.entityCache[repoPath][param][id];\n        }\n    }\n}\n\nexport class CacheConstants {\n    public static idCache: string = \"idCache\";\n    public static hashCache: string = \"hashCache\";\n}\n"],"sourceRoot":"/source/"}