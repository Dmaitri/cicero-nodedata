{"version":3,"sources":["mongoose/utils/index.ts"],"names":[],"mappings":"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","file":"mongoose/utils/index.js","sourcesContent":["import Mongoose = require('mongoose');\nimport {EntityChange} from '../../core/enums/entity-change';\nimport * as CoreUtils from '../../core/utils';\nimport {PrincipalContext} from '../../security/auth/principalContext';\nimport * as Enumerable from 'linq';\nimport {getDbSpecifcModel} from '../db';\nimport {pathRepoMap, getModel, getSchema} from '../../core/dynamic/model-entity';\nimport {MetaData} from '../../core/metadata/metadata';\nimport {Decorators} from '../../core/constants/decorators';\nimport {Types} from \"mongoose\";\nimport { ConstantKeys } from '../../core/constants';\nvar rn = require('random-number');\nvar gen = rn.generator({\n    min: 0,\n    max:999999999,\n    integer: true\n});\n\nexport function castToMongooseType(value, schemaType) {\n    var newVal;\n    switch (schemaType) {\n        case Mongoose.Types.ObjectId:\n            if (value instanceof Mongoose.Types.ObjectId) {\n                newVal = value;\n            } else if (typeof value === 'string') {\n                newVal = new Mongoose.Types.ObjectId(value);\n            } else {\n                throw 'cannot cast to primary key type';\n            }\n            break;\n        case String:\n            if (typeof value === 'string') {\n                newVal = value;\n            }\n            newVal = value.toString();\n            break;\n        case Number:\n            if (typeof value === 'number') {\n                newVal = value;\n            }\n            newVal = parseInt(value);\n            if (isNaN(newVal)) {\n                throw 'cannot cast to primary key type';\n            }\n            break;\n        default: newVal = value; break;\n    }\n    return newVal;\n}\n\nexport function getPropertiesFromObject(changedObj: any): Array<string> {\n    return Enumerable.from(changedObj).select((x: any) => x.key).toArray();\n}\n\n/**\n * return json from mongoose object\n * @param result\n */\nexport function toObject(result): any {\n    if (result instanceof Array) {\n        return Enumerable.from(result).select((x:any) => x.toObject()).toArray();\n    }\n    return result ? result.toObject() : null;\n}\n\n/**\n * It creates list of properties to set/unset/push.\n * If array is passed, then for put whole array is replaced but for patch array is updated. For e.g.\n * Case 'put': Suppose there is an object {'ids':['1']}. On put {'ids':['2']}, it will result {'ids':['2']}.\n * Case 'patch': Suppose there is an object {'ids':['1']}. On patch {'ids':['2']}, it will result {'ids':['1', '2']}.\n * @param obj\n * @param type\n */\nexport function getUpdatedProps(obj: any, type: EntityChange, jsonMapProp?: Array<any>) {\n    var push = {};\n    var set = {};\n    var unset = {};\n    var s = false, u = false, p = false;\n    let orginalDbEntity = obj.__dbEntity;\n    for (var key in obj) {\n        if (key === \"__dbEntity\") {\n            continue;\n        }\n        let curValue = obj[key];\n        if (curValue == undefined || curValue == null) {\n            if (orginalDbEntity && curValue === orginalDbEntity[key]) { // add json.parse(json.stringify)\n                continue;\n            }\n           \n            unset[key] = '';\n            delete obj[key]; // make sure data should consistent for master collection with embedded entities\n            u = true;\n            continue;\n        }\n        if (orginalDbEntity && curValue instanceof Array && !curValue.length) {\n            if (curValue instanceof Array && orginalDbEntity && orginalDbEntity[key].length == curValue.length) {\n                continue;\n            }\n        }\n        else {\n            if (type == EntityChange.patch && curValue instanceof Array) {\n                push[key] = {\n                    $each: curValue\n                }\n                p = true;\n            }\n            else {\n                if (type == EntityChange.patch && jsonMapProp && jsonMapProp.indexOf(key) >= 0) {\n                    for (var j in curValue) {\n                        set[key + '.' + j] = curValue[j];\n                        s = true;\n                    }\n                }\n                else if (!(curValue instanceof Function)) {\n                    // do not set for not modified keys\n                    // in case of object, use JSON.stringify to compare serialize object.\n                    if (!Array.isArray(curValue) && curValue instanceof Object && orginalDbEntity) {\n                        let serializeOrgObj = JSON.stringify(orginalDbEntity[key]);\n                        let serializeCurObj = JSON.stringify(curValue);\n                        if (serializeCurObj == serializeOrgObj) {\n                            continue;\n                        }\n                    }\n                    // in case of string, number, boolean etc. direct compare.\n                    if (orginalDbEntity && curValue === orginalDbEntity[key]) { // add json.parse(json.stringify)\n                        continue;\n                    }\n                    set[key] = curValue;\n                    s = true;\n                }\n            }\n        }\n    }\n\n    var json = {};\n    if (s) {\n        json['$set'] = set;\n    }\n    if (u) {\n        json['$unset'] = unset;\n    }\n    if (p) {\n        json['$push'] = push;\n    }\n\n    return json;\n}\n\nexport function isPropertyUpdateRequired(changedProps: Array<string>, properties: [string]) {\n    if (properties && properties.length > 0) {\n        if (Enumerable.from(properties).any(x => changedProps.indexOf(x) > -1))\n            return true;\n    }\n\n    if (!changedProps || changedProps.length == 0)\n        return false;\n    else if (!properties || properties.length == 0)\n        return true;\n    else {\n        if (Enumerable.from(properties).any(x => changedProps.indexOf(x) > -1))\n            return true;\n        else\n            return false;\n    }\n}\n\nexport function getCurrentDBModel(schemaName) {\n    var model = getModel(schemaName);\n    return getDbSpecifcModel(schemaName, model.schema);\n}\n\nexport function getMongoUpdatOperatorForRelation(meta: MetaData) {\n    var operator = \"\";\n    switch (meta.decorator) {\n        case Decorators.ONETOMANY: // for array of objects\n            operator = '.$';\n            break;\n        case Decorators.MANYTOMANY: // for array of objects\n            operator = '.$';\n            break;\n        case Decorators.MANYTOONE: // for single object\n            operator = \"\";\n            break;\n        case Decorators.ONETOONE: // for single object\n            operator = \"\";\n            break;\n    }\n\n    return operator;\n\n}\n\nexport function isBasonOrStringType(obj: any) {\n    if (!obj) {\n        return undefined;\n    }\n    return !CoreUtils.isJSON(obj) || (CoreUtils.isJSON(obj) && obj instanceof Types.ObjectId);\n}\n\nexport function getParentKey(modelName, prop, id) {\n    let parent = {};\n    parent[ConstantKeys.collectionName] = modelName;\n    parent[ConstantKeys.property] = prop;\n    parent[ConstantKeys.parentId] = id;\n    return parent;\n}\nexport function pushPropToArrayOrObject(prop:any,propVal:any,collecionObj:any,isFlat:boolean){\n    if(isFlat){\n        collecionObj[prop] = propVal;\n    }else{\n        collecionObj.push(propVal);\n    }\n}\n\n/**\n * Autogenerate mongodb guid (ObjectId) for the autogenerated fields in the object\n * @param obj\n * throws TypeError if field type is not String, ObjectId or Object\n */\n//export function autogenerateIdsForAutoFields(model: Mongoose.Model<any>, obj: any): void {\n//    var fieldMetaArr = MetaUtils.getMetaData(getEntity(model.modelName), Decorators.FIELD);\n//    if (!fieldMetaArr) {\n//        return;\n//    }\n//    Enumerable.from(fieldMetaArr)\n//        .where((keyVal) => keyVal && keyVal.params && (<IFieldParams>keyVal.params).autogenerated)\n//        .forEach((keyVal) => {\n//            var metaData = <MetaData>keyVal;\n//            var objectId = new Mongoose.Types.ObjectId();\n//            if (metaData.getType() === String) {\n//                obj[metaData.propertyKey] = objectId.toHexString();\n//            } else if (metaData.getType() === Mongoose.Types.ObjectId || metaData.getType() === Object) {\n//                obj[metaData.propertyKey] = objectId;\n//            } else {\n//                winstonLog.logError(model.modelName + ': ' + metaData.propertyKey + ' - ' + 'Invalid autogenerated type');\n//                throw TypeError(model.modelName + ': ' + metaData.propertyKey + ' - ' + 'Invalid autogenerated type');\n//            }\n//        });\n//}\n\nexport function autogenerateIds(model: any): any {\n    let primaryKey = '_id';\n    let type = model.schema.paths[primaryKey].instance;\n    switch (type) {\n        case 'Number':\n            return gen()\n        default:\n            let id = new Mongoose.Types.ObjectId();\n            if (type == 'ObjectID') {\n                return id;\n            }\n            else {\n                return id.toString();\n            }\n    }\n}\n\nexport function getCastObjectId(model: any, id: any): any {\n    let primaryKey = '_id';\n    let type = model.schema.paths[primaryKey].instance;\n    if (type == 'ObjectID') {\n        return new Mongoose.Types.ObjectId(id.toString());\n    }\n    else {\n        return id;\n    }\n}"],"sourceRoot":"/source/"}