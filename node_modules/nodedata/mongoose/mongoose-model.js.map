{"version":3,"sources":["mongoose/mongoose-model.ts"],"names":[],"mappings":"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","file":"mongoose/mongoose-model.js","sourcesContent":["import Mongoose = require(\"mongoose\");\nimport Q = require('q');\nimport { EntityChange } from '../core/enums/entity-change';\nimport { getEntity, repoFromModel } from '../core/dynamic/model-entity';\nimport * as Enumerable from 'linq';\nimport { winstonLog } from '../logging/winstonLog';\nimport * as mongooseHelper from './mongoose-model-helper';\nimport * as CoreUtils from \"../core/utils\";\nimport { ConstantKeys } from '../core/constants';\nimport * as Utils from './utils';\nimport { QueryOptions } from '../core/interfaces/queryOptions';\nimport { MetaUtils } from \"../core/metadata/utils\";\nimport { Decorators } from '../core/constants/decorators';\nimport { GetRepositoryForName, DynamicRepository } from '../core/dynamic/dynamic-repository';\nimport {_arrayPropListSchema} from './dynamic-schema';\nimport { MetaData } from '../core/metadata/metadata';\nimport {ShardInfo} from '../core/interfaces/shard-Info';\nimport {InstanceService} from '../core/services/instance-service';\n\n/**\n * Iterate through objArr and check if any child object need to be added. If yes, then add those child objects.\n * Bulk create these updated objects.\n * Usage - Post multiple objects parallely\n * @param model\n * @param objArr\n */\nexport function bulkPost(model: Mongoose.Model<any>, objArr: Array<any>, batchSize?: number): Q.Promise<any> {\n    if (!objArr) {\n        return Q.when([]);\n    }\n    if (objArr && objArr.length <= 0) {\n        return Q.when([]);\n    }\n\n    //console.log(\"bulkPost \" + model.modelName);\n    mongooseHelper.updateWriteCount();\n    var addChildModel = [];\n\n    // create all cloned models\n    var clonedModels = [];\n    let transientProps = mongooseHelper.getAllTransientProps(model);\n    Enumerable.from(objArr).forEach(obj => {\n        var cloneObj = mongooseHelper.removeGivenTransientProperties(model, obj, transientProps);\n        cloneObj[ConstantKeys.TempId] = cloneObj._id ? cloneObj._id : Utils.autogenerateIds(model);\n        clonedModels.push(cloneObj);\n    });\n    return mongooseHelper.addChildModelToParent(model, clonedModels)\n        .then(result => {\n            // autogenerate ids of all the objects\n            //Enumerable.from(clonedModels).forEach(clonedObj => {\n            //    try {\n            //        mongooseHelper.autogenerateIdsForAutoFields(model, clonedObj);\n            //        //Object.assign(obj, clonedObj);\n            //    } catch (ex) {\n            //        winstonLog.logError(`Error in bulkPost ${ex}`);\n            //        return Q.reject(ex);\n            //    }\n            //});\n\n            var asyncCalls = [];\n            if (!batchSize) batchSize = 1000;\n            for (let curCount = 0; curCount < clonedModels.length; curCount += batchSize) {\n                asyncCalls.push(executeBulk(model, clonedModels.slice(curCount, curCount + batchSize)))\n            }\n            return Q.allSettled(asyncCalls).then(suces => {\n                let values = [];\n                values = suces.map(x => x.value).reduce((prev, current) => {\n                    return prev.concat(current);\n                });\n                //console.log(\"bulkPost end\" + model.modelName);\n                return values;\n            }).catch(er => {\n                winstonLog.logError(`Error in bulkPost ${model.modelName}: ${er}`);\n                throw er;\n            });\n        });\n}\n\nfunction executeBulk(model, arrayOfDbModels: Array<any>) {\n    //console.log(\"start executeBulk post\", model.modelName);\n    let executeBulkPost = {};\n    arrayOfDbModels.forEach(x => {\n        if (x[ConstantKeys.TempId]) {\n            x._id = x[ConstantKeys.TempId]\n            delete x[ConstantKeys.TempId]\n        }\n        mongooseHelper.setUniqueIdFromShard(x);\n        mongooseHelper.setShardCondition(model, x);\n        let newModel = mongooseHelper.getNewModelFromObject(model, x);\n        if (!executeBulkPost[newModel.modelName]) {\n            executeBulkPost[newModel.modelName] = { objs: [], model: newModel };\n        }\n        executeBulkPost[newModel.modelName].objs.push(x);\n        if (!_arrayPropListSchema[model.modelName]) {\n            return;\n        }\n        // assign empty array for not defined properties\n        _arrayPropListSchema[model.modelName].forEach(prop => {\n            if (!x[prop]) {\n                x[prop] = [];\n            }\n        });\n    });\n    let asycnCalls = [];\n    Object.keys(executeBulkPost).forEach(x => {\n        asycnCalls.push(Q.nbind(executeBulkPost[x].model.collection.insertMany, executeBulkPost[x].model.collection)(executeBulkPost[x].objs));\n    });\n    //console.log(\"empty array executeBulk \", model.modelName);\n    return Q.allSettled(asycnCalls).then(result => {\n        //console.log(\"end executeBulk post\", model.modelName);\n        let values = [];\n        values = result.map(x => x.value.ops).reduce((prev, current) => {\n            return prev.concat(current);\n        });\n        return values;\n    }).catch(err => {\n        throw err;\n    });\n}\n\n/**\n * Iterate through objArr and call put for these\n * Usage - Update multiple object sequentially\n * @param model\n * @param objArr\n */\nexport function bulkPut(model: Mongoose.Model<any>, objArr: Array<any>, batchSize?: number, donotLoadChilds?: boolean): Q.Promise<any> {\n    if (!objArr || !objArr.length) return Q.when([]);\n    //console.log(\"bulkPut \" + model.modelName);\n    mongooseHelper.updateWriteCount();\n    var asyncCalls = [];\n    var length = objArr.length;\n    var ids = objArr.map(x => x._id);\n    var bulk = model.collection.initializeUnorderedBulkOp();\n    var asyncCalls = [];\n    if (!batchSize) {\n        asyncCalls.push(executeBulkPut(model, objArr, donotLoadChilds));\n    } else {\n        for (let curCount = 0; curCount < objArr.length; curCount += batchSize) {\n            asyncCalls.push(executeBulkPut(model, objArr.slice(curCount, curCount + batchSize), donotLoadChilds))\n        }\n    }\n\n    return Q.allSettled(asyncCalls).then(suces => {\n        let values = [];\n        values = suces.map(x => x.value).reduce((prev, current) => {\n            return prev.concat(current);\n        });\n        //console.log(\"bulkPut end\" + model.modelName);\n        return values;\n    }).catch(er => {\n        winstonLog.logError(`Error in bulkPut ${model.modelName}: ${er}`);\n        throw er;\n    });\n}\n\nfunction executeBulkPut(model: Mongoose.Model<any>, objArr: Array<any>, donotLoadChilds?: boolean) {\n    let length = objArr.length;\n    var asyncCalls = [];\n    let fullyLoaded = objArr && objArr.length > 0 && objArr[0][ConstantKeys.FullyLoaded];\n    let updateParentRequired = [];\n    var objectIds = [];\n    //console.log(\"bulkPut addChildModelToParent child start\" + model.modelName);\n    let allUpdateProps = [];\n    return mongooseHelper.addChildModelToParent(model, objArr).then(r => {\n        //console.log(\"bulkPut addChildModelToParent child end\" + model.modelName);\n        let transientProps = mongooseHelper.getAllTransientProps(model);\n        var metaArr = CoreUtils.getAllRelationsForTargetInternal(getEntity(model.modelName));\n        let isRelationsExist = false;\n\n        if (metaArr && metaArr.length) {\n            isRelationsExist = true;\n        }\n        //let updatePropsReq = !fullyLoaded || isRelationsExist;\n        // check if not relationship present in the docs then do not call updateProps\n        // \n\n        let allBulkExecute = {}; \n        for (let i = 0; i < objArr.length; i++) {\n            let result = objArr[i];\n            let newModel = mongooseHelper.getNewModelFromObject(model, result);\n            var objectId = Utils.getCastObjectId(newModel, result._id);\n            objectIds.push(objectId);\n            let id = result._id;\n            let parent = result.parent;\n\n            if (!allBulkExecute[newModel.modelName]) {\n                allBulkExecute[newModel.modelName] = newModel.collection.initializeUnorderedBulkOp();\n            }\n            let bulk = allBulkExecute[newModel.modelName];\n\n            delete result._id;\n            delete result[ConstantKeys.FullyLoaded];\n            for (let prop in transientProps) {\n                delete result[transientProps[prop].propertyKey];\n            }\n            var updatedProps;\n            updatedProps = Utils.getUpdatedProps(result, EntityChange.put);\n\n            // //console.log(\"update props\", updatedProps);\n            delete result.__dbEntity;\n            // update only modified objects\n            if (Object.keys(updatedProps).length === 0) {\n                continue;\n            }\n            updateParentRequired.push(objectId);\n            //if (updatePropsReq) {\n            //    updatedProps = Utils.getUpdatedProps(result, EntityChange.put);\n            //    // update only modified objects\n            //    if (Object.keys(updatedProps).length === 0) {\n            //        continue;\n            //    }\n            //}\n\n            let isDecoratorPresent = isDecoratorApplied(model, Decorators.OPTIMISTICLOCK, \"put\");\n            let query: Object = { _id: objectId };\n            if (isDecoratorPresent === true) {\n                updatedProps[\"$set\"] && delete updatedProps[\"$set\"][\"__v\"];\n                updatedProps[\"$inc\"] = { '__v': 1 };\n                query[\"__v\"] = result[\"__v\"];\n            }\n            bulk.find(mongooseHelper.setShardCondition(model, { _id: objectId })).update(updatedProps);\n        }\n        let asyncCalls = [];\n        //let promBulkUpdate = Q.when({});\n        //console.log(\"bulkPut bulk.execute start\" + model.modelName);\n        if (updateParentRequired.length > 0) {\n            Object.keys(allBulkExecute).forEach(x => {\n                let bulk = allBulkExecute[x];\n                asyncCalls.push(Q.nbind(bulk.execute, bulk)());\n            });\n        }\n        return Q.allSettled(asyncCalls).then(result => {\n            //return promBulkUpdate.then(result => {\n            //console.log(\"bulkPut bulk.execute end\" + model.modelName);\n\n            // update parent\n            let repo: DynamicRepository = repoFromModel[model.modelName];\n            let prom;\n            if (fullyLoaded) {\n                // remove eagerloading propeties because it will be used for updating parent\n                // validate that no one have tampered the new persistent entity\n                prom = Q.when(objArr);\n                objectIds.forEach((id, index) => {\n                    objArr[index]['_id'] = id;\n                });\n            }\n            else {\n                prom = findMany(model, objectIds);\n            }\n            return prom.then((objects: Array<any>) => {\n                let updateParentProm = Q.when([]);\n                if (updateParentRequired.length > 0) {\n                    let updateObject = [];\n                    updateParentRequired.forEach(x => {\n                        updateObject.push(objects.find(obj => obj._id.toString() == x));\n                    });\n                    updateParentProm = mongooseHelper.updateParent(model, updateObject);\n                }\n                return updateParentProm.then(res => {\n                    //console.log(\"bulkPut updateParent start\" + model.modelName);\n                    if (donotLoadChilds === true) {\n                        return Q.when(objects);\n                    }\n                    return mongooseHelper.fetchEagerLoadingProperties(model, objects).then(resultObject => {\n                        return resultObject;\n                    });\n                });\n            });\n\n        });\n    }).catch(error => {\n        winstonLog.logError(`Error in executeBulkPut ${model.modelName}: ${error}`);\n        return Q.reject(error);\n    });\n}\n\n\n\n/**\n * Iterate through objArr and call put for these\n * Usage - Update multiple object sequentially\n * @param model\n * @param objArr\n */\nexport function bulkPatch(model: Mongoose.Model<any>, objArr: Array<any>): Q.Promise<any> {\n    if (!objArr || !objArr.length) return Q.when([]);\n    //console.log(\"bulkPatch \" + model.modelName);\n    mongooseHelper.updateWriteCount();\n    var asyncCalls = [];\n    var length = objArr.length;\n    var ids = objArr.map(x => x._id);\n\n    var asyncCalls = [];\n\n    return mongooseHelper.addChildModelToParent(model, objArr).then(x => {\n        let transientProps = mongooseHelper.getAllTransientProps(model);\n        let jsonProps = mongooseHelper.getEmbeddedPropWithFlat(model).map(x => x.propertyKey);\n\n        //it has to be group by\n        let allBulkExecute = {};\n        objArr.forEach(result => {\n            var objectId = Utils.getCastObjectId(model, result._id);\n            let newModel = mongooseHelper.getNewModelFromObject(model, result);\n            if (!allBulkExecute[newModel.modelName]) {\n                allBulkExecute[newModel.modelName] = newModel.collection.initializeUnorderedBulkOp();\n            }\n            let bulk = allBulkExecute[newModel.modelName];\n\n            delete result._id;\n            for (let prop in transientProps) {\n                delete result[transientProps[prop].propertyKey];\n            }\n            var updatedProps = Utils.getUpdatedProps(result, EntityChange.patch, jsonProps);\n            let isDecoratorPresent = isDecoratorApplied(model, Decorators.OPTIMISTICLOCK, \"patch\");\n            let query: Object = { _id: objectId };\n            if (isDecoratorPresent === true) {\n                updatedProps[\"$set\"] && delete updatedProps[\"$set\"][\"__v\"];\n                updatedProps[\"$inc\"] = { '__v': 1 };\n                query[\"__v\"] = result[\"__v\"];\n            }\n            bulk.find(mongooseHelper.setShardCondition(model, query)).update(updatedProps);\n        });\n        let asyncCalls = [];\n        Object.keys(allBulkExecute).forEach(x => {\n            let bulk = allBulkExecute[x];\n            asyncCalls.push(Q.nbind(bulk.execute, bulk)());\n        });\n        return Q.allSettled(asyncCalls).then(result => {\n            // update parent\n            return findMany(model, ids).then((objects: Array<any>) => {\n                return mongooseHelper.updateParent(model, objects).then(res => {\n                    return mongooseHelper.fetchEagerLoadingProperties(model, objects).then(resultObject => {\n                        //console.log(\"bulkPatch end\" + model.modelName);\n                        return resultObject;\n                    });\n                });\n            });\n        }).catch(error => {\n            winstonLog.logError(`Error in bulkPatch ${model.modelName}: ${error}`);\n            return Q.reject(error);\n        });\n    });\n}\n\n/**\n * Bulk update objects. Find updated objects, and update the parent docs\n * Usage - Update multiple objects parallely with same porperty set\n * @param model\n * @param objIds\n * @param obj\n */\nexport function bulkPutMany(model: Mongoose.Model<any>, objIds: Array<any>, obj: any): Q.Promise<any> {\n    if (!objIds || !objIds.length) return Q.when([]);\n    //console.log(\"bulkPutMany \" + model.modelName);\n    mongooseHelper.updateWriteCount();\n    delete obj._id;\n    let clonedObj = mongooseHelper.removeTransientProperties(model, obj);\n    // First update the any embedded property and then update the model\n    var cond = {};\n    cond['_id'] = {\n        $in: objIds\n    };\n    cond = mongooseHelper.setShardCondition(model, cond);\n    var updatedProps = Utils.getUpdatedProps(clonedObj, EntityChange.put);\n    let newModels = mongooseHelper.getAllShardModelsFromIds(model, objIds);\n    let asyncCalls = [];\n    Object.keys(newModels).forEach(x => {\n        asyncCalls.push(Q.nbind(newModels[x].update, newModels[x])(cond, updatedProps, { multi: true }));\n    });\n    return Q.allSettled(asyncCalls)\n        .then(result => {\n            let allReferencingEntities = CoreUtils.getAllRelationsForTarget(getEntity(model.modelName));\n            let ref = allReferencingEntities.find((x: MetaData) => x.params && x.params.embedded);\n            if (ref) {\n                return findMany(model, objIds).then((objects: Array<any>) => {\n                    return mongooseHelper.updateParent(model, objects).then(res => {\n                        //console.log(\"bulkPutMany end\" + model.modelName);\n                        return objects;\n                    });\n                });\n            }\n            else {\n                //console.log(\"bulkPutMany end\" + model.modelName);\n                return result;\n            }\n        }).catch(error => {\n            winstonLog.logError(`Error in bulkPutMany ${model.modelName}: ${error}`);\n            return Q.reject(error);\n        });\n}\n\n/**\n * Usage - Find all the objects\n * @param model\n */\nexport function findAll(model: Mongoose.Model<any>): Q.Promise<any> {\n    //console.log(\"findAll \" + model.modelName);\n    return <any>model.find(mongooseHelper.setShardCondition(model, {})).lean().then(result => {\n        //console.log(\"findAll end\" + model.modelName);\n        return result;\n    }).catch(error => {\n        winstonLog.logError(`Error in findAll ${model.modelName}: ${error}`);\n        return Q.reject(error);\n    });\n}\n\n\n/**\n * Query collection and then populate child objects with relationship\n * Usage - Search object with given condition\n * @param model\n * @param query \n */\nexport function countWhere(model: Mongoose.Model<any>, query: any): Q.Promise<any> {\n\n  if (Object.keys(query).length == 0) {\n        return Q.nbind(model.collection.stats, model.collection)().then((result: any) => {\n            return Q.resolve(result.count);\n        })\n    }\n\t\n    let queryObj = model.find(mongooseHelper.setShardCondition(model, query)).count();\n    //winstonLog.logInfo(`findWhere query is ${query}`);\n    return Q.nbind(queryObj.exec, queryObj)()\n        .then(result => {\n            // update embedded property, if any\n            return Q.resolve(result);\n        }).catch(error => {\n            winstonLog.logError(`Error in countWhere ${model.modelName}: ${error}`);\n            return Q.reject(error);\n        });\n\n}\n\nexport function distinctWhere(model: Mongoose.Model<any>, query: any): Q.Promise<any> {\n\n    let queryObj = model.find(mongooseHelper.setShardCondition(model, query)).distinct();\n    //winstonLog.logInfo(`findWhere query is ${query}`);\n    return Q.nbind(queryObj.exec, queryObj)()\n        .then(result => {\n            // update embedded property, if any\n            return Q.resolve(result);\n        }).catch(error => {\n            winstonLog.logError(`Error in distinctWhere ${model.modelName}: ${error}`);\n            return Q.reject(error);\n        });\n\n}\n\n\n/**\n * Query collection and then populate child objects with relationship\n * Usage - Search object with given condition\n * @param model\n * @param query\n * @param select {Array<string> | any} In case it is an array of string, it selects the specified keys mentioned in the array. In case  it is an Object, it sets the JS object as the projection key\n * @param sort\n * @param skip\n * @param limit\n */\nexport function findWhere(model: Mongoose.Model<any>, query: any, select?: Array<string> | any, queryOptions?: QueryOptions, toLoadChilds?: boolean, sort?: any, skip?: number, limit?: number): Q.Promise<any> {\n    //console.log(\"findWhere \" + model.modelName);\n    let lt: string, gt: string, lte: string, gte: string, lt_value: number, lte_value: number, gt_value: number, gte_value: number;\n    var sel = {};\n    let order = undefined;\n    if (select instanceof Array) {\n        select.forEach(x => {\n            sel[x] = 1;\n        });\n    }\n    else if (select) {\n        sel = select;\n    }\n    if (queryOptions) {\n        if (queryOptions.limit != null)\n            limit = Number.parseInt(queryOptions.limit.toString());\n\n        if (queryOptions.skip != null)\n            skip = Number.parseInt(queryOptions.skip.toString());\n\n\t\t\n\t\t  if (queryOptions.lt != null) {\n            lt = queryOptions.lt;\n        }\n\n        if (queryOptions.gt != null) {\n            gt = queryOptions.gt;\n        }\n\n        if (queryOptions.lt_value != null) {\n            lt_value = Number.parseInt(queryOptions.lt_value);\n        }\n\n        if (queryOptions.gt_value != null) {\n            gt_value = Number.parseInt(queryOptions.gt_value);\n        }\n\n        if (queryOptions.lt != null) {\n            lte = queryOptions.lte;\n        }\n\n        if (queryOptions.gt != null) {\n            gte = queryOptions.gte;\n        }\n\n        if (queryOptions.lt_value != null) {\n            lte_value = Number.parseInt(queryOptions.lte_value);\n        }\n\n        if (queryOptions.gt_value != null) {\n            gte_value = Number.parseInt(queryOptions.gte_value);\n        }\n\t\t\n\t\t\n        if (queryOptions.sort != null) {\n            sort = queryOptions.sort;\n            if (queryOptions.order != null && queryOptions.order === 'desc') {\n                let descSort = {};\n                descSort[sort] = -1;\n                sort = descSort;\n            }\n        }\n    }\n\n    let newModels = {};\n    let obj: ShardInfo = InstanceService.getInstanceFromType(getEntity(model.modelName), true);\n    if (obj.getShardKey) {\n        let key = obj.getShardKey();\n        if (query[key]) {\n            if (CoreUtils.isJSON(query[key])) {\n                if (query[key]['$in']) {\n                    query[key]['$in'].forEach(x => {\n                        let newModel = mongooseHelper.getChangedModelForDynamicSchema(model, x);\n                        newModels[newModel.modelName] = newModel;\n                    });\n                }\n            }\n            else {\n                // get shard collection \n                let newModel = mongooseHelper.getChangedModelForDynamicSchema(model, query[key]);\n                newModels[newModel.modelName] = newModel;\n            }\n        }\n        if (Object.keys(newModels).length == 0) {\n            // find all the collection name and execute the query\n            mongooseHelper.getAllTheShards(model).forEach(x => {\n                newModels[x.modelName] = x;\n            });\n        }\n    }\n    else {\n        newModels[model.modelName] = model;\n    }\n    let asyncCalls = [];\n    Object.keys(newModels).forEach(x => {\n        let queryObj = newModels[x].find(mongooseHelper.setShardCondition(model, query), sel).lean();\n        if (sort) {\n            queryObj = queryObj.sort(sort);\n        }\n        if (skip) {\n            queryObj = queryObj.skip(skip);\n        }\n        if (limit) {\n            queryObj = queryObj.limit(limit);\n        }\n\t\t\n        if (gt && gt_value!=undefined) {\n            queryObj = queryObj.gt(gt, gt_value);\n        }\n        if (lt && lt_value != undefined) {\n            queryObj = queryObj.lt(lt, lt_value);\n        }\n\n        if (gte && gte_value != undefined) {\n            queryObj = queryObj.gte(gte, gte_value);\n        }\n        if (lte && lte_value != undefined) {\n            queryObj = queryObj.lte(lte, lte_value);\n        }\n\t\t\n        asyncCalls.push(Q.nbind(queryObj.exec, queryObj)());\n    });\n    return Q.allSettled(asyncCalls).then(res => {\n        let result = [];\n        result = res.map(x => x.value).reduce((prev, current) => {\n            return prev.concat(current);\n        });\n        //winstonLog.logInfo(`findWhere query is ${query}`);\n        // update embedded property, if any\n        if (toLoadChilds != undefined && toLoadChilds == false) {\n            mongooseHelper.transformAllEmbeddedChildern1(model, result);\n            //console.log(\"findWhere end\" + model.modelName);\n            return result;\n        }\n        var asyncCalls = [];\n        asyncCalls.push(mongooseHelper.embeddedChildren1(model, result, false));\n        return Q.allSettled(asyncCalls).then(r => {\n            //console.log(\"findWhere end\" + model.modelName);\n            return result;\n        });\n    }).catch(error => {\n        winstonLog.logError(`Error in findWhere ${model.modelName}: ${error}`);\n        return Q.reject(error);\n    });\n    // winstonLog.logInfo(`findWhere query is ${query}`);\n    // return Q.nbind(model.find, model)(query)\n    //     .then(result => {\n    //         return toObject(result);\n    //     }).catch(error => {\n    //         winstonLog.logError(`Error in findWhere ${error}`);\n    //         return error;\n    //     });\n}\n\n/**\n * Usage - find object with given object id\n * @param model\n * @param id\n */\nexport function findOne(model: Mongoose.Model<any>, id, donotLoadChilds?: boolean): Q.Promise<any> {\n    //console.log(\"findOne \" + model.modelName);\n    let newModel = mongooseHelper.getChangedModelForDynamicSchema(model, id);\n    return <any>newModel.findOne(mongooseHelper.setShardCondition(model, { '_id': id })).lean().then(result => {\n        return mongooseHelper.embeddedChildren1(model, [result], false, donotLoadChilds)\n            .then(r => {\n                //console.log(\"findOne end\" + model.modelName);\n                return result;\n            });\n    }).catch(error => {\n        winstonLog.logError(`Error in findOne ${model.modelName}: ${error}`);\n        return Q.reject(error);\n    });\n}\n\n/**\n * Usage - find the object with given {property : value}\n * @param model\n * @param fieldName\n * @param value\n */\nexport function findByField(model: Mongoose.Model<any>, fieldName, value): Q.Promise<any> {\n    //console.log(\"findByField \" + model.modelName);\n    var param = {};\n    param[fieldName] = value;\n    return <any>model.findOne(mongooseHelper.setShardCondition(model, param)).lean().then(result => {\n        return mongooseHelper.embeddedChildren1(model, [result], false)\n            .then(r => {\n                //console.log(\"findByField end\" + model.modelName);\n                return result;\n            });\n    },\n        err => {\n            winstonLog.logError(`Error in findByField ${model.modelName}: ${err}`);\n            return Q.reject(err);\n        });\n}\n\n/**\n * Usage - Find all the objects with given ids\n * @param model\n * @param ids\n */\nexport function findMany(model: Mongoose.Model<any>, ids: Array<any>, toLoadEmbeddedChilds?: boolean) {\n    if (!ids || !ids.length) return Q.when([]);\n    //console.log(\"findMany \" + model.modelName);\n    if (toLoadEmbeddedChilds == undefined) {\n        toLoadEmbeddedChilds = false;\n    }\n    let newModels = mongooseHelper.getAllShardModelsFromIds(model, ids);\n    let asyncCalls = [];\n    Object.keys(newModels).forEach(x => {\n        asyncCalls.push(<any>newModels[x].find(mongooseHelper.setShardCondition(model, {\n            '_id': {\n                $in: ids.map(x => Utils.getCastObjectId(model, x))\n            }\n        })).lean());\n    });\n    return Q.allSettled(asyncCalls).then(res => {\n        let result = [];\n        result = res.map(x => x.value).reduce((prev, current) => {\n            return prev.concat(current);\n        });\n        if (result.length !== ids.length) {\n            let oneId = \"\";\n            if (ids && ids.length) {\n                oneId = ids[0];\n            }\n            var error = 'findmany - numbers of items found:' + result.length + 'number of items searched: ' + ids.length + ' for model: ' + model.modelName + ' one of the id searched is: ' + oneId;\n            winstonLog.logError(`Error in findMany ${error}`);\n            return Q.reject(error);\n        }\n        if (toLoadEmbeddedChilds) {\n            let asyncCalls = [];\n            asyncCalls.push(mongooseHelper.embeddedChildren1(model, result, false));\n            //console.log(\"findMany end\" + model.modelName);\n            return Q.allSettled(asyncCalls).then(r => {\n                return result;\n            });\n        } else {\n            mongooseHelper.transformAllEmbeddedChildern1(model, result);\n            //console.log(\"findMany end\" + model.modelName);\n            return result;\n        }\n    }).catch(error => {\n        winstonLog.logError(`Error in findMany ${model.modelName}: ${error}`);\n        return Q.reject(error);\n    });\n}\n\n/**\n * find object with the given id.\n * Check if property has a relationship. If yes, then find all the child objects and return child\n * @param model\n * @param id\n * @param prop\n */\nexport function findChild(model: Mongoose.Model<any>, id, prop): Q.Promise<any> {\n    //console.log(\"findChild \" + model.modelName);\n    let newModel = mongooseHelper.getChangedModelForDynamicSchema(model, id);\n    return <any>newModel.findOne(mongooseHelper.setShardCondition(model, { '_id': id })).lean().then(res => {\n        var metas = CoreUtils.getAllRelationsForTargetInternal(getEntity(model.modelName));\n        if (Enumerable.from(metas).any(x => x.propertyKey == prop)) {\n            // create new object and add only that property for which we want to do eagerloading\n            var result = {};\n            result[prop] = res;\n            return mongooseHelper.embeddedChildren1(model, [result], true)\n                .then(r => {\n                    //console.log(\"findChild end\" + model.modelName);\n                    return result[prop];\n                });\n        }\n        //console.log(\"findChild end\" + model.modelName);\n        return res;\n    }).catch(error => {\n        winstonLog.logError(`Error in findChild ${model.modelName}: ${error}`);\n        return Q.reject(error);\n    });\n}\n\n/**\n * case 1: all new - create main item and child separately and embed if true\n * case 2: some new, some update - create main item and update/create child accordingly and embed if true\n * @param obj\n */\nexport function post(model: Mongoose.Model<any>, obj: any): Q.Promise<any> {\n    //console.log(\"post \" + model.modelName);\n    mongooseHelper.updateWriteCount();\n    let clonedObj = mongooseHelper.removeTransientProperties(model, obj);\n    clonedObj[ConstantKeys.TempId] = clonedObj._id ? clonedObj._id : Utils.autogenerateIds(model);\n    return mongooseHelper.addChildModelToParent(model, [clonedObj])\n        .then(result => {\n            //try {\n            //    mongooseHelper.autogenerateIdsForAutoFields(model, clonedObj);\n            //    //Object.assign(obj, clonedObj);\n            //} catch (ex) {\n            //    //console.log(ex);\n            //    return Q.reject(ex);\n            //}\n            if (clonedObj[ConstantKeys.TempId]) {\n                clonedObj._id = clonedObj[ConstantKeys.TempId];\n                delete clonedObj[ConstantKeys.TempId];\n            }\n            mongooseHelper.setUniqueIdFromShard(clonedObj);\n            mongooseHelper.setShardCondition(model, clonedObj);\n            // assign empty array for not defined properties\n            if (_arrayPropListSchema[model.modelName]) {\n                _arrayPropListSchema[model.modelName].forEach(prop => {\n                    if (!clonedObj[prop]) {\n                        clonedObj[prop] = [];\n                    }\n                });\n            }\n            let newModel = mongooseHelper.getNewModelFromObject(model, clonedObj);\n            return Q.nbind(newModel.create, newModel)(clonedObj).then(result => {\n                let resObj = Utils.toObject(result);\n                Object.assign(obj, resObj);\n                return mongooseHelper.embeddedChildren1(model, [obj], false)\n                    .then(r => {\n                        //console.log(\"post end \" + model.modelName);\n                        return obj;\n                    });\n\n            });\n        }).catch(error => {\n            winstonLog.logError(`Error in post ${model.modelName}: ${error}`);\n            return Q.reject(error);\n        });\n}\n/**\n * Delete object with given id. Check if, any children have deletecase=true, then delete children from master table\n * Update parent document for all the deleted objects\n * Usage - Delete object given id\n * @param model\n * @param id\n */\nexport function del(model: Mongoose.Model<any>, id: any): Q.Promise<any> {\n    //console.log(\"delete \" + model.modelName);\n    let newModel = mongooseHelper.getChangedModelForDynamicSchema(model, id);\n    return <any>newModel.findByIdAndRemove(mongooseHelper.setShardCondition(model, { '_id': id })).lean().then((response: any) => {\n        return mongooseHelper.deleteCascade(model, [response]).then(x => {\n            return mongooseHelper.deleteEmbeddedFromParent(model, EntityChange.delete, [response])\n                .then(res => {\n                    //console.log(\"delete end\" + model.modelName);\n                    return ({ delete: 'success' });\n                });\n        });\n    })\n        .catch(err => {\n            winstonLog.logError(`delete failed ${model.modelName}: ${err}`);\n            return Q.reject({ delete: 'failed', error: err });\n        });\n}\n\n/**\n * Sequetially delete the objects\n * @param modelte\n * @param ids\n */\nexport function bulkDel(model: Mongoose.Model<any>, objs: Array<any>): Q.Promise<any> {\n    //console.log(\"bulkDel \" + model.modelName);\n    var asyncCalls = [];\n    var ids = [];\n    Enumerable.from(objs).forEach(x => {\n        if (CoreUtils.isJSON(x)) {\n            ids.push(x._id);\n        }\n        else {\n            ids.push(x);\n        }\n    });\n    if (!ids || !ids.length) return Q.when([]);\n    let newModels = mongooseHelper.getAllShardModelsFromIds(model, ids);\n    Object.keys(newModels).forEach(x => {\n        asyncCalls.push(<any>newModels[x].find(mongooseHelper.setShardCondition(model, {\n            '_id': {\n                $in: ids\n            }\n        })).lean());\n    });\n    return Q.allSettled(asyncCalls).then(res => {\n        let parents = [];\n        parents = res.map(x => x.value).reduce((prev, current) => {\n            return prev.concat(current);\n        });\n        asyncCalls = [];\n        Object.keys(newModels).forEach(x => {\n            asyncCalls.push(Q.nbind(newModels[x].remove, newModels[x])(mongooseHelper.setShardCondition(model, {\n                '_id': {\n                    $in: ids\n                }\n            })));\n        });\n        return Q.allSettled(asyncCalls).then(result => {\n            return mongooseHelper.deleteCascade(model, parents).then(success => {\n                let asyncCalls = [];\n                return mongooseHelper.deleteEmbeddedFromParent(model, EntityChange.delete, parents).then(x => {\n                    //console.log(\"bulkDel end\" + model.modelName);\n                    return ({ delete: 'success' });\n                });\n            });\n        }).catch(err => {\n            winstonLog.logError(`bulkDel failed ${model.modelName}: ${err}`);\n            return Q.reject('bulkDel failed');\n        });\n    });\n}\n\n/**\n * Check if any child object need to be added, if yes, then add those child objects.\n * update the object with propertie. And then update the parent objects.\n * Usage - Update the object with given object id\n * @param model\n * @param id\n * @param obj\n */\nexport function put(model: Mongoose.Model<any>, id: any, obj: any): Q.Promise<any> {\n    //console.log(\"put \" + model.modelName);\n    // Mayank - Check with suresh how to reject the changes in optimistic locking\n    return bulkPut(model, [obj]).then((res: Array<any>) => {\n        if (res.length) {\n            //this merging is wrong, as we cannnot send transient props in API rsult.Inconsistency @Ratnesh sugestion\n            Object.assign(obj, res[0]);\n            //console.log(\"put end\" + model.modelName);\n            return obj;\n        }\n        //console.log(\"put end\" + model.modelName);\n        return [];\n    }).catch(error => {\n        winstonLog.logError(`Error in put ${model.modelName}: ${error}`);\n        return Q.reject(error);\n    });\n}\n\n/**\n * Check if any child object need to be added, if yes, then add those child objects.\n * update the object with propertie. And then update the parent objects.\n * Usage - Update the object with given object id\n * @param model\n * @param id\n * @param obj\n */\nexport function patch(model: Mongoose.Model<any>, id: any, obj): Q.Promise<any> {\n    //console.log(\"patch \" + model.modelName);\n    // need to set id in case id is not supplied in patched obj\n    obj._id = id;\n    // Mayank - Check with suresh how to reject the changes in optimistic locking\n    return bulkPatch(model, [obj]).then((res: Array<any>) => {\n        if (res.length)\n            return res[0];\n        return [];\n    }).catch(error => {\n        winstonLog.logError(`Error in patch ${model.modelName}: ${error}`);\n        return Q.reject(error);\n    });\n}\n\n/**\n * Check whether decorator is applied or not.\n * @param path\n * @param decorator\n * @param propertyKey\n */\nfunction isDecoratorApplied(model: Mongoose.Model<any>, decorator: string, propertyKey: string) {\n    var isDecoratorPresent: boolean = false;\n    let repo = repoFromModel[model.modelName];\n    var repoEntity = repo && repo.getEntityType();\n    var optimisticLock = repoEntity && MetaUtils.getMetaData(repoEntity, decorator, propertyKey);\n    if (optimisticLock) {\n        isDecoratorPresent = true;\n    }\n    return isDecoratorPresent;\n}"],"sourceRoot":"/source/"}