{"version":3,"sources":["mongoose/db.ts"],"names":[],"mappings":";AAAA,MAAO,QAAQ,WAAW,UAAU,CAAC,CAAC;AACtC,MAAY,SAAS,WAAM,eAAe,CAAC,CAAA;AAC3C,6BAAyB,uBAAuB,CAAC,CAAA;AACjD,mCAA+B,mCAAmC,CAAC,CAAA;AACnE,MAAO,CAAC,WAAW,GAAG,CAAC,CAAC;AACxB,yCAAyC;AAC9B,sBAAc,GAAQ,EAAE,CAAC;AACpC,IAAI,cAAc,GAAQ,EAAE,CAAC;AAC7B,IAAI,iBAAiB,CAAC;AAEtB,IAAI,QAAQ,GAAqC,IAAI,KAAK,EAA6B,CAAA;AAEvF;IACI,IAAI,KAAK,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC;IACnD,iBAAiB,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,mBAAmB,IAAI,EAAE,CAAC;IACxE,aAAa,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;IACxC,sBAAc,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;AAC3C,CAAC;AALe,eAAO,UAKtB,CAAA;AAED,2BAAkC,UAAe,EAAE,MAAW;IAC1D,IAAI,QAAQ,GAAG,mCAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;IACtE,EAAE,CAAC,CAAC,QAAQ,IAAI,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAC9D,CAAC;IACD,IAAI,CAAC,CAAC;QACF,MAAM,CAAC,sBAAc,CAAC,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACpD,CAAC;AACL,CAAC;AARe,yBAAiB,oBAQhC,CAAA;AAED,oBAA2B,GAA8B;IACrD,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACvB,CAAC;AAFe,kBAAU,aAEzB,CAAA;AACD,uBAA8B,GAA8B;IACxD,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,OAAO,MAAM,CAAC,GAAG,IAAI,GAAG,CAAA,CAAC,CAAC,CAAC,CAAC;AAC/D,CAAC;AAFe,qBAAa,gBAE5B,CAAA;AAED,0BAAiC,gBAAgB,EAAE,gBAAgB;IAC/D,mCAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC;IAC1E,MAAM,CAAC,aAAa,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,CAAC;AAC7D,CAAC;AAHe,wBAAgB,mBAG/B,CAAA;AAED,uBAAuB,gBAAgB,EAAE,gBAAgB;IACrD,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC;QAClB,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAEzB,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QACpC,IAAI,IAAI,GAAG,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,oBAAoB,CAAC,gBAAgB,CAAC,CAAC,CAAC;QAC/F,cAAc,CAAC,gBAAgB,CAAC,GAAG,IAAI,CAAC;QACxC,MAAM,CAAC,eAAe,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;IACnD,CAAC;IACD,IAAI,CAAC,CAAC;QACF,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;AACL,CAAC;AAED,MAAM,iBAAiB,GAAG,CAAC,KAAK,EAAE,OAAO;IACrC,IAAI,CAAC;QACD,EAAE,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YAC9B,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO;gBACrB,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YACjC,CAAC,CAAC,CAAA;QACN,CAAC;IACL,CACA;IAAA,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC;AAEF,yBAAyB,IAAI,EAAE,gBAAgB;IAC3C,IAAI,KAAK,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;IACtB,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE;QAClB,uBAAU,CAAC,OAAO,CAAC,sCAAsC,gBAAgB,EAAE,CAAC,CAAC;IACjF,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,EAAE,CAAC,WAAW,EAAE;QACjB,uBAAU,CAAC,OAAO,CAAC,uCAAuC,gBAAgB,EAAE,CAAC,CAAC;QAC9E,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACpB,iBAAiB,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG;QACjB,uBAAU,CAAC,OAAO,CAAC,kCAAkC,gBAAgB,eAAe,GAAG,EAAE,CAAC,CAAC;QAC3F,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACrB,iBAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,EAAE,CAAC,cAAc,EAAE;QACpB,uBAAU,CAAC,OAAO,CAAC,kCAAkC,gBAAgB,EAAE,CAAC,CAAC;QACzE,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACrB,iBAAiB,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC;AACzB,CAAC;AAED,8BAA8B,gBAAqB;IAG/C,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACpB,gBAAgB,GAAG,EAAE,CAAC;IAC1B,CAAC;IACD,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC9B,gBAAgB,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;IACpC,CAAC;IACD,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC/B,gBAAgB,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;IACrC,CAAC;IACD,gBAAgB,CAAC,QAAQ,CAAC,CAAC,gBAAgB,CAAC,GAAG,IAAI,CAAC;IACpD,gBAAgB,CAAC,SAAS,CAAC,CAAC,gBAAgB,CAAC,GAAG,IAAI,CAAC;IACrD,MAAM,CAAC,gBAAgB,CAAC;AAC5B,CAAC","file":"mongoose/db.js","sourcesContent":["import Mongoose = require(\"mongoose\");\nimport * as CoreUtils from '../core/utils';\nimport {winstonLog} from '../logging/winstonLog';\nimport {PrincipalContext} from '../security/auth/principalContext';\nimport Q = require('q');\n// use main connection for pooling source\nexport var mainConnection: any = {};\nvar allConnections: any = {};\nvar connectionOptions;\nimport EventEmitter = require('events');\nvar emitters: Array<EventEmitter.EventEmitter> = new Array<EventEmitter.EventEmitter>()\n\nexport function connect() {\n    let dbLoc = CoreUtils.config().Config.DbConnection;\n    connectionOptions = CoreUtils.config().Config.DbConnectionOptions || {};\n    getConnection(dbLoc, connectionOptions);\n    mainConnection = allConnections[dbLoc];\n}\n\nexport function getDbSpecifcModel(schemaName: any, schema: any): any {\n    var database = PrincipalContext.get(CoreUtils.resources.userDatabase);\n    if (database && allConnections[database]) {\n        return allConnections[database].model(schemaName, schema);\n    }\n    else {\n        return mainConnection.model(schemaName, schema);\n    }\n}\n\nexport function addEmitter(msg: EventEmitter.EventEmitter) {\n    emitters.push(msg);\n}\nexport function removeEmitter(msg: EventEmitter.EventEmitter) {\n    emitters = emitters.filter((mem) => { return mem != msg });\n}\n\nexport function updateConnection(connectionString, connectionOption): Q.IPromise<any> {\n    PrincipalContext.save(CoreUtils.resources.userDatabase, connectionString);\n    return getConnection(connectionString, connectionOption);\n}\n\nfunction getConnection(connectionString, connectionOption): Q.IPromise<any> {\n    if (!connectionString)\n        return Q.when(false);\n\n    if (!allConnections[connectionString]) {\n        var conn = Mongoose.createConnection(connectionString, defaultDomainOptions(connectionOption));\n        allConnections[connectionString] = conn;\n        return connectDataBase(conn, connectionString);\n    }\n    else {\n        return Q.when(true);\n    }\n}\n\nconst emitMesseageToALL = (event, message) => {\n    try {\n        if (emitters && emitters.length) {\n            emitters.forEach((emitter) => {\n                emitter.emit(event, message);\n            })\n        }\n    }\n    catch (ex) { }\n};\n\nfunction connectDataBase(conn, connectionString): Q.IPromise<any> {\n    let defer = Q.defer();\n    conn.on('connecting', () => {\n        winstonLog.logInfo(`trying to establish connection for ${connectionString}`);\n    });\n\n    conn.on('connected', () => {\n        winstonLog.logInfo(`connection established successfully ${connectionString}`);\n        defer.resolve(true);\n        emitMesseageToALL('databaseconnected', conn);\n    });\n\n    conn.on('error', (err) => {\n        winstonLog.logInfo(`connection to mongo failed for ${connectionString} with error ${err}`);\n        defer.resolve(false);\n        emitMesseageToALL('error', conn);\n    });\n\n    conn.on('disconnected', () => {\n        winstonLog.logInfo(`connection closed successfully ${connectionString}`);\n        defer.resolve(false);\n        emitMesseageToALL('disconnected', conn);\n    });\n    return defer.promise;\n}\n\nfunction defaultDomainOptions(connectionOption: any) {\n\n\n    if (!connectionOption) {\n        connectionOption = {};\n    }\n    if (!connectionOption['server']) {\n        connectionOption['server'] = {};\n    }\n    if (!connectionOption['replset']) {\n        connectionOption['replset'] = {};\n    }\n    connectionOption['server']['domainsEnabled'] = true;\n    connectionOption['replset']['domainsEnabled'] = true;\n    return connectionOption;\n}"],"sourceRoot":"/source/"}