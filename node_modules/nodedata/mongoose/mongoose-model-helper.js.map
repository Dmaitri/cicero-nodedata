{"version":3,"sources":["mongoose/mongoose-model-helper.ts"],"names":[],"mappings":"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","file":"mongoose/mongoose-model-helper.js","sourcesContent":["import Mongoose = require(\"mongoose\");\nimport Q = require('q');\nimport { EntityChange } from '../core/enums/entity-change';\nimport { MetaUtils } from \"../core/metadata/utils\";\nimport * as CoreUtils from \"../core/utils\";\nimport * as Utils from \"./utils\";\nimport { Decorators } from '../core/constants/decorators';\nimport { DecoratorType } from '../core/enums/decorator-type';\nimport { MetaData } from '../core/metadata/metadata';\nimport { IAssociationParams } from '../core/decorators/interfaces';\nimport { IFieldParams, IDocumentParams } from './decorators/interfaces';\nimport { GetRepositoryForName, DynamicRepository } from '../core/dynamic/dynamic-repository';\nimport { getEntity, getModel, repoFromModel } from '../core/dynamic/model-entity';\nimport * as Enumerable from 'linq';\nimport { winstonLog } from '../logging/winstonLog';\nimport * as mongooseModel from './mongoose-model';\nimport {PrincipalContext} from '../security/auth/principalContext';\nimport { ConstantKeys } from '../core/constants';\nimport { StorageType } from \"../core/enums/index\";\nimport {ShardInfo} from '../core/interfaces/shard-Info';\nimport {getDbSpecifcModel} from './db';\nimport {InstanceService} from '../core/services/instance-service';\n\n/**\n * finds all the parent and update them. It is called when bulk objects are updated\n * @param model\n * @param objs\n */\nexport function updateParent(model: Mongoose.Model<any>, objs: Array<any>) {\n    var allReferencingEntities = CoreUtils.getAllRelationsForTarget(getEntity(model.modelName));\n    var asyncCalls = [];\n    Enumerable.from(allReferencingEntities)\n        .forEach((x: MetaData) => {\n            var param = <IAssociationParams>x.params;\n            if (param.embedded) {\n                var meta = MetaUtils.getMetaData(x.target, Decorators.DOCUMENT);\n                var targetModelMeta = meta[0];\n                var repoName = (<IDocumentParams>targetModelMeta.params).name;\n                var model = Utils.getCurrentDBModel(repoName);\n                asyncCalls.push(updateParentDocument1(model, x, objs));\n            }\n        });\n    return Q.allSettled(asyncCalls);\n}\n\n/**\n * This removes all the transient properties.\n * @param model\n * @param obj\n */\nexport function removeTransientProperties(model: Mongoose.Model<any>, obj: any): any {\n    var clonedObj = {};\n    Object.assign(clonedObj, obj);\n    var transientProps = Enumerable.from(MetaUtils.getMetaData(getEntity(model.modelName))).where((ele: MetaData, idx) => {\n        if (ele.decorator === Decorators.TRANSIENT) {\n            return true;\n        }\n        return false;\n    }).forEach(element => {\n        delete clonedObj[element.propertyKey];\n    });\n    return clonedObj;\n}\n\nexport function removeGivenTransientProperties(model: Mongoose.Model<any>, obj: any, transientProps: Array<MetaData>): any {\n    transientProps.forEach(element => {\n        delete obj[element.propertyKey];\n    });\n    return obj;\n}\n\nexport function getAllTransientProps(model: Mongoose.Model<any>) {\n    var transientProps = Enumerable.from(MetaUtils.getMetaData(getEntity(model.modelName))).where((ele: MetaData, idx) => {\n        if (ele.decorator === Decorators.TRANSIENT) {\n            return true;\n        }\n        return false;\n    }).toArray();\n\n    return transientProps;\n}\n\n\n//assuming relName is type of array already\nexport function transformEmbeddedChildern1(value: any, meta: MetaData) {\n\n    if (!isJsonMapEnabled(meta.params) || !meta.propertyType.isArray) {\n        return;\n    }\n    var relName = meta.propertyKey;\n    // If already array then retun;\n    if (!value || value[relName] instanceof Array)\n        return;\n\n    if (!value[relName]) {\n        value[relName] = [];\n        return;\n    }\n\n    //console.log(\"transform_overHead_start - \", meta.propertyKey);\n    let transformedData = [];\n    for (let key in value[relName]) {\n        transformedData.push(value[relName][key]);\n    }\n    // delete value[relName];\n    value[relName] = transformedData;\n    //console.log(\"transform_overHead_start - \", meta.propertyKey);\n}\n\nexport function transformAllEmbeddedChildern1(model: any, objs: Array<any>) {\n    getEmbeddedPropWithFlat(model).forEach(x => {\n        objs.forEach(object => {\n            transformEmbeddedChildern1(object, x);\n        });\n    });\n}\n\nexport function getEmbeddedPropWithFlat(model: any) {\n    let allReferencingEntities = CoreUtils.getAllRelationsForTargetInternal(getEntity(model.modelName));\n    return allReferencingEntities.filter(x => x.params && x.params.embedded && isJsonMapEnabled(x.params)).map(x => x);\n}\n\nexport function embeddedChildren1(model: Mongoose.Model<any>, values: Array<any>, force: boolean, donotLoadChilds?: boolean) {\n    if (!model)\n        return;\n\n    if (donotLoadChilds) {\n        return Q.when(values);\n    }\n\n    var asyncCalls = [];\n    var metas = CoreUtils.getAllRelationsForTargetInternal(getEntity(model.modelName));\n\n    Enumerable.from(metas).forEach(x => {\n        var m: MetaData = x;\n        var param: IAssociationParams = <IAssociationParams>m.params;\n        //if (param.embedded)\n        //    return;\n\n        if (force || param.eagerLoading || param.embedded) {\n            var relModel = Utils.getCurrentDBModel(param.rel);\n            // find model repo and findMany from repo instead of calling mongoose model directly\n            let repo: DynamicRepository = repoFromModel[relModel.modelName];\n            var ids = [];\n            values.forEach(val => {\n                if (!val) {\n                    return;\n                }\n\n                if (m.propertyType.isArray) {\n                    transformEmbeddedChildern1(val, m);\n                }\n\n                if (!val[m.propertyKey] || (val[m.propertyKey] instanceof Array && !val[m.propertyKey].length))\n                    return;\n\n                if (m.propertyType.isArray) {\n                    ids = ids.concat(val[m.propertyKey]);\n                }\n                else {\n                    ids.push(val[m.propertyKey]);\n                }\n            });\n            if (ids.length == 0)\n                return;\n            asyncCalls.push(repo.findMany(ids).then((result: Array<any>) => {\n                let res = {}\n                result.forEach(x => res[x._id] = x);\n                values.forEach(val => {\n                    if (!val[m.propertyKey])\n                        return;\n\n                    if (m.propertyType.isArray) {\n                        var newVal = [];\n                        if (param.embedded) {\n                            // select only those objects which have been returned\n                            //newVal = Enumerable.from(val[m.propertyKey]).where((x:any) => res[x._id]).toArray();\n                            val[m.propertyKey].forEach(x => {\n                                if (res[x._id]) {\n                                    newVal.push(res[x._id]);\n                                }\n                            });\n                        }\n                        else {\n                            val[m.propertyKey].forEach(x => {\n                                if (res[x]) {\n                                    newVal.push(res[x]);\n                                }\n                            });\n                        }\n                        val[m.propertyKey] = newVal;\n                    }\n                    else {\n                        val[m.propertyKey] = param.embedded ? res[val[m.propertyKey]._id] : res[val[m.propertyKey]];\n                    }\n                });\n            }));\n        }\n    });\n\n    if (asyncCalls.length == 0)\n        return Q.when(values);\n\n    return Q.allSettled(asyncCalls).then(res => {\n        return values;\n    });\n}\n\n/**\n * This method used to get actual child object from relation where storage type is jsonmap.\n * This is used in cascadeDelete.\n * @param props \n * @param isJsonMap \n */\nfunction getListOfObjectsTobeDeleted(props, isJsonMap: boolean) {\n    let listOfAllSameObjects = [];\n    if (CoreUtils.isJSON(props) && isJsonMap) {\n        for (let i = 0, len = props.length; i < len; i++) {\n            for (let key in props[i]) {\n                listOfAllSameObjects.push(props[i][key]);\n            }\n        }\n    } else {\n        listOfAllSameObjects = props.reduce((prev, current) => {\n            return prev.concat(current);\n        });\n    }\n    return listOfAllSameObjects;\n}\n/**\n * It find all children with deleteCascade = true, and delete those children.\n * Recursively, it finds all the relation with deleteCascade = true and delete them.\n * On deleting these objects, it will not update other parent doc because it is expected that these objects should not have any other parent.\n * @param model\n * @param updateObj\n */\nexport function deleteCascade(model: Mongoose.Model<any>, updateObj: Array<any>) {\n    var relations = CoreUtils.getAllRelationsForTargetInternal(getEntity(model.modelName));\n    var relationToDelete = Enumerable.from(relations).where(x => x.params.deleteCascade).toArray();\n    var ids = {};\n    var models = {};\n\n    relationToDelete.forEach(res => {\n        var x = <IAssociationParams>res.params;\n        let isJsonMap = isJsonMapEnabled(x);\n        var props = [];\n        for (let i = 0; i < updateObj.length; i++) {\n            if (updateObj[i] && updateObj[i][res.propertyKey]) {\n                props.push(updateObj[i][res.propertyKey]);\n            }\n        }\n        if (!props || !props.length)\n            return;\n        ids[x.rel] = ids[x.rel] || [];\n        if (x.embedded) {\n            if (res.propertyType.isArray) {\n                let listOfAllSameObjects = getListOfObjectsTobeDeleted(props, isJsonMap);\n                let listOfIds = listOfAllSameObjects.map(x => x._id);\n                ids[x.rel] = ids[x.rel].concat(listOfIds);\n            }\n            else {\n                let listOfIds = props.map(x => x._id);\n                ids[x.rel] = ids[x.rel].concat(listOfIds);\n            }\n        }\n        else {\n            if (res.propertyType.isArray) {\n                let listOfAllSameIds = getListOfObjectsTobeDeleted(props, isJsonMap);\n                ids[x.rel] = ids[x.rel].concat(listOfAllSameIds);\n            }\n            else {\n                ids[x.rel] = ids[x.rel].concat(props);\n            }\n        }\n        ids[x.rel] = Enumerable.from(ids[x.rel]).select(x => x.toString()).toArray();\n    });\n\n    var asyncCalls = [];\n    for (var i in ids) {\n        if (ids[i].length > 0) {\n            models[i] = Utils.getCurrentDBModel(i);\n            asyncCalls.push(bulkDelete(models[i], ids[i]));\n        }\n    }\n\n    return Q.allSettled(asyncCalls);\n}\n\n/**\n * It find all the parent document and then update them. This updation will only happen if that property have chaged\n * @param model\n * @param entityChange\n * @param obj\n * @param changedProps\n */\nexport function deleteEmbeddedFromParent(model: Mongoose.Model<any>, entityChange: EntityChange, obj: Array<any>) {\n    var allReferencingEntities = CoreUtils.getAllRelationsForTarget(getEntity(model.modelName));\n    var asyncCalls = [];\n    Enumerable.from(allReferencingEntities)\n        .forEach((x: MetaData) => {\n            var param = <IAssociationParams>x.params;\n            if (entityChange == EntityChange.delete) {\n                let isJsonMap = isJsonMapEnabled(param);\n                //var newObj = getFilteredValue(obj, param.properties);\n                asyncCalls.push(updateEntity(x.target, x.propertyKey, x.propertyType.isArray, obj, param.embedded, entityChange, model, isJsonMap));\n            }\n        });\n    return Q.allSettled(asyncCalls);\n}\n/**\n * Add child model only if relational property have set embedded to true\n * @param model\n * @param obj\n */\nexport function addChildModelToParent(model: Mongoose.Model<any>, objects: Array<any>) {\n    var asyncCalls = [];\n    var metaArr = CoreUtils.getAllRelationsForTargetInternal(getEntity(model.modelName));\n    for (var m in metaArr) {\n        var meta: MetaData = <any>metaArr[m];\n        asyncCalls.push(embedChild(objects, meta.propertyKey, meta, model.modelName));\n    }\n\n    return Q.allSettled(asyncCalls).then(x => {\n        return objects;\n        //return isDataValid(model, obj, id).then(x => {\n        //    return obj;\n        //});\n    });\n}\n\nexport function updateWriteCount() {\n    //if (PrincipalContext) {\n    //    var count = PrincipalContext.get('write');\n    //    PrincipalContext.save('write', ++count);\n    //}\n\n}\n\n//function updateParentDocumentEasy(model: Mongoose.Model<any>, meta: MetaData, objs: Array<any>) {\n\n//        //var queryCond = {};\n//        //var ids = Enumerable.from(objs).select(x => x['_id']).toArray();\n//        //queryCond[meta.propertyKey + '.parentId'] = { $in: ids };\n\n//       // updateWriteCount();\n//        //console.log(\"updateParentDocument_start \" + model.modelName );\n//        let parent = {};\n//        // parent._id = objs[0].parentId;\n//        parent[meta.propertyKey] = {};\n//        objs.forEach((child) => {\n//            parent[meta.propertyKey][child._id] = child;\n//        })\n\n//        var bulk = model.collection.initializeUnorderedBulkOp();\n\n//        var objectId = Utils.castToMongooseType(objs[0].parentId, Mongoose.Types.ObjectId);\n\n\n//        bulk.find({ _id: objectId }).update({ $set: parent });\n\n//        return Q.nbind(bulk.execute, bulk)().then(updatedParents => {\n//            // return mongooseModel.put(model, parent._id, parent).then((updatedParents) => {\n//            //console.log(\"updateParentDocument_end \" + model.modelName );\n//            return updatedParents;\n//        });\n\n//    }\n\n//function updateParentWithoutParentId(model: Mongoose.Model<any>, meta: MetaData, objs: Array<any>) {\n//    var queryCond = {};\n//    var ids = Enumerable.from(objs).select(x => x['_id']).toArray();\n//    queryCond[meta.propertyKey + '._id'] = { $in: ids };\n//    //console.log(\"updateParentDocument find start\" + model.modelName + \" count \" + ids.length);\n//    updateWriteCount();\n//    return Q.nbind(model.find, model)(queryCond, { '_id': 1 }).then((result: Array<any>) => {\n//        //console.log(\"updateParentDocument find end\" + model.modelName + \" count \" + ids.length);\n//        if (!result) {\n//            return Q.resolve([]);\n//        }\n//        if (result && !result.length) {\n//            return Q.resolve(result);\n//        }\n//        var parents: Array<any> = Utils.toObject(result);\n//        var parentIds = parents.map(x => x._id);\n//        var bulk = model.collection.initializeUnorderedBulkOp();\n//        // classic for loop used gives high performanance\n//        for (var i = 0; i < objs.length; i++) {\n//            var queryFindCond = {};\n//            var updateSet = {};\n//            var objectId = Utils.castToMongooseType(objs[i]._id, Mongoose.Types.ObjectId);\n//            queryFindCond['_id'] = { $in: parentIds };\n//            let isJsonMap = isJsonMapEnabled(meta.params);\n//            if (isJsonMap) {\n//                updateSet[meta.propertyKey + '.' + objs[i]._id.toString()] = embedSelectedPropertiesOnly(meta.params, [objs[i]])[0];\n//            }\n//            else {\n//                let updateMongoOperator = Utils.getMongoUpdatOperatorForRelation(meta);\n//                updateSet[meta.propertyKey + updateMongoOperator] = embedSelectedPropertiesOnly(meta.params, [objs[i]])[0];\n//            }\n//            bulk.find(queryFindCond).update({ $set: updateSet });\n//        }\n//        //console.log(\"updateParentDocument bulk execute start\" + model.modelName + \" count \" + ids.length);\n//        return Q.nbind(bulk.execute, bulk)().then(result => {\n//            return parentIds;\n//        });\n//    });\n//}\n\n\nfunction updateParentWithParentId(model: Mongoose.Model<any>, meta: MetaData, objs: Array<any>) {\n    let parents = {};\n    let isJsonMap = isJsonMapEnabled(meta.params);\n    let parentObjectId;\n    //console.log(\"updateParentWithParentId start\" + model.modelName);\n    for (var i = 0; i < objs.length; i++) {\n        let parentId = objs[i][ConstantKeys.parent][ConstantKeys.parentId];\n        let property = objs[i][ConstantKeys.parent][ConstantKeys.property].toString();\n        // @anuj: below code commented casue it is not updating if same child master object is referenced more than once in parent with different properties name\n        //if (property != meta.propertyKey)\n        //    continue;\n\n        parents[parentId] = parents[parentId] ? parents[parentId] : (isJsonMap ? { '_id': parentId } : []);\n        // check meta then update with array or keyvalue\n        if (isJsonMap) {\n            parents[parentId][meta.propertyKey + '.' + objs[i]._id.toString()] = embedSelectedPropertiesOnly(meta.params, [objs[i]])[0];\n        }\n        else {\n            var queryFindCond = {};\n            queryFindCond['_id'] = Utils.getCastObjectId(model, parentId);\n            queryFindCond[meta.propertyKey + '._id'] = objs[i]._id;\n            let updateMongoOperator = Utils.getMongoUpdatOperatorForRelation(meta);\n            let updateSet = {};\n            updateSet[meta.propertyKey + updateMongoOperator] = embedSelectedPropertiesOnly(meta.params, [objs[i]])[0];\n            parents[parentId].push({ cond: queryFindCond, updateSet: updateSet });\n        }\n    }\n\n    if (Object.keys(parents).length == 0)\n        return Q.when([]);\n\n    // //console.log(\"parents\", parents);\n    //it has to be group by\n    let newModel = getChangedModelForDynamicSchema(model, parentObjectId);\n    var bulk = newModel.collection.initializeUnorderedBulkOp();\n    Object.keys(parents).forEach(x => {\n        if (isJsonMap) {\n            var queryFindCond = {};\n            queryFindCond['_id'] = Utils.getCastObjectId(model, parents[x]['_id']);\n            bulk.find(setShardCondition(model, queryFindCond)).update({ $set: parents[x] });\n        }\n        else {\n            parents[x].forEach(item => {\n                bulk.find(setShardCondition(model, item.cond)).update({ $set: item.updateSet });\n            });\n        }\n    });\n    return Q.nbind(bulk.execute, bulk)().then(result => {\n        //console.log(JSON.stringify(result));\n        //console.log(\"updateParentWithParentId end\" + model.modelName);\n        return Object.keys(parents);\n    });\n}\n\nfunction updateParentDocument1(model: Mongoose.Model<any>, meta: MetaData, objects: Array<any>) {\n    let noParentId = Enumerable.from(objects).where(x => !x[ConstantKeys.parent]).toArray();\n    let withParent = Enumerable.from(objects).where(x => x[ConstantKeys.parent]).toArray();\n    let prom;\n    let asyncCalls = [];\n    if (noParentId && noParentId.length) {\n        asyncCalls.push(updateParentDocument(model, meta, noParentId));\n    }\n    if (withParent && withParent.length) {\n        asyncCalls.push(updateParentWithParentId(model, meta, withParent));\n    }\n    return Q.allSettled(asyncCalls).then(allresult => {\n        let parentIds = Enumerable.from(allresult.map(x => x.value)).selectMany(x => x).toArray();\n        var allReferencingEntities = CoreUtils.getAllRelationsForTarget(getEntity(model.modelName));\n        var asyncCalls = [];\n        var isEmbedded = Enumerable.from(allReferencingEntities).any(x => x.params && x.params.embedded);\n        if (isEmbedded && parentIds.length > 0) {\n            //console.log(\"updateParentDocument1 isEmbedded\" + model.modelName);\n            return mongooseModel.findMany(model, parentIds).then((objects: Array<any>) => {\n                //console.log(\"updateParentDocument1 findMany end\" + model.modelName);\n                return updateParent(model, objects).then(res => {\n                    //console.log(\"updateParentDocument1 updateParent end\" + model.modelName);\n                    return objects;\n                });\n            });\n        }\n        return objects;\n    });\n}\n\n\n/**\n * current implemnetation only update embeded for one level parent-child relationship\n * e.g- only supports teacher and student relation ship not principle->teacher->student embeded object  \n * @param model\n * @param meta\n * @param objs\n */\nfunction updateParentDocument(model: Mongoose.Model<any>, meta: MetaData, objs: Array<any>) {\n    var queryCond = {};\n    var ids = Enumerable.from(objs).select(x => x['_id']).toArray();\n    queryCond[meta.propertyKey + '._id'] = { $in: ids };\n    //console.log(\"updateParentDocument find start\" + model.modelName + \" count \" + ids.length);\n    updateWriteCount();\n    //ToDo - For dynamic-schema (vertical sharding) , this will not work, it should try to search from all the shards\n    return Q.nbind(model.find, model)(setShardCondition(model, queryCond), { '_id': 1 }).then((result: Array<any>) => {\n        //console.log(\"updateParentDocument find end\" + model.modelName + \" count \" + ids.length);\n        if (!result) {\n            return Q.resolve([]);\n        }\n        if (result && !result.length) {\n            return Q.resolve(result);\n        }\n        var parents: Array<any> = Utils.toObject(result);\n        var parentIds = parents.map(x => x._id);\n        let allBulkExecute = {}; \n        // classic for loop used gives high performanance\n        for (var i = 0; i < objs.length; i++) {\n            var queryFindCond = {};\n            var updateSet = {};\n            let newModel = getNewModelFromObject(model, objs[i]);\n            var objectId = Utils.getCastObjectId(model, objs[i]._id);\n            if (!allBulkExecute[newModel.modelName]) {\n                allBulkExecute[newModel.modelName] = newModel.collection.initializeUnorderedBulkOp();\n            }\n            let bulk = allBulkExecute[newModel.modelName];\n\n            queryFindCond['_id'] = { $in: parentIds };\n            queryFindCond[meta.propertyKey + '._id'] = objectId;\n            let updateMongoOperator = Utils.getMongoUpdatOperatorForRelation(meta);\n            updateSet[meta.propertyKey + updateMongoOperator] = embedSelectedPropertiesOnly(meta.params, [objs[i]])[0];\n            bulk.find(setShardCondition(model, queryFindCond)).update({ $set: updateSet });\n        }\n        //console.log(\"updateParentDocument bulk execute start\" + model.modelName + \" count \" + ids.length);\n        let asyncCalls = [];\n        Object.keys(allBulkExecute).forEach(x => {\n            let bulk = allBulkExecute[x];\n            asyncCalls.push(Q.nbind(bulk.execute, bulk)());\n        });\n        return Q.allSettled(asyncCalls).then(result => {\n            //console.log(\"updateParentDocument bulk execute start\" + model.modelName + \" count \" + ids.length);\n            var allReferencingEntities = CoreUtils.getAllRelationsForTarget(getEntity(model.modelName));\n            var asyncCalls = [];\n            var isEmbedded = Enumerable.from(allReferencingEntities).any(x => x.params && x.params.embedded);\n            if (isEmbedded) {\n                //console.log(\"updateParentDocument findmany start\" + model.modelName + \" count \" + ids.length);\n                return mongooseModel.findMany(model, parentIds).then((objects: Array<any>) => {\n                    //console.log(\"updateParentDocument findmany end\" + model.modelName + \" count \" + ids.length);\n                    //console.log(\"updateParentDocument updateParent start\" + model.modelName + \" count \" + ids.length);\n                    return updateParent(model, objects).then(res => {\n                        //console.log(\"updateParentDocument updateParent end\" + model.modelName + \" count \" + ids.length);\n                        return objects;\n                    });\n                });\n            }\n            return objs;\n        })\n    })\n        .catch(error => {\n            winstonLog.logError(`Error in updateParentDocument ${error}`);\n            return Q.reject(error);\n        });\n}\n\nfunction bulkDelete(model: Mongoose.Model<any>, ids: any) {\n    if (!ids || !ids.length) return Q.when([]);\n    return mongooseModel.findMany(model, ids).then((data: Array<any>) => {\n        let newModels = getAllShardModelsFromIds(model, ids);\n        let asyncCalls = [];\n        Object.keys(newModels).forEach(x => {\n            asyncCalls.push(Q.nbind(newModels[x].remove, newModels[x])(setShardCondition(model, {\n                '_id': {\n                    $in: ids\n                }\n            })));\n        });\n        return Q.allSettled(asyncCalls).then(x => {\n            asyncCalls = [];\n            // will not call update embedded parent because these children should not exist without parent\n            asyncCalls.push(deleteCascade(model, data));\n            return Q.allSettled(asyncCalls);\n        });\n    });\n}\n\n/**\n * Get unset query for onetomany relationship where storegaType is json map.\n * This is used while updating parent after child deleted.\n * @param prop \n * @param updateObjs \n */\nfunction getUnsetQueryForJsonMapStructure(prop, updateObjs) {\n    let setCondition = {};\n    setCondition['$unset'] = {};\n    for (let i = 0, len = updateObjs.length; i < len; i++) {\n        setCondition['$unset'][prop + \".\" + updateObjs[i][\"_id\"].toString()] = \"\";\n    }\n    return setCondition;\n}\nfunction patchAllEmbedded(model: Mongoose.Model<any>, prop: string, updateObjs: Array<any>, entityChange: EntityChange, isEmbedded: boolean, childModel: Mongoose.Model<any>, isArray?: boolean, isJsonMap?: boolean): Q.Promise<any> {\n    var searchQueryCond = {};\n    var pullQuery = {};\n    pullQuery[prop] = {};\n    var changesObjIds = {\n        $in: updateObjs.map(x => x._id)\n    };\n    var parentIds = [];\n    updateObjs.forEach(x => {\n        if (x.parent && x.parent.parentId) {\n            parentIds.push(x.parent.parentId);\n        }\n    });\n    var isParentIdsPresent = parentIds && parentIds.length;\n    isEmbedded ? searchQueryCond[prop + '._id'] = changesObjIds : searchQueryCond[prop] = changesObjIds;\n    isEmbedded ? pullQuery[prop]['_id'] = changesObjIds : pullQuery[prop] = changesObjIds;\n    // If parent ids are available then no need to call parent from db.\n    //ToDo - For dynamic-schema (vertical sharding) , this will not work, it should try to search from all the shards\n    var parentCallPromise = isParentIdsPresent ? Q.resolve(true) : Q.nbind(model.find, model)(setShardCondition(model, searchQueryCond), { '_id': 1 });\n    return parentCallPromise.then((parents: any) => {\n        if (!isParentIdsPresent) {\n            parents = Utils.toObject(parents);\n            if (!parents || !parents.length) return Q.when(true);\n            parentIds = parents.map(x => x._id);\n        }\n        //console.log(prop);\n        let setCondition = {};\n        setCondition['$unset'] = {};\n        setCondition['$unset'][prop] = \"\";\n        searchQueryCond['_id'] = { $in: parentIds };\n        let setConditionForArr = (isArray && isJsonMap) ? getUnsetQueryForJsonMapStructure(prop, updateObjs) : { $pull: pullQuery };\n        let newModel = getChangedModelForDynamicSchema(model, parentIds[0]);\n        var prom = isArray ? Q.nbind(newModel.update, newModel)(setShardCondition(model, { _id: { $in: parentIds } }), setConditionForArr, { multi: true }) : Q.nbind(newModel.update, newModel)(setShardCondition(model, searchQueryCond), setCondition, { multi: true });\n        return prom.then(res => {\n            var allReferencingEntities = CoreUtils.getAllRelationsForTarget(getEntity(model.modelName));\n            var asyncCalls = [];\n            var isEmbedded = Enumerable.from(allReferencingEntities).any(x => x.params && x.params.embedded);\n            if (isEmbedded) {\n                // fetch all the parent and call update parent\n                return Q.nbind(newModel.find, newModel)(setShardCondition(model, {\n                    '_id': {\n                        $in: parentIds\n                    }\n                })).then((result: any) => {\n                    return updateParent(model, Utils.toObject(result));\n                });\n            }\n            else {\n                return res;\n            }\n        })\n    }).catch(error => {\n        winstonLog.logError(`Error in patchAllEmbedded ${error}`);\n        return Q.reject(error);\n    });\n}\n\n// updateEmbeddedParent(model: Mongoose.Model<any>, queryCond, result, property: string) {\n//    if (result['nModified'] == 0)\n//        return;\n\n//    var allReferencingEntities = CoreUtils.getAllRelationsForTarget(getEntity(model.modelName));\n\n//    var first = Enumerable.from(allReferencingEntities).where(x => (<IAssociationParams>x.params).embedded).firstOrDefault();\n//    if (!first)\n//        return;\n\n//    winstonLog.logInfo(`updateEmbeddedParent query is ${queryCond}`);\n//    // find the objects and then update these objects\n//    return Q.nbind(model.find, model)(queryCond)\n//        .then(updated => {\n//            // Now update affected documents in embedded records\n//            var asyncCalls = [];\n//            Enumerable.from(updated).forEach(x => {\n//                asyncCalls.push(updateEmbeddedOnEntityChange(model, EntityChange.patch, x, [property]));\n//            });\n//            return Q.all(asyncCalls);\n\n//        }).catch(error => {\n//            winstonLog.logError(`Error in updateEmbeddedParent ${error}`);\n//            return Q.reject(error);\n//        });\n//}\n\n//function isDataValid(model: Mongoose.Model<any>, val: any, id: any) {\n//    var asyncCalls = [];\n//    var ret: boolean = true;\n//    var metas = CoreUtils.getAllRelationsForTargetInternal(getEntity(model.modelName));\n//    Enumerable.from(metas).forEach(x => {\n//        var m: MetaData = x;\n//        if (val[m.propertyKey]) {\n//            asyncCalls.push(isRelationPropertyValid(model, m, val[m.propertyKey], id).then(res => {\n//                if (res != undefined && !res) {\n//                    let error: any = new Error();\n//                    error.propertyKey = m.propertyKey;\n//                    throw error;\n//                }\n//            }));\n//        }\n//    });\n//    return Q.all(asyncCalls).catch(f => {\n//        let errorMessage = 'Invalid value. Adding to property ' + \"'\" + f.propertyKey + \"'\" + ' will break the relation in model: ' + model.modelName;\n//        winstonLog.logError(errorMessage);\n//        throw errorMessage;\n//    });\n//}\n\n//function isRelationPropertyValid(model: Mongoose.Model<any>, metadata: MetaData, val: any, id: any) {\n//    switch (metadata.decorator) {\n//        case Decorators.ONETOMANY: // for array of objects\n//            if (metadata.propertyType.isArray) {\n//                if (Array.isArray(val) && val.length > 0) {\n//                    var queryCond = [];\n//                    var params = <IAssociationParams>metadata.params;\n//                    Enumerable.from(val).forEach(x => {\n//                        var con = {};\n//                        if (params.embedded) {\n//                            con[metadata.propertyKey + '._id'] = x['_id'];\n//                        }\n//                        else {\n//                            con[metadata.propertyKey] = { $in: [x] };\n//                        }\n//                        queryCond.push(con);\n//                    });\n//                    return Q.nbind(model.find, model)(getQueryCondition(id, queryCond))\n//                        .then(result => {\n//                            if (Array.isArray(result) && result.length > 0)\n//                                return false;\n//                            else\n//                                return true;\n//                        }).catch(error => {\n//                            winstonLog.logError(`Error in isRelationPropertyValid ${error}`);\n//                            return Q.reject(error);\n//                        });\n//                }\n//            }\n//            break;\n//        case Decorators.ONETOONE: // for single object\n//            if (!metadata.propertyType.isArray) {\n//                if (!Array.isArray(val)) {\n//                    var queryCond = [];\n//                    var con = {};\n//                    var params = <IAssociationParams>metadata.params;\n//                    if (params.embedded) {\n//                        con[metadata.propertyKey + '._id'] = val['_id'];\n//                    }\n//                    else {\n//                        con[metadata.propertyKey] = { $in: [val] };\n//                    }\n//                    queryCond.push(con);\n\n//                    return Q.nbind(model.find, model)(getQueryCondition(id, queryCond))\n//                        .then(result => {\n//                            if (Array.isArray(result) && result.length > 0) {\n//                                return false;\n//                            }\n//                        }).catch(error => {\n//                            winstonLog.logError(`Error in isRelationPropertyValid ${error}`);\n//                            return Q.reject(error);\n//                        });\n//                }\n//            }\n//            break;\n//        case Decorators.MANYTOONE: // for single object\n//            // do nothing\n//            return Q.when(true);\n//        case Decorators.MANYTOMANY: // for array of objects\n//            // do nothing\n//            return Q.when(true);\n//    }\n//    return Q.when(true);\n//}\n\n//function getQueryCondition(id: any, cond: any): any {\n//    if (id) {\n//        return {\n//            $and: [\n//                { $or: cond },\n//                { '_id': { $ne: id } }\n//            ]\n//        };\n//    }\n//    else {\n//        return { $or: cond }\n//    }\n//}\n\nfunction updateEntity(targetModel: Object, propKey: string, targetPropArray: boolean, updatedObjects: Array<any>, embedded: boolean, entityChange: EntityChange, childModel: Mongoose.Model<any>, isJsonMap?: boolean): Q.Promise<any> {\n    var meta = MetaUtils.getMetaData(targetModel, Decorators.DOCUMENT);\n\n    if (!meta) {\n        throw 'Could not fetch metadata for target object';\n    }\n    var targetModelMeta = meta[0];\n    var repoName = (<IDocumentParams>targetModelMeta.params).name;\n    var model = Utils.getCurrentDBModel(repoName);\n    if (!model) {\n        winstonLog.logError('no repository found for relation');\n        throw 'no repository found for relation';\n    }\n    return patchAllEmbedded(model, propKey, updatedObjects, entityChange, embedded, childModel, targetPropArray, isJsonMap);\n}\n\nexport function fetchEagerLoadingProperties(model: Mongoose.Model<any>, values: Array<any>): Q.Promise<any> {\n    if (!values || !values.length)\n        return Q.when(values);\n\n    var asyncCalls = [];\n    var metas = CoreUtils.getAllRelationsForTargetInternal(getEntity(model.modelName));\n\n    Enumerable.from(metas).forEach(x => {\n        var m: MetaData = x;\n        var param: IAssociationParams = <IAssociationParams>m.params;\n        if (param && !param.embedded && param.eagerLoading) {\n            values.forEach(val => {\n                if (!val[m.propertyKey])\n                    return;\n\n                var relModel = Utils.getCurrentDBModel(param.rel);\n                let repo: DynamicRepository = repoFromModel[relModel.modelName];\n                if (m.propertyType.isArray) {\n                    if (val[m.propertyKey].length > 0) {\n                        asyncCalls.push(repo.getRootRepo().findMany(val[m.propertyKey]).then(res => {\n                            val[m.propertyKey] = res;\n                        }));\n                    }\n                }\n                else {\n                    asyncCalls.push(repo.getRootRepo().findMany([val[m.propertyKey]]).then(res => {\n                        val[m.propertyKey] = res[0];\n                    }));\n                }\n            });\n        }\n    });\n\n    return Q.allSettled(asyncCalls).then(result => {\n        return values;\n    });\n}\nexport function isJsonMapEnabled(params: IAssociationParams) {\n    if (params && (params.storageType == StorageType.JSONMAP)) {\n        return true;\n    }\n    return false;\n}\nfunction embedChild(objects: Array<any>, prop, relMetadata: MetaData, parentModelName: string): Q.Promise<any> {\n    var searchResult = {};\n    var objs = [];\n    var searchObj = [];\n    let params: IAssociationParams = <any>relMetadata.params;\n    let isJsonMap = isJsonMapEnabled(params);\n    let manyToone = {};\n    objects.forEach((obj, index) => {\n        if (!obj[prop])\n            return;\n        var val = obj[prop];\n        var newVal;\n        if (relMetadata.propertyType.isArray) {\n            newVal = isJsonMap ? {} : [];\n            for (var i in val) {\n                if (CoreUtils.isJSON(val[i])) {\n                    if (!val[i]['_id']) {\n                        val[i]['batch'] = index;\n                        val[i][ConstantKeys.parent] = Utils.getParentKey(parentModelName, prop, (obj._id ? obj._id : obj[ConstantKeys.TempId]));\n                        objs.push(val[i]);\n                    }\n                    else {\n                        val[i]['_id'] = Utils.castToMongooseType(val[i]['_id'].toString(), Mongoose.Types.ObjectId);\n                        if (params.embedded) {\n                            // for partial embedding, fetch the object from db and set that object\n                            if (params.properties && params.properties.length > 0) {\n                                searchResult[val[i]['_id']] = obj;\n                                searchObj.push(val[i]['_id']);\n                            }\n                            else {\n                                // newVal.push(val[i]);\n                                let dbEntities = [];\n                                // in case of partial data in embedded object get that object from db entity and if db entity is not present then fetch from db\n                                if (obj.__dbEntity && obj.__dbEntity[prop]) {\n                                    dbEntities = obj.__dbEntity && obj.__dbEntity[prop];\n                                    let curDbEntity = dbEntities.find(x => x._id && x._id.toString() == val[i]._id.toString());\n                                    Utils.pushPropToArrayOrObject(val[i]['_id'].toString(), curDbEntity ? curDbEntity : val[i], newVal, isJsonMap);\n                                }\n                                else {\n                                    searchResult[val[i]['_id']] = obj;\n                                    searchObj.push(val[i]['_id']);\n                                }\n                            }\n                        }\n                        else {\n                            // newVal.push(val[i]['_id']);\n                            Utils.pushPropToArrayOrObject(val[i]['_id'].toString(), val[i]['_id'], newVal, isJsonMap);\n                        }\n                    }\n                }\n                else {\n                    if (!params.embedded) {\n                        newVal.push(Utils.castToMongooseType(val[i].toString(), Mongoose.Types.ObjectId));\n                    }\n                    else {\n                        // find object\n                        searchResult[val[i]] = obj;\n                        searchObj.push(val[i]);\n                        //newVal.push(searchResult[val[i]]);\n                    }\n                }\n            }\n        }\n        else {\n            if (CoreUtils.isJSON(val)) {\n                if (!val['_id']) {\n                    val['batch'] = index;\n                    val[ConstantKeys.parent] = Utils.getParentKey(parentModelName, prop, (obj._id ? obj._id : obj[ConstantKeys.TempId]));\n                    objs.push(val);\n                }\n                else {\n                    val['_id'] = Utils.castToMongooseType(val['_id'].toString(), Mongoose.Types.ObjectId);\n                    if (params.embedded) {\n                        if (relMetadata.decorator == Decorators.MANYTOONE) {\n                            if (val && val._id) {\n                                let tempVal = val._id.toString();\n                                manyToone[tempVal] = manyToone[tempVal] ? manyToone[tempVal] : [];\n                                if (manyToone[tempVal].length == 0)\n                                    searchObj.push(val['_id']);\n                                manyToone[tempVal].push(obj);\n                            }\n                        }\n                        else\n                            // for partial embedding, fetch the object from db and set that object\n                            if (params.properties && params.properties.length > 0) {\n                                searchResult[val['_id']] = obj;\n                                searchObj.push(val['_id']);\n                            }\n                            else {\n                                newVal = val;\n                            }\n                    }\n                    else {\n                        newVal = val['_id'];\n                    }\n                }\n            }\n            else {\n                if (!params.embedded) {\n                    newVal = Utils.castToMongooseType(val.toString(), Mongoose.Types.ObjectId);\n                }\n                else {\n                    if (relMetadata.decorator == Decorators.MANYTOONE) {\n                        manyToone[val] = manyToone[val] ? manyToone[val] : [];\n                        if (manyToone[val].length == 0)\n                            searchObj.push(val);\n                        manyToone[val].push(obj);\n                    }\n                    else {\n                        // find object\n                        searchResult[val] = obj;\n                        searchObj.push(val);\n                    }\n                }\n            }\n        }\n        obj[prop] = newVal;\n    });\n\n    let queryCalls = [];\n    let relModel = Utils.getCurrentDBModel(params.rel);\n    if (objs.length > 0) {\n        let repo: DynamicRepository = repoFromModel[relModel.modelName];\n        queryCalls.push(repo.bulkPost(objs).then(res => {\n            res.forEach(obj => {\n                var val = params.embedded ? obj : obj['_id'];\n                if (relMetadata.propertyType.isArray) {\n                    // objects[obj['batch']][prop].push(val);\n                    Utils.pushPropToArrayOrObject(obj['_id'].toString(), val, objects[obj['batch']][prop], isJsonMap);\n                }\n                else {\n                    objects[obj['batch']][prop] = val;\n                }\n            });\n        }));\n    }\n    if (searchObj.length > 0) {\n        queryCalls.push(mongooseModel.findMany(relModel, searchObj).then((res: Array<any>) => {\n            // set searched objects into actual objects\n            res.forEach(obj => {\n                var val = params.embedded ? obj : obj['_id'];\n                if (relMetadata.propertyType.isArray) {\n                    Utils.pushPropToArrayOrObject(val['_id'].toString(), val, searchResult[obj['_id']][prop], isJsonMap);\n                }\n                else {\n                    if (relMetadata.decorator == Decorators.MANYTOONE) {\n                        manyToone[obj['_id']].forEach(x => {\n                            x[prop] = val;\n                        });\n                    }\n                    else {\n                        searchResult[obj['_id']][prop] = val;\n                    }\n                }\n            });\n        }));\n    }\n\n    return Q.allSettled(queryCalls).then(res => {\n        objects.forEach(obj => {\n            if (obj[prop]) {\n                obj[prop] = embedSelectedPropertiesOnly(params, obj[prop]);\n            }\n        });\n    });\n}\n\nfunction embedSelectedPropertiesOnly(params: IAssociationParams, result: any, isEmbeddedObjectInResult?: boolean) {\n    if (result && params.properties && params.properties.length > 0 && params.embedded) {\n        if (result instanceof Array) {\n            var newResult = [];\n            result.forEach(x => {\n                newResult.push(trimProperties(x, params.properties));\n            });\n            return newResult;\n        } else if (isEmbeddedObjectInResult) {\n            let returnObject = trimProperties(result, params.properties);\n            //for (let key in result) {\n            //    returnObject[key] = trimProperties(result[key], params.properties);\n            //}\n            return returnObject;\n        } else {\n            return trimProperties(result, params.properties);\n        }\n    }\n    return result;\n}\n\nfunction trimProperties(data, props: Array<string>) {\n    var updated = {};\n    updated['_id'] = data['_id'];\n    props.forEach(p => {\n        if (data[p] || data[p] === 0 || data[p] === false) {\n            updated[p] = data[p];\n        }\n    });\n    return updated;\n}\n\nfunction getFilteredValues(values: [any], properties: [string]) {\n    var result = [];\n    values.forEach(x => {\n        var val = getFilteredValue(x, properties);\n        if (val) {\n            result.push(val);\n        }\n    });\n    return result;\n}\n\nfunction getFilteredValue(value, properties: [string]) {\n    if (properties && properties.length > 0) {\n        var json = {};\n        if (value['_id']) {\n            json['_id'] = value['_id'];\n        }\n        properties.forEach(x => {\n            if (value[x])\n                json[x] = value[x];\n        });\n        if (JSON.stringify(json) == '{}') {\n            return null;\n        }\n        return json;\n    }\n    else {\n        return value;\n    }\n}\n\nfunction castAndGetPrimaryKeys(obj, prop, relMetaData: MetaData): Array<any> {\n    var primaryMetaDataForRelation = CoreUtils.getPrimaryKeyMetadata(relMetaData.target);\n\n    if (!primaryMetaDataForRelation) {\n        winstonLog.logError('primary key not found for relation');\n        throw 'primary key not found for relation';\n    }\n\n    var primaryType = primaryMetaDataForRelation.getType();\n    return obj[prop] instanceof Array\n        ? Enumerable.from(obj[prop]).select(x => Utils.castToMongooseType(x, primaryType)).toArray()\n        : [Utils.castToMongooseType(obj[prop], primaryType)];\n}\n\n// Implementation for vertical sharding\nexport function getChangedModelForDynamicSchema(model: Mongoose.Model<any>, id: any): Mongoose.Model<any> {\n    let newModel = model;\n    try {\n        let obj: any = InstanceService.getInstanceFromType(getEntity(model.modelName), true);\n        obj._id = id;\n        return getNewModelFromObject(model, obj);\n    } catch (ex) {\n        winstonLog.logError(ex);\n    }\n\n    return newModel;\n}\n\nexport function setUniqueIdFromShard(x: any) {\n    let shard: ShardInfo = x;\n    if (shard.getUniqueId) {\n        x._id = shard.getUniqueId();\n    }\n}\n\nexport function getNewModelFromObject(model, obj: ShardInfo) {\n    if (obj && obj.getCollectionNameFromSelf) {\n        return getDbSpecifcModel(obj.getCollectionNameFromSelf(), model.schema);\n    }\n    return model;\n}\n\n// It returns all collection name and ids for these collection name\nexport function getAllShardModelsFromIds(model: Mongoose.Model<any>, ids: Array<string>): any {\n    let shardModelInfo = {};\n    try {\n        let shardobj: ShardInfo = InstanceService.getInstanceFromType(getEntity(model.modelName), true);\n        if (shardobj && shardobj.getCollectionNameFromSelf) {\n            let obj: any = shardobj;\n            ids.forEach(x => {\n                obj._id = x;\n                let newModel = getNewModelFromObject(model, obj);\n                shardModelInfo[newModel.modelName] = newModel;\n            });\n        }\n        else {\n            shardModelInfo[model.modelName] = model;\n        }\n\n    } catch (ex) {\n        winstonLog.logError(ex);\n    }\n    return shardModelInfo;\n}\n\nexport function getAllTheShards(model: Mongoose.Model<any>) {\n    let shardobj: ShardInfo = InstanceService.getInstanceFromType(getEntity(model.modelName), true);\n    if (shardobj.getAllShardCollectionNames) {\n        let newModels = [];\n        newModels = shardobj.getAllShardCollectionNames().map(x => getDbSpecifcModel(x, model.schema));\n        return newModels;\n    }\n    return [model];\n}\n\n// Implementation for horizontal sharding\nexport function setShardCondition(model, searchCond) {\n    var meta = MetaUtils.getMetaData(getEntity(model.modelName), Decorators.REPOSITORY);\n    if (meta && meta[0] && meta[0].params.sharded) {\n        let repo: DynamicRepository = repoFromModel[model.modelName];\n        let cond = repo.getShardCondition();\n        if (cond) {\n            Object.keys(cond).forEach(key => {\n                searchCond[key] = cond[key];\n            });\n        }\n    }\n    return searchCond;\n}"],"sourceRoot":"/source/"}