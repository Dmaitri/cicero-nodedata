{"version":3,"sources":["mongoose/pubsub/messenger.ts"],"names":[],"mappings":"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","file":"mongoose/pubsub/messenger.js","sourcesContent":["'use strict';\n\nvar util = require('util');\nimport events = require('events');\nvar EventEmitter: any = require('events').EventEmitter;\nvar getMessage = require('./model');\nvar db: any = require('../db');\nimport Mongoose = require('mongoose');\nimport Q = require('q');\n\nvar parentCallBack;\nexport class Messenger extends events.EventEmitter {\n\n    subscribed = {};\n    lastMessageTimestamp = null;\n    startingMessageTimestamp = new Date();\n    retryInterval;\n    parentCallBack;\n    collectionName;\n    cappedSize;\n    Message: any;\n    private streamBuffer = {};\n    batchSize = 0;;\n    constructor(options) {\n        super();\n        //this.apply(this, arguments);\n        var o = options || {};\n        this.collectionName = options && options.collectionName;\n        this.cappedSize = options && options.cappedSize;\n        this.subscribed = {};\n        this.lastMessageTimestamp = null;\n        this.startingMessageTimestamp = new Date();\n        this.retryInterval = o.retryInterval || 3000;\n        db.addEmitter(this);\n\n\n        //console.log(\"messenger created\");\n    }\n\n    //util.inherits(Messenger, EventEmitter);\n\n    public chekAndSend(path: string, message: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.send(path, message, function (err, data) {\n                resolve(true);\n                //console.log('Sent message');\n            });\n        })\n    }\n\n    public sendMessageToclient(client, repo, message, multiClients?: any,collection?:any) { }\n    public getAllUsersForNotification(entity: any): Array<string> { return []; }\n    public sendMessageOnRepo = (repo: any, message: any) => { }\n\n    send(channel, msg, callback) {\n\n        var cb = function noop() { };\n        if (typeof callback === 'function') {\n            cb = callback;\n        }\n        if (!this.Message) {\n            this.Message = getMessage(this.collectionName, this.cappedSize);\n        }\n\n        if (msg instanceof Array) {\n            Q.nbind(this.Message.collection.insertMany, this.Message.collection)(msg.map((x) => {\n                return new this.Message({\n                    channel: channel,\n                    message: x\n                })\n            }))\n        }\n        else {\n            var message = new this.Message({\n                channel: channel,\n                message: msg\n            });\n            message.save(function (err) {\n                return true;\n            });\n        }\n\n    };\n\n    sendPendingMessage(rechannel, lastemit, receiver: any) {\n        var self = this;\n        var query: any = { channel: rechannel, timestamp: { $gt: lastemit } };\n\n        if (!this.Message) {\n            this.Message = getMessage(this.collectionName);\n        }\n        var stream = this.Message.find(query).stream();\n\n        stream.on('data', function data(doc) {\n            self.lastMessageTimestamp = doc.timestamp;\n            doc.message.receiver = receiver;\n            if (self.subscribed[doc.channel]) {\n                self.emit(doc.channel, doc.message);\n            }\n        });\n\n        // reconnect on error\n        stream.on('error', function streamError() {\n            stream.destroy();\n            self.connect();\n        });\n    }\n\n\n    onConnect(callback) {\n        var self = this;\n        self.parentCallBack = callback;\n        //console.log(\"on connect recieved\");\n        self.on('databaseconnected', (conn) => {\n            //console.log('databaseconnected');\n            self.connect(self.parentCallBack);\n        });\n    }\n\n\n    \n\n\n    run() {\n        let self = this;\n        if (this.collectionName == \"order_message\") {\n            setInterval(function () { self.clearBuffer(); }, 500);\n        }\n    }\n\n\n    clearBuffer() {\n        let self = this;\n       // console.log(\"clean buffer called \");\n\n        for (let key in self.streamBuffer) {\n            let buff = self.streamBuffer[key];\n            let size = buff.length;\n            if (size > self.batchSize) { size = self.batchSize; }\n            let spliceBuff = buff.splice(0, size);\n            if (spliceBuff && spliceBuff.length) {\n                console.log(\"messenger clean buffer stated for \", spliceBuff.length);\n\n                let finalMsg = spliceBuff[spliceBuff.length - 1];\n                self.emit(key, { message: finalMsg, collection: spliceBuff });\n            }\n        }\n\n    }\n\n\n\n    connect(callback?: any) {\n        var self = this;\n        //console.log(\"messenger started on \", new Date());\n        //console.log(\"messenger last time stamp is\", self.startingMessageTimestamp);\n\n        var query: any = { timestamp: { $gte: self.startingMessageTimestamp } };\n        if (self.lastMessageTimestamp) {\n            query = { timestamp: { $gt: self.lastMessageTimestamp } };\n        }\n        if (!this.Message) {\n            this.Message = getMessage(this.collectionName);\n        }\n        // var stream = Message.find(query).setOptions({ tailable: true, tailableRetryInterval: self.retryInterval, numberOfRetries: Number.MAX_VALUE }).stream();\n        //var stream = Message.find(query).setOptions({\n        //    tailable: true, tailableRetryInterval: 200,\n        //    awaitdata: false,\n        //    numberOfRetries: -1\n        //}).stream();\n\n        // major performance improvement\n        let stream = this.Message.find(query)\n            .cursor(50)\n            .addCursorFlag('tailable', true)\n            .addCursorFlag('awaitData', true)\n        //.addCursorFlag('tailableRetryInterval', self.retryInterval)\n        //.addCursorFlag('numberOfRetries', Number.MAX_VALUE);\n        let receivedCount = 0;\n        let startDateTime = undefined;\n\n\n\n\n\n\n\n        stream.on('data', function data(doc) {\n            receivedCount++;\n            if (!startDateTime) { startDateTime = new Date(); }\n\n            if ((receivedCount % 2000) == 0) {\n                console.log(\"########### messenger receivedCount ######### \", receivedCount);\n                let recalcDateTime = new Date();\n                console.log(\"########### messenger time taken ######### \", recalcDateTime.getTime() - startDateTime.getTime());\n            }\n            self.lastMessageTimestamp = doc.timestamp;\n            if (self.subscribed[doc.channel]) {\n                // self.emit(doc.channel, doc.message);\n                if (doc.message.singleWorkerOnRole || self.batchSize==0) {\n                    self.emit(doc.channel, doc.message);\n                }\n                else {\n                   // self.emit(doc.channel, doc.message);\n                   if (!self.streamBuffer[doc.channel]) { self.streamBuffer[doc.channel] = []; }\n\n                    self.streamBuffer[doc.channel].push(doc.message);\n                }\n            }\n        });\n\n        //// reconnect on error\n        stream.on('error', function streamError(error) {\n            if (error && error.message) {\n                //console.log(error.message);\n            }\n            //stream.destroy();\n            setTimeout(() => {\n                self.connect()\n            }, 2000);\n        });\n\n        if (callback) callback();\n    };\n\n    subscribe(channel, bool) {\n        var self = this;\n        if (channel && bool) {\n            self.subscribed[channel] = bool;\n            return;\n        }\n        if (channel && self.subscribed[channel]) {\n            delete self.subscribed[channel];\n        }\n    };\n\n}"],"sourceRoot":"/source/"}