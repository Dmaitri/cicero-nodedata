{"version":3,"sources":["tests/repositories/subjectRepository.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAA4D,uBAAuB,CAAC,CAAA;AAEpF,0BAAsB,mBAAmB,CAAC,CAAA;AAG1C,+BAA2B,oCAAoC,CAAC,CAAA;AAChE,6BAAyB,kCAAkC,CAAC,CAAA;AAC5D,0CAAsC,4CAA4C,CAAC,CAAA;AAEnF,MAAO,CAAC,WAAW,GAAG,CAAC,CAAC;AAGxB,sDAA8C,iDAAuB;IAEjE,mCAAmC;IACnC,0EAA0E;IAG1E,OAAO;QACH,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,0DAA0D;IAC1D,GAAG,CAAC,EAAO,EAAE,GAAQ;QACjB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;IAC9B,CAAC;IAGD,SAAS,CAAC,EAAO,EAAE,GAAQ;QACvB,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC;IAIM,WAAW,CAAC,SAAS,EAAE,KAAK;QAC/B,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAC/C,CAAC;IAED,OAAO,CAAC,MAAyB;QAC7B,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC1B,CAAC;IAED,QAAQ,CAAC,MAAyB;QAC9B,IAAI,SAAS,GAAG,MAAM,CAAC,mBAAmB,CAAC;QAC3C,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC7B,CAAC;QACH,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACxB,CAAC;IAED,YAAY,CAAC,MAAgC;QACzC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,OAAO,MAAM,CAAC,CAAC,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5F,CAAC;IAED,WAAW,CAAC,MAAgC;QACxC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC1B,CAAC;AACL,CAAC;AAzCG;IAAC,2BAAY,CAAC,EAAE,WAAW,EAAE,gBAAgB,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC;IAAA,+DAA+D;IACrI,2BAAc,EAAE;;;;+CAAA;AAUjB;IAAC,2BAAY,CAAC,EAAE,WAAW,EAAE,gBAAgB,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;;;;iDAAA;AAKxE;IAAC,2BAAY,CAAC,EAAE,WAAW,EAAE,gBAAgB,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;IACvE,uBAAU,CAAC,EAAE,WAAW,EAAE,gBAAgB,EAAE,UAAU,EAAE,YAAY,EAAE,CAAC;;;;mDAAA;AAtB5E;IAAC,uBAAU,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,iBAAO,EAAE,CAAC;;oBAAA;AAChD;kCA6CC,CAAA","file":"tests/repositories/subjectRepository.js","sourcesContent":["import {repository, allowanonymous, OptimisticLocking} from \"../../core/decorators\";\nimport {OptimisticLockType} from \"../../core/enums/optimisticlock-type\";\nimport {subject} from '../models/subject';\nimport {DynamicRepository} from '../../core/dynamic/dynamic-repository';\nimport {authorize} from '../../core/decorators/authorize';\nimport {preauthorize} from '../../core/decorators/preauthorize';\nimport {postfilter} from '../../core/decorators/postfilter';\nimport {AuthorizationRepository} from '../../repositories/authorizationRepository';\nimport {entityAction, EntityActionParam} from '../../core/decorators/entityAction';\nimport Q = require('q');\n\n@repository({ path: 'subject', model: subject })\nexport default class CourseRepository extends AuthorizationRepository {\n\n    //@authorize({ roles: ['ROLE_A'] })\n    //@postfilter({ serviceName: \"preauthservice\", methodName: \"PostFilter\" })\n    @preauthorize({ serviceName: \"preauthservice\", methodName: \"CanEdit\" })//, params: { id: '#id', entity: '#entity', other: [false] } })\n    @allowanonymous()\n    findAll(): Q.Promise<any> {\n        return super.findAll();\n    }\n\n    //@OptimisticLocking({ type: OptimisticLockType.VERSION })\n    put(id: any, obj: any): Q.Promise<any> {\n        return super.put(id, obj);\n    }\n\n    @preauthorize({ serviceName: \"preauthservice\", methodName: \"CanEdit1\" })\n    doProcess(id: any, val: any) {\n        return 'success';\n    }\n\n    @preauthorize({ serviceName: \"preauthservice\", methodName: \"CanEdit1\" })\n    @postfilter({ serviceName: \"preauthservice\", methodName: \"PostFilter\" })\n    public findByField(fieldName, value): Q.Promise<any> {\n        return super.findByField(fieldName, value);\n    }\n\n    preRead(params: EntityActionParam): Q.Promise<EntityActionParam> {\n        return Q.when(params);\n    }\n\n    postRead(params: EntityActionParam): Q.Promise<any> {\n        let curEntity = params.newPersistentEntity;\n        if (curEntity.delete) {\n            return Q.when(undefined);\n        }\n      return Q.when(params);\n    }\n\n    postBulkRead(params: Array<EntityActionParam>): Q.Promise<Array<EntityActionParam>> {\n        return Q.when(params.filter((entity) => { return !entity.newPersistentEntity.delete }));\n    }\n\n    preBulkRead(params: Array<EntityActionParam>): Q.Promise<Array<EntityActionParam>> {\n        return Q.when(params);\n    }\n}\n"],"sourceRoot":"/source/"}