"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const decorators_1 = require("../../core/decorators");
const dynamic_repository_1 = require("../../core/dynamic/dynamic-repository");
const decorators_2 = require("../../di/decorators");
const teacher_1 = require('../models/teacher');
const TeacherService = require('../services/teacherService');
const mongoose_1 = require('mongoose');
const Q = require('q');
let TeacherRepository = class TeacherRepository extends dynamic_repository_1.DynamicRepository {
    findOne(id, donotLoadChilds) {
        return super.findOne(id).then(x => {
            return super.findOne(id).then(r => {
                let re = r;
                return re;
            });
        });
    }
    findMany(ids, toLoadEmbededChilds) {
        return super.findMany(ids, toLoadEmbededChilds);
    }
    preRead(params) {
        return Q.when(params);
    }
    postRead(params) {
        return Q.when(params);
    }
    preBulkRead(params) {
        return Q.when(params);
    }
    postBulkRead(params) {
        return Q.when(params);
    }
    doFindValue(id) {
        return this.findOne(id).then((result) => {
            var a = result.physics_LAZY();
            return result;
        });
    }
    doAddTeacherWorker(obj) {
        return this._teacherService.addTeacherWorker(obj);
    }
    doAddTeacherProcessControl(obj) {
        return this._teacherService.addTeacherProcessControl(obj);
    }
    doUpdateTeacherProcessControlAndWorker(obj) {
        return this._teacherService.addTeacherProcessControlAndWorker(obj);
    }
    doLongTask() {
        return this._teacherService.longTask();
    }
    doUpdateMany(ids, obj) {
        return this.bulkPutMany(ids, obj);
        ;
    }
    doFindWhere() {
        return this.findWhere({
            _id: {
                $in: [mongoose_1.Types.ObjectId("596a72000f404ef43c8e1a5a"), mongoose_1.Types.ObjectId("59a3dee5c21673e8200c6d8f")]
            }
        }).then(rs => {
            return this.findMany([mongoose_1.Types.ObjectId("596a72000f404ef43c8e1a5a"), mongoose_1.Types.ObjectId("59a3dee5c21673e8200c6d8f")]).then(r => {
                return this.delete(mongoose_1.Types.ObjectId("596a72000f404ef43c8e1a5a")).then(d => {
                    return this.findMany([mongoose_1.Types.ObjectId("596a72000f404ef43c8e1a5a"), mongoose_1.Types.ObjectId("59a3dee5c21673e8200c6d8f")]).then(r => {
                        let t = r;
                        return t;
                    });
                });
            });
        });
    }
};
__decorate([
    decorators_2.inject(TeacherService), 
    __metadata('design:type', TeacherService.TeacherService)
], TeacherRepository.prototype, "_teacherService", void 0);
TeacherRepository = __decorate([
    decorators_1.repository({ path: 'teacher', model: teacher_1.teacher }), 
    __metadata('design:paramtypes', [])
], TeacherRepository);
exports.TeacherRepository = TeacherRepository;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = TeacherRepository;

//# sourceMappingURL=teacherRepository.js.map
