"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const service_1 = require('../../di/decorators/service');
const Q = require('q');
let AuthorizationService = class AuthorizationService {
    canReadActionEntity(params) {
        return params.newPersistentEntity;
    }
    canReadActionEntities(actionEntities) {
        // TODO: need to return tri state entity (new, old, merged) when all get actions 
        //       (findOne, findAll, findwhere, findmany etc) will be implemented in EntityAction annotation
        let readableEntities = new Array();
        actionEntities.forEach(entity => {
            let qualifiedEntity = this.canReadActionEntity(entity);
            qualifiedEntity && readableEntities.push(qualifiedEntity);
        });
        return readableEntities;
    }
    canDeleteEntity(entityAction) {
        let entity = entityAction.oldPersistentEntity;
        return Q.when(true);
    }
    canSaveEntities(entityActions) {
        return Q.when(true);
    }
    canSaveEntity(entityAction) {
        let entity = entityAction.newPersistentEntity;
        return Q.when(true);
    }
};
AuthorizationService = __decorate([
    service_1.service({ singleton: true, serviceName: 'authorizationService' }), 
    __metadata('design:paramtypes', [])
], AuthorizationService);
exports.AuthorizationService = AuthorizationService;

//# sourceMappingURL=authorizationService.js.map
