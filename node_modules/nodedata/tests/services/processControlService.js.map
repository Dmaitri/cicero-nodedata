{"version":3,"sources":["tests/services/processControlService.ts"],"names":[],"mappings":"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","file":"tests/services/processControlService.js","sourcesContent":["import { service, inject } from '../../di/decorators';\nimport {processControlServiceName, IProcessControlService, processControlContext} from '../../core/decorators/interfaces/IProcessControlService';\nimport {workerParamsDto} from \"../../core/decorators/interfaces/workerParamsDto\";\nimport {ProcessControlModel} from '../models/processControlModel';\nimport * as prcessControlRepo from '../repositories/processControlRepository';\nimport { PrincipalContext } from '../../security/auth/principalContext';\nimport { IProcessControlParams } from '../../core/decorators/interfaces/IProcessControlParams';\n\nimport Q = require('q');\n\nconsole.log('initializing ProcessControlService');\n\nconst processStatus = {\n    \"NOT_STARTED\": \"NOT_STARTED\",\n    \"COMPLETED\": \"COMPLETED\",\n    \"RUNNING\": \"RUNNING\",\n    \"ERROR\": \"ERROR\"\n}\n\n@service({ singleton: true, serviceName: processControlServiceName })\nexport class ProcessControlService implements IProcessControlService {\n\n    @inject(prcessControlRepo)\n    private processControlRepository: prcessControlRepo.ProcessControlrepository;\n\n    public initialize(serviceName: string, methodName: string, targetObjectId: any, processControlParams: IProcessControlParams, args?: any): Q.Promise<boolean> {\n        let newProcessControlObj: ProcessControlModel = this.constructNewProcessControlModel(serviceName, methodName, targetObjectId, processControlParams, args);\n        console.log('processId:' + process.pid);\n        return this.CanStartProcess(newProcessControlObj).then((sucess) => {\n            if (sucess) {\n                return this.processControlRepository.post(newProcessControlObj).then(\n                    (processObjCreated) => {\n                        try {\n                            PrincipalContext.save(processControlContext, processObjCreated);\n                            return processObjCreated;\n                        } catch (error) {\n                            return true;\n                        }\n                    },\n                    (error) => {\n                        console.log(\"Error in creating new  process control : \" + error);\n                        return false;\n                    });\n            } else {\n                return false;\n            }\n        }, (error) => {\n            return false;\n        });\n    }\n\n    public startProcess(): Q.Promise<boolean> {\n        return this.checkRunningAndChangeStatus(processStatus.RUNNING);\n    }\n\n    public completeProcess(responseData: any): Q.Promise<boolean> {\n        return this.checkRunningAndChangeStatus(processStatus.COMPLETED, responseData);\n    }\n\n    public errorOutProcess(errorMessage: string): Q.Promise<boolean> {\n        return this.checkRunningAndChangeStatus(processStatus.ERROR, errorMessage);\n    }\n\n    private checkRunningAndChangeStatus(newStatus: string, responseData?:any): Q.Promise<boolean> {\n        let processControlObj: ProcessControlModel = PrincipalContext.get(processControlContext);\n        processControlObj.status = newStatus;\n        if (responseData) {\n            processControlObj.responseData = responseData;\n        }\n\n        return this.processControlRepository.patch(processControlObj._id, processControlObj).then(\n            (sucess) => {\n                console.log(\"Successfully marked complete in checkRunningAndChangeStatus  processEntityId: \" + processControlObj._id);\n                return sucess;\n            },\n            (error) => {\n                console.log(\"Error occured in checkRunningAndChangeStatus while patching status processEntityId: \" + processControlObj._id);\n                return true;\n            });\n    }\n\n    private CanStartProcess(processControlModel: ProcessControlModel): Q.Promise<boolean> {\n        return Q.when(true);\n    }\n\n    private constructNewProcessControlModel(serviceName: string, methodName: string, targetObjectId: any, processControlParams: IProcessControlParams, args?: any) {\n        var newProcessControlObj = new ProcessControlModel();\n        newProcessControlObj.processEntityType = processControlParams.type;\n        newProcessControlObj.processEntityId = targetObjectId;\n        newProcessControlObj.processEntityAction = processControlParams.action;\n        newProcessControlObj.status = processStatus.NOT_STARTED;\n        newProcessControlObj.processId = process.pid;\n        newProcessControlObj.serviceName = serviceName;\n        newProcessControlObj.serviceMethodName = methodName;\n        newProcessControlObj.serviceMethodArgs = args;\n        return newProcessControlObj;\n    }\n\n    public sendResponse(processModel: ProcessControlModel, workerDetails: workerParamsDto): Q.IPromise<any> {\n        let trackObj: TrackWorkerTask = {\n            trackUrl: \"processControl/\" + processModel._id,\n            tractData: processModel,\n            message: \"Action will be executed in worker thread, please hit the trackUrl to find the tast status\"\n        };\n\n        return Q.when(trackObj);\n    }\n}\n\nexport interface TrackWorkerTask {\n    trackUrl: string;\n    tractData: ProcessControlModel\n    message: string;\n}\n\nexport default ProcessControlService;"],"sourceRoot":"/source/"}