"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const decorators_1 = require('../../di/decorators');
const IProcessControlService_1 = require('../../core/decorators/interfaces/IProcessControlService');
const processControlModel_1 = require('../models/processControlModel');
const prcessControlRepo = require('../repositories/processControlRepository');
const principalContext_1 = require('../../security/auth/principalContext');
const Q = require('q');
console.log('initializing ProcessControlService');
const processStatus = {
    "NOT_STARTED": "NOT_STARTED",
    "COMPLETED": "COMPLETED",
    "RUNNING": "RUNNING",
    "ERROR": "ERROR"
};
let ProcessControlService = class ProcessControlService {
    initialize(serviceName, methodName, targetObjectId, processControlParams, args) {
        let newProcessControlObj = this.constructNewProcessControlModel(serviceName, methodName, targetObjectId, processControlParams, args);
        console.log('processId:' + process.pid);
        return this.CanStartProcess(newProcessControlObj).then((sucess) => {
            if (sucess) {
                return this.processControlRepository.post(newProcessControlObj).then((processObjCreated) => {
                    try {
                        principalContext_1.PrincipalContext.save(IProcessControlService_1.processControlContext, processObjCreated);
                        return processObjCreated;
                    }
                    catch (error) {
                        return true;
                    }
                }, (error) => {
                    console.log("Error in creating new  process control : " + error);
                    return false;
                });
            }
            else {
                return false;
            }
        }, (error) => {
            return false;
        });
    }
    startProcess() {
        return this.checkRunningAndChangeStatus(processStatus.RUNNING);
    }
    completeProcess(responseData) {
        return this.checkRunningAndChangeStatus(processStatus.COMPLETED, responseData);
    }
    errorOutProcess(errorMessage) {
        return this.checkRunningAndChangeStatus(processStatus.ERROR, errorMessage);
    }
    checkRunningAndChangeStatus(newStatus, responseData) {
        let processControlObj = principalContext_1.PrincipalContext.get(IProcessControlService_1.processControlContext);
        processControlObj.status = newStatus;
        if (responseData) {
            processControlObj.responseData = responseData;
        }
        return this.processControlRepository.patch(processControlObj._id, processControlObj).then((sucess) => {
            console.log("Successfully marked complete in checkRunningAndChangeStatus  processEntityId: " + processControlObj._id);
            return sucess;
        }, (error) => {
            console.log("Error occured in checkRunningAndChangeStatus while patching status processEntityId: " + processControlObj._id);
            return true;
        });
    }
    CanStartProcess(processControlModel) {
        return Q.when(true);
    }
    constructNewProcessControlModel(serviceName, methodName, targetObjectId, processControlParams, args) {
        var newProcessControlObj = new processControlModel_1.ProcessControlModel();
        newProcessControlObj.processEntityType = processControlParams.type;
        newProcessControlObj.processEntityId = targetObjectId;
        newProcessControlObj.processEntityAction = processControlParams.action;
        newProcessControlObj.status = processStatus.NOT_STARTED;
        newProcessControlObj.processId = process.pid;
        newProcessControlObj.serviceName = serviceName;
        newProcessControlObj.serviceMethodName = methodName;
        newProcessControlObj.serviceMethodArgs = args;
        return newProcessControlObj;
    }
    sendResponse(processModel, workerDetails) {
        let trackObj = {
            trackUrl: "processControl/" + processModel._id,
            tractData: processModel,
            message: "Action will be executed in worker thread, please hit the trackUrl to find the tast status"
        };
        return Q.when(trackObj);
    }
};
__decorate([
    decorators_1.inject(prcessControlRepo), 
    __metadata('design:type', prcessControlRepo.ProcessControlrepository)
], ProcessControlService.prototype, "processControlRepository", void 0);
ProcessControlService = __decorate([
    decorators_1.service({ singleton: true, serviceName: IProcessControlService_1.processControlServiceName }), 
    __metadata('design:paramtypes', [])
], ProcessControlService);
exports.ProcessControlService = ProcessControlService;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ProcessControlService;

//# sourceMappingURL=processControlService.js.map
