{"version":3,"sources":["tests/services/authorizationService.ts"],"names":[],"mappings":";;;;;;;;;;AAEA,0BAAsB,6BAA6B,CAAC,CAAA;AAEpD,MAAO,CAAC,WAAW,GAAG,CAAC,CAAC;AAGxB;IAEW,mBAAmB,CAAC,MAAyB;QAChD,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC;IACtC,CAAC;IAEM,qBAAqB,CAAC,cAAwC;QACjE,iFAAiF;QACjF,mGAAmG;QACnG,IAAI,gBAAgB,GAAG,IAAI,KAAK,EAAO,CAAC;QACxC,cAAc,CAAC,OAAO,CAAC,MAAM;YACzB,IAAI,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;YACvD,eAAe,IAAI,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,gBAAgB,CAAC;IAC5B,CAAC;IAED,eAAe,CAAC,YAA+B;QAC3C,IAAI,MAAM,GAAG,YAAY,CAAC,mBAAmB,CAAC;QAC9C,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;IAED,eAAe,CAAC,aAAuC;QACnD,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;IAED,aAAa,CAAC,YAA+B;QACzC,IAAI,MAAM,GAAG,YAAY,CAAC,mBAAmB,CAAC;QAC9C,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;AACL,CAAC;AAhCD;IAAC,iBAAO,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,WAAW,EAAE,sBAAsB,EAAE,CAAC;;wBAAA;AACrD,4BAAoB,uBA+BhC,CAAA","file":"tests/services/authorizationService.js","sourcesContent":["\nimport {inject, injectbyname} from '../../di/decorators/inject';\nimport {service} from '../../di/decorators/service';\nimport {entityAction, EntityActionParam} from '../../core/decorators/entityAction';\nimport Q = require('q');\n\n@service({ singleton: true, serviceName: 'authorizationService' })\nexport class AuthorizationService {\n\n    public canReadActionEntity(params: EntityActionParam) {\n        return params.newPersistentEntity;\n    }\n\n    public canReadActionEntities(actionEntities: Array<EntityActionParam>) {\n        // TODO: need to return tri state entity (new, old, merged) when all get actions \n        //       (findOne, findAll, findwhere, findmany etc) will be implemented in EntityAction annotation\n        let readableEntities = new Array<any>();\n        actionEntities.forEach(entity => {\n            let qualifiedEntity = this.canReadActionEntity(entity);\n            qualifiedEntity && readableEntities.push(qualifiedEntity);\n        });\n\n        return readableEntities;\n    }\n\n    canDeleteEntity(entityAction: EntityActionParam) {\n        let entity = entityAction.oldPersistentEntity;\n        return Q.when(true);\n    }\n\n    canSaveEntities(entityActions: Array<EntityActionParam>) {\n        return Q.when(true);\n    }\n\n    canSaveEntity(entityAction: EntityActionParam): Q.Promise<any> {\n        let entity = entityAction.newPersistentEntity;\n        return Q.when(true);\n    }\n}\n\n"],"sourceRoot":"/source/"}