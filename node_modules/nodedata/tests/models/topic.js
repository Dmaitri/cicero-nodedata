"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const Mongoose = require("mongoose");
const decorators_1 = require('../../mongoose/decorators');
const _1 = require('../../mongoose/enums/');
const baseModel_1 = require('./baseModel');
let topic_1;
let topic = topic_1 = class topic extends baseModel_1.baseModel {
    constructor(object) {
        super(object);
        if (!object || !object._id) {
            this.createdDate = Date.now().toString();
        }
        // set default properties
        this.updatedDate = Date.now().toString();
    }
    getShardKey() {
        return "shardKey";
    }
    getUniqueId() {
        if (topic_1.enableSharding && this._id) {
            let newId = this.shardKey + this._id.toString().substr(1, 23);
            return Mongoose.Types.ObjectId(newId);
        }
        return (new Mongoose.Types.ObjectId());
    }
    getCollectionNameFromSelf() {
        let id = this._id.toString();
        if (topic_1.enableSharding && id) {
            return topic_1.collectionName + id.substr(0, 1);
        }
        return id;
    }
    getCollectionNameFromShardKey(id) {
        return topic_1.collectionName;
    }
    getAllShardCollectionNames() {
        let allColection = [topic_1.collectionName];
        if (topic_1.enableSharding) {
            for (var i = 0; i < 5; i++) {
                allColection.push(topic_1.collectionName + i);
            }
        }
        return allColection;
    }
};
topic.count = 0;
topic.enableSharding = true;
topic.collectionName = 'topic';
__decorate([
    decorators_1.field(), 
    __metadata('design:type', String)
], topic.prototype, "createdDate", void 0);
__decorate([
    decorators_1.field(), 
    __metadata('design:type', String)
], topic.prototype, "updatedDate", void 0);
__decorate([
    decorators_1.field(), 
    __metadata('design:type', String)
], topic.prototype, "shardKey", void 0);
topic = topic_1 = __decorate([
    decorators_1.document({ name: 'topic', strict: _1.Strict.false }), 
    __metadata('design:paramtypes', [Object])
], topic);
exports.topic = topic;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = topic;

//# sourceMappingURL=topic.js.map
