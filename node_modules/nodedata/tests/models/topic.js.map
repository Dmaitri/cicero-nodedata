{"version":3,"sources":["tests/models/topic.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,MAAO,QAAQ,WAAW,UAAU,CAAC,CAAC;AAEtC,6BAA8B,2BAA2B,CAAC,CAAA;AAC1D,mBAAqB,uBAAuB,CAAC,CAAA;AAC7C,4BAAwB,aAAa,CAAC,CAAA;AAItC;0CAA2B,qBAAS;IAKhC,YAAY,MAAY;QACpB,MAAM,MAAM,CAAC,CAAC;QACd,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;QAC7C,CAAC;QACD,yBAAyB;QACzB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;IAC7C,CAAC;IAWD,WAAW;QACP,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAED,WAAW;QACP,EAAE,CAAC,CAAC,OAAK,CAAC,cAAc,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACnC,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC9D,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC1C,CAAC;QACD,MAAM,CAAC,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC3C,CAAC;IAED,yBAAyB;QACrB,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC7B,EAAE,CAAC,CAAC,OAAK,CAAC,cAAc,IAAI,EAAE,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,OAAK,CAAC,cAAc,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAClD,CAAC;QACD,MAAM,CAAC,EAAE,CAAC;IACd,CAAC;IAED,6BAA6B,CAAC,EAAU;QACpC,MAAM,CAAC,OAAK,CAAC,cAAc,CAAC;IAChC,CAAC;IAED,0BAA0B;QACtB,IAAI,YAAY,GAAG,CAAC,OAAK,CAAC,cAAc,CAAC,CAAC;QAC1C,EAAE,CAAC,CAAC,OAAK,CAAC,cAAc,CAAC,CAAC,CAAC;YACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBACzB,YAAY,CAAC,IAAI,CAAC,OAAK,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;YAChD,CAAC;QACL,CAAC;QACD,MAAM,CAAC,YAAY,CAAC;IACxB,CAAC;AACL,CAAC;AAvDU,WAAK,GAAW,CAAC,CAAC;AAClB,oBAAc,GAAY,IAAI,CAAC;AAC/B,oBAAc,GAAW,OAAO,CAAC;AAWxC;IAAC,kBAAK,EAAE;;0CAAA;AAGR;IAAC,kBAAK,EAAE;;0CAAA;AAGR;IAAC,kBAAK,EAAE;;uCAAA;AArBZ;IAAC,qBAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,SAAM,CAAC,KAAK,EAAE,CAAC;;SAAA;AACrC,aAAK,QAwDjB,CAAA;AAED;kBAAe,KAAK,CAAC","file":"tests/models/topic.js","sourcesContent":["import Mongoose = require(\"mongoose\");\nimport {Types} from 'mongoose';\nimport {field, document} from '../../mongoose/decorators';\nimport {Strict} from '../../mongoose/enums/';\nimport {baseModel} from './baseModel';\nimport {ShardInfo} from '../../core/interfaces/shard-Info';\n\n@document({ name: 'topic', strict: Strict.false })\nexport class topic extends baseModel implements ShardInfo {\n    static count: number = 0;\n    static enableSharding: boolean = true;\n    static collectionName: string = 'topic';\n\n    constructor(object?: any) {\n        super(object);\n        if (!object || !object._id) {\n            this.createdDate = Date.now().toString();\n        }\n        // set default properties\n        this.updatedDate = Date.now().toString();\n    }\n\n    @field()\n    createdDate: string;\n\n    @field()\n    updatedDate: string;\n\n    @field()\n    shardKey: string;\n\n    getShardKey() {\n        return \"shardKey\";\n    }\n\n    getUniqueId() {\n        if (topic.enableSharding && this._id) {\n            let newId = this.shardKey + this._id.toString().substr(1, 23);\n            return Mongoose.Types.ObjectId(newId);\n        }\n        return (new Mongoose.Types.ObjectId());\n    }\n\n    getCollectionNameFromSelf() {\n        let id = this._id.toString();\n        if (topic.enableSharding && id) {\n            return topic.collectionName + id.substr(0, 1);\n        }\n        return id;\n    }\n\n    getCollectionNameFromShardKey(id: string) {\n        return topic.collectionName;\n    }\n\n    getAllShardCollectionNames(): Array<string> {\n        let allColection = [topic.collectionName];\n        if (topic.enableSharding) {\n            for (var i = 0; i < 5; i++) {\n                allColection.push(topic.collectionName + i);\n            }\n        }\n        return allColection;\n    }\n}\n\nexport default topic;"],"sourceRoot":"/source/"}