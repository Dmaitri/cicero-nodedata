{"version":3,"sources":["tests/models/baseModel.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,6BAA8B,2BAA2B,CAAC,CAAA;AAC1D,2BAAoB,UAAU,CAAC,CAAA;AAC/B,8BAAyB,gCAAgC,CAAC,CAAA;AAE1D,wBAA+B,wBAAU;IACrC,YAAY,MAAY;QACpB,OAAO,CAAC;IACZ,CAAC;AAuBL,CAAC;AArBG;IAAC,kBAAK,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC;;sCAAA;AAG9C;IAAC,kBAAK,EAAE;;uCAAA;AAGR;IAAC,kBAAK,EAAE;;yCAAA;AAGR;IAAC,kBAAK,EAAE;;wCAAA;AAdC,iBAAS,YA0BrB,CAAA;AAED;kBAAe,SAAS,CAAC","file":"tests/models/baseModel.js","sourcesContent":["import {field, document} from '../../mongoose/decorators'; \nimport {Types} from 'mongoose';\nimport {CrudEntity} from '../../core/dynamic/crud.entity';\n\nexport class baseModel extends CrudEntity {\n    constructor(object?: any) {\n        super();\n    }\n\n    @field({ primary: true, autogenerated: true })\n    _id: Types.ObjectId;\n\n    @field()\n    name: String;\n\n    @field()\n    parent: any;\n\n    @field()\n    batch: any;\n\n    /*\n        nodedata internal use for caching, use for findWhere case\n    */\n    __selectedFindWhere: string;\n\n    /*\n        nodedata internal use for caching, to marked as partial load for findMany (egar load case not load)\n    */\n    __partialLoaded: boolean;\n}\n\nexport default baseModel;"],"sourceRoot":"/source/"}